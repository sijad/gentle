{{- $root := . -}}
package {{.PackageName}}

import (
{{- range $imp := .Imports}}
	{{$imp | quote}}
{{end -}}
)

{{if gt (len .Dependencies) 0 -}}
	type Dependencies struct {
		{{- range $dep := .Dependencies}}
			{{$dep.Name | upperCaseFirst}} {{$dep.Type | typeGo}}
		{{- end -}}
	}
{{- end}}

{{range $type := .Types}}
	{{- if eq $type.Kind 3 -}}
		var {{$type.Name}}Map = map[string]func(ctx context.Context, root interface{}, args interface{}, di Dependencies) (interface{}, error){
		{{- range $field := $type.Fields}}
			{{$field.Name | quote}}: func(ctx context.Context, root interface{}, args InputArgs, di Dependencies) (interface{}, error) {
				{{- if $field.IsMethod}}
					{{- if $field.HasArgs -}}
						args = nil // TODO
					{{- end}}
					return root.(*{{$type.Type | typeGo}}).{{$field.Name}}(
						{{- range $param := $field.Params}}
							{{if eq $param.Name "args" -}}
								args,
							{{- else -}}
								{{if eq $param.Name "ctx" -}}
									ctx,
								{{- else -}}
									di.{{index $root.DependenciesNameMap $param.Name | upperCaseFirst}},
								{{- end -}}
							{{- end -}}
						{{- end}}
					){{- if not $field.HasError -}}, nil{{- end}}
				{{else}}
					return root.(*{{$type.Type | typeGo}}).{{$field.Name}}, nil
				{{end -}}
			},
		{{- end}}
		}
	{{end}}
{{end}}
