{{- $root := . -}}
{{- $queryType := .Types.Query -}}
{{- $mutationType := .Types.Mutation -}}
package {{.PackageName}}

import (
{{- range $imp, $alias := .Imports}}
	{{$alias}} {{$imp | quote}}
{{- end -}}
)

{{if gt (len .Dependencies) 0 -}}
	type Dependencies struct {
		{{- range $dep := .Dependencies}}
			{{$dep.Name | upperCaseFirst}} {{typeGo $dep.Type $root.Types}}
		{{- end -}}
	}
{{- else -}}
	type Dependencies interface{}
{{- end}}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

var sources = []*ast.Source{
	{
		Name: "schema.graphqls",
		Input: {{$root.Sdl | rawQuote}},
		BuiltIn: false,
	},
}

var parsedSchema = gqlparser.MustLoadSchema(sources...)

type executableSchema struct {
	{{if $queryType -}}
		Query *{{$queryType.PackageName}}.{{$queryType.Name}}
	{{- end }}
	{{if $mutationType -}}
		Mutation *{{$mutationType.PackageName}}.{{$mutationType.Name}}
	{{- end }}
}

func NewExecutableSchema(
{{- if $queryType -}}query *{{$queryType.PackageName}}.{{$queryType.Name}}{{- end -}},
{{- if $mutationType -}}mutation *{{$mutationType.PackageName}}.{{$mutationType.Name}}{{- end -}}
) graphql.ExecutableSchema {
	return &executableSchema{
		{{if $queryType -}}
			Query: query,
		{{- end}}
		{{if $mutationType -}}
			Mutation: mutation,
		{{- end}}
	}
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			data := ec._Query(ctx, rc.Operation.SelectionSet, e.Query)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

{{range $type := .Types}}
	{{- if eq $type.Kind "OBJECT" -}}
		var {{$type.Name | lowerCaseFirst}}Implementors = []string{ {{$type.Name | quote}} }
		func (ec *executionContext) _{{$type.Name}}(ctx context.Context, sel ast.SelectionSet, obj *{{$type.PackageName}}.{{$type.Name}}) graphql.Marshaler {
			fields := graphql.CollectFields(ec.OperationContext, sel, {{$type.Name | lowerCaseFirst}}Implementors)

			ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
				Object: {{$type.Name | quote}},
			})

			out := graphql.NewFieldSet(fields)
			for i, field := range fields {
				switch field.Name {
				{{- range $field := $type.Fields}}
				case {{$field.Name | lowerCaseFirst | quote}}:
					{{- if $field.IsMethod}}
						field := field
						out.Concurrently(i, func() graphql.Marshaler {
							return ec._{{$type.Name}}_{{$field.Name}}(ctx, field, obj)
						})

					{{else}}
						out.Values[i] = {{$field.Type | typeMarshalerMethodName}}(obj.{{$field.Name}})
					{{- end -}}
				{{- end -}}
				}
			}
			out.Dispatch()
			return out
		}
		{{range $field := $type.Fields}}
			func (ec *executionContext) _{{$type.Name}}_{{$field.Name}}(ctx context.Context, field graphql.CollectedField, obj *{{$type.PackageName}}.{{$type.Name}}) graphql.Marshaler {
				fc := &graphql.FieldContext{
					Object:   {{$type.Name | quote}},
					Field:    field,
					Args:     nil,
					IsMethod: true,
				}
				_ctx = graphql.WithFieldContext(ctx, fc)
				// TODO args
				res := obj.{{$field.Name}}(
					{{- range $param := $field.Params}}
						{{if eq $param.Name "args" -}}
							args,
						{{- else -}}
							{{if eq $param.Name "ctx" -}}
								_ctx,
							{{- else -}}
								ec.di.{{index $root.DependenciesNameMap $param.Name | upperCaseFirst}},
							{{- end -}}
						{{- end -}}
					{{- end}}
				)
				return graphql.MarshalString(res)
			}
		{{- end -}}
	{{end}}
{{end}}
