{{- $root := . -}}
{{- $queryType := .Types.Query -}}
{{- $mutationType := .Types.Mutation -}}
package {{.PackageName}}

import (
{{- range $imp, $alias := .Imports}}
	{{$alias}} {{$imp | quote}}
{{- end -}}
)

{{if gt (len .Dependencies) 0 -}}
	type Dependencies struct {
		{{- range $dep := .Dependencies}}
			{{$dep.Name | upperCaseFirst}} {{typeGo $dep.Type $root.Types}}
		{{- end -}}
	}
{{- else -}}
	type Dependencies interface{}
{{- end}}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

var sources = []*ast.Source{
	{
		Name: "schema.graphqls",
		Input: {{$root.Sdl | rawQuote}},
		BuiltIn: false,
	},
}

var parsedSchema = gqlparser.MustLoadSchema(sources...)

type executableSchema struct {
	{{if $queryType -}}
		Query *{{$queryType.PackageName}}.{{$queryType.Name}}
	{{- end }}
	{{if $mutationType -}}
		Mutation *{{$mutationType.PackageName}}.{{$mutationType.Name}}
	{{- end }}
}

func NewExecutableSchema(
{{- if $queryType -}}query *{{$queryType.PackageName}}.{{$queryType.Name}}{{- end -}},
{{- if $mutationType -}}mutation *{{$mutationType.PackageName}}.{{$mutationType.Name}}{{- end -}}
) graphql.ExecutableSchema {
	return &executableSchema{
		{{if $queryType -}}
			Query: query,
		{{- end}}
		{{if $mutationType -}}
			Mutation: mutation,
		{{- end}}
	}
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			data := ec._Query(ctx, rc.Operation.SelectionSet, e.Query)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

{{range $type := .Types}}
	{{- if eq $type.Kind "OBJECT" -}}
		var {{$type.Name | lowerCaseFirst}}Implementors = []string{ {{$type.Name | quote}} }
		func (ec *executionContext) _{{$type.Name}}(ctx context.Context, sel ast.SelectionSet, obj *{{$type.PackageName}}.{{$type.Name}}) graphql.Marshaler {
			fields := graphql.CollectFields(ec.OperationContext, sel, {{$type.Name | lowerCaseFirst}}Implementors)

			ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
				Object: {{$type.Name | quote}},
			})

			out := graphql.NewFieldSet(fields)
			for i, field := range fields {
				switch field.Name {
				case "__typename":
						out.Values[i] = encodingBasic.MarshalString({{$type.Name | quote}})
				{{- range $field := $type.Fields}}
				case {{$field.Name | lowerCaseFirst | quote}}:
					{{- if $field.IsMethod}}
						field := field
						out.Concurrently(i, func() graphql.Marshaler {
							return ec._{{$type.Name}}_{{$field.Name}}(ctx, field, obj)
						})
					{{- else -}}
						out.Values[i] = ec._{{$type.Name}}_{{$field.Name}}(ctx, field, obj)
					{{- end -}}
				{{- end -}}
				}
			}
			out.Dispatch()
			return out
		}

		{{range $field := $type.Fields}}
			func (ec *executionContext) _{{$type.Name}}_{{$field.Name}}(ctx context.Context, field graphql.CollectedField, obj *{{$type.PackageName}}.{{$type.Name}}) graphql.Marshaler {
				fc := &graphql.FieldContext{
					Object:   {{$type.Name | quote}},
					Field:    field,
					Args:     nil,
					IsMethod: true,
				}
				ctx = graphql.WithFieldContext(ctx, fc)

				{{ if $field.HasArgs }}
					rawArgs := field.ArgumentMap(ec.Variables)
					args, err := ec._field_{{$type.Name}}_{{$field.Name}}_args(ctx, rawArgs)
					if err != nil {
						ec.Error(ctx, err)
						return graphql.Null
					}
				{{- end}}

				resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
					ctx = rctx // use context from middleware stack in children
					return obj.{{$field.Name}}{{if $field.IsMethod}} (
						{{- range $param := $field.Params}}
							{{if eq $param.Name "args" -}}
								args,
							{{- else if eq $param.Name "ctx" -}}
								ctx,
							{{- else -}}
								ec.di.{{index $root.DependenciesNameMap $param.Name | upperCaseFirst}},
							{{- end -}}
						{{- end}}
					){{end}}{{- if not $field.HasError -}}, nil{{- end}}
				})

				if err != nil {
					ec.Error(ctx, err)
					return graphql.Null
				}

				if resTmp == nil {
					return graphql.Null
				}

				res := resTmp.({{typeGo $field.Type $root.Types}})
				fc.Result = res

				return ec.{{$field.Type | typeMarshalerMethodName}}(ctx, field.Selections, res)
			}
			{{ if $field.HasArgs }}
				func (ec *executionContext) _field_{{$type.Name}}_{{$field.Name}}_args(ctx context.Context, rawArgs map[string]interface{}) ({{structTypeGo $field.Args $root.Types}}, error) {
					args := {{structTypeGo $field.Args $root.Types}}{}
					for key, val := range rawArgs {
						switch key {
							{{- range $arg := $field.Args}}
								case {{$arg.Name | lowerCaseFirst | quote}}:
									v, err := ec.{{$arg.Type | typeUnmarshalerMethodName}}(ctx, val)
									if err != nil {
										return args, err
									}
									args.{{$arg.Name}} = v
							{{- end}}
						}
					}
					return args, nil
				}
			{{- end}}
		{{end -}}
	{{end}}
{{end}}

// Marshallers
{{range $type := .Marshallers}}
	func (ec *executionContext) {{$type | typeMarshalerMethodName}}(ctx context.Context, sel ast.SelectionSet, v {{typeGo $type $root.Types}}) graphql.Marshaler {
		{{ if eq $type.Kind "NONNULL" -}}
			return ec.{{$type.OfType | typeMarshalerMethodName}}(ctx, sel, &v)
		{{- else -}}
			if v == nil {
				return graphql.Null
			}
			{{ if eq $type.Kind "OBJECT" -}}
				return ec._{{$type.Name}}(ctx, sel, v)
			{{- else if eq $type.Kind "LIST" -}}
				arr := *v
				ret := make(graphql.Array, len(arr))
				var wg sync.WaitGroup
				wg.Add(len(arr))
				for i := range arr {
					fc := &graphql.FieldContext{
						Index:  &i,
						Result: &arr[i],
					}
					ctx := graphql.WithFieldContext(ctx, fc)
					go func(i int) {
						defer wg.Done()
						ret[i] = ec.{{$type.OfType | typeMarshalerMethodName}}(ctx, sel, arr[i])
					}(i)
				}
				wg.Wait()
				return ret
			{{- else if isBasicScalar $type -}}
				return encodingBasic.Marshal{{$type.Name | upperCaseFirst}}(*v)
			{{- else -}}
				return encodingBasic.MarshalScalar(v)
			{{- end }}
		{{- end }}
	}
{{end}}

// Unmarshallers
{{range $type := .Unmarshallers}}
	func (ec *executionContext) {{$type | typeUnmarshalerMethodName}}(ctx context.Context, v interface{}) ({{typeGo $type $root.Types}}, error) {
		var defVal {{typeGo $type $root.Types}}
		if v == nil {
			return defVal, nil
		}
		{{ if eq $type.Kind "NONNULL" -}}
			val, err := ec.{{$type.OfType | typeUnmarshalerMethodName}}(ctx, v)
			if err != nil {
				return defVal, err
			}
			if val == nil {
				return defVal, nil
			}
			return *val, nil
		{{- else -}}
			{{ if eq $type.Kind "OBJECT" -}}
				// TODO object args return
			{{- else if eq $type.Kind "LIST" -}}
				// TODO list args return
			{{- else if isBasicScalar $type -}}
				val, err := encodingBasic.Unmarshal{{$type.Name | upperCaseFirst}}(v)
				return &val, err
			{{- else -}}
				err := defVal.UnmarshalGQL(v)
				return defVal, err
			{{- end }}
		{{- end }}
	}
{{end}}
