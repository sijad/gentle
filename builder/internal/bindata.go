// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x53\xe3\xb8\x12\x7e\xb6\x7f\x45\x9f\xd4\x14\x65\x53\x5e\xb3\xcf\xa9\xe2\x61\x80\x5d\x96\x73\xb8\x2c\x1b\x76\xf6\x61\x6a\x8a\x12\x76\x27\x78\x70\x6c\x23\xc9\x01\xca\xe3\xff\x7e\xaa\x25\xd9\x96\x9c\x0b\x61\x96\x17\x12\x49\xdd\xea\xcb\xd7\x5f\xb7\xd2\x34\xbf\xc0\x27\x5e\x96\x12\xa6\xc7\x10\xc3\x2f\x6d\xeb\xab\xa5\xe7\x1a\xf9\xdb\xdd\x5b\x85\x6a\x9d\x3e\x88\xf8\x96\xd6\x86\x23\xcb\x5a\x32\x99\x95\xc5\xe8\xd4\x95\x59\x56\x07\x2b\x96\x3c\xb1\x05\x42\xd3\xc4\x7f\xea\x8f\xd7\x6c\x89\x6d\xeb\xfb\xd9\xb2\x2a\xb9\x84\x40\xe9\xe2\xac\x58\x20\x7c\xca\x96\x55\x04\x9f\x58\x9e\x31\xa1\x14\x5e\xa8\x33\xa2\x6d\x7d\xaf\x69\xf4\x7a\xdb\x42\xd3\xd0\x41\xf8\x01\xcf\x75\x29\xd1\x58\x83\x45\xaa\x2e\x0c\x7d\xbf\x69\xb2\x39\x2c\x24\x04\x39\x16\x10\x9f\x61\x85\x45\x8a\x45\x92\xa1\x08\xe1\x57\x75\xc8\x93\x64\xb2\xbd\x03\x42\xf2\x3a\x91\xd0\xf8\x9e\x67\x19\x94\x62\xa5\x0c\xb1\x8f\x92\x3c\x1d\xa2\xcd\x98\xbc\x81\x1f\x50\x57\x15\xf2\x53\x26\xf0\xf7\x8c\x0b\xa9\x6c\xa4\x2b\xce\x4b\xa5\x42\x05\x46\x47\x59\xc7\x48\xa9\xb0\xad\xf6\x8c\x13\xb9\xc0\x6d\x06\x66\x85\x44\x3e\x67\x09\x36\xbd\xc3\x14\x46\x75\x10\x5f\x31\xa9\x29\xe6\xa7\x65\x21\xf1\x55\x5a\xde\x1c\x2e\x38\xab\x1e\x9f\xf3\xf8\xa6\x42\xce\xac\x33\xbe\x77\xa8\xc5\xd8\x43\x8e\xb3\xe4\x11\x97\xcc\x6f\x7d\x7f\xc5\x38\x88\xb2\xe6\x09\x0a\x38\x86\xaf\xdf\x0e\x99\x90\xf1\x4c\x2d\x34\xbe\x47\xe1\x21\x97\xa7\x30\x11\x4a\x24\x36\xea\xc5\x24\xf2\x3d\xef\xa2\xa8\x6a\x39\xa5\x04\x29\x5f\x67\x69\x0e\x3f\x80\xb3\x97\x5b\x9d\x28\x3a\x72\x52\x67\xb9\xbc\x28\xa6\x30\x67\xb9\xc0\xc8\xf7\xda\xa8\xbb\xb6\x62\x5c\x60\xaa\x4d\x81\x63\x58\x3c\xe7\x6a\x85\xc7\x57\xb5\x90\x97\x25\x33\x5b\x81\x31\x2f\x8e\xe3\xd0\xf1\x7f\x70\xc4\xf2\x5f\x81\xc1\x42\xb3\x8a\xae\xa7\x91\x7c\xd8\x34\xc3\x8e\x8b\xcf\xd8\xd9\x32\x98\xed\x53\xa6\x3f\x93\x62\xa7\x06\xb4\xee\x1e\xff\xa4\xde\xde\x5f\xbf\xc1\xd9\xdd\x70\x49\xeb\xfb\xf3\xba\x48\xe0\x1a\x5f\x7e\x1b\xb9\xa8\xeb\x66\xcd\xb7\xe7\x9f\x71\xcc\x42\x62\xd4\xab\x1d\x7b\xb6\xfc\x57\x6e\x39\x25\x0a\x1d\x26\xc7\x4e\x51\xc2\x38\xca\x9a\x17\x70\x30\xce\xa9\xae\xcc\x4d\xc9\xd4\xd9\x9c\x82\x5a\x8f\x86\xca\x32\x55\xb6\x25\x4d\x7d\x9e\xa6\xd0\xed\x8e\x64\x87\xf8\x07\x08\x6b\xc5\x12\x82\x49\x44\x08\xba\x46\xc6\x1e\xd8\x70\x7e\x47\xd3\x69\xb9\xac\x72\x7c\xcd\xe4\x5b\x40\x78\xa6\x90\x45\x30\xcf\x30\x4f\x09\xc9\x59\xb1\x88\x20\x79\xcc\xf2\x74\x38\x47\x74\x10\x51\x69\x7d\xe6\x0b\x01\x4b\x56\x7d\xd5\x07\xbf\x59\x34\x11\x42\xa0\x4e\x3d\x94\x65\x1e\x5a\x86\xfd\x1a\xe9\xe2\x7b\xc7\x28\x4a\x4e\x90\xc8\x57\x48\x34\x61\xc4\x86\x38\x86\xf4\xfd\x85\xa2\x2a\x0b\x81\x7f\xb0\x22\xcd\x91\xab\x2b\x12\xe2\xcb\xee\xc0\x39\xca\x31\xed\x90\xc6\xd0\xf7\x50\x9d\x1b\xf3\x56\xc3\x93\x08\xb0\xf5\x7d\x4f\xbc\x64\x32\x79\x04\x9e\x0c\xbc\x35\x7c\xa2\x8b\x12\x26\x10\x28\xee\x3a\xf9\xbe\xd7\x79\x47\x1e\x6d\x36\xfb\x70\x6c\xb7\x62\x7b\x2f\x65\x92\x29\x63\x92\xf8\x5e\x29\x23\xe9\xc8\xbd\x7a\x86\x39\x26\xf4\x69\x86\x32\x02\xd4\x97\x86\x24\x4d\xc4\xf5\x50\xcf\xe1\xe1\x4d\xa2\x88\x4f\xea\xf9\x1c\x79\xa7\x35\xbe\x62\x5c\x3c\xb2\xfc\xfc\xf6\x32\x38\x78\xa8\xe7\xa1\x4f\x3b\x1d\xc0\xc7\xd6\x28\x63\xbc\x33\x26\xd9\x94\x34\xc6\x27\xa4\x31\x08\x09\x94\x1e\x01\x96\xc2\x92\xe2\x9c\xd5\xb9\xb4\xdc\xed\xe9\xbd\xc0\xd9\x63\x29\x83\xbe\xb4\x38\x2f\x79\xa7\x5a\x7b\x34\xa9\x0b\x51\x57\xd4\x51\x31\x85\x73\x3a\x77\x7b\x09\x65\xe7\xe3\x24\x0c\x0d\xe4\x9b\xc6\x74\x3f\xe9\x34\xf6\x8e\x9b\xb2\x39\xe0\xb3\xde\x8c\xff\x97\x15\x29\x4c\x6e\x4e\xfe\xfb\xdb\xe9\xdd\xc4\x14\x16\x45\xa4\x69\xf4\xbe\x69\x8f\x79\xf9\xe2\xb4\xc7\x0b\x82\xf1\x12\x0b\x59\x72\xdd\x65\x34\x78\x9b\xb1\x9c\x69\xf0\x40\x6a\x0d\x52\x93\x0e\xaa\x03\x6a\x42\xb8\xb7\xe5\xda\x76\x53\xfa\x23\x10\x98\x2b\xc0\xb8\xb9\x2c\x1f\xbe\x2b\x46\x93\x1b\x99\xcc\x52\x3a\xc0\xde\x64\x55\x03\xde\xf3\x54\x9d\x0a\x1b\xf6\xa7\x65\x4e\x57\xfc\xae\x36\x02\x4c\xd6\x7a\xaf\x32\x26\xfa\x48\x94\x34\x74\xc8\xaf\xe1\x9a\x7f\x32\xf9\xa8\xee\xb0\x4a\x2b\x1a\x70\x65\x6f\x69\x6c\xdd\x3c\x7c\xc7\x44\xf7\xe7\x0d\x51\xd6\x40\xd3\x17\x95\xb5\xb4\x1d\xba\xc6\x17\xa5\x6d\x86\x32\xd0\xee\x2a\xec\xcf\x4b\x0e\x59\x47\x54\xd3\x63\x33\x34\x99\x78\xe8\x2b\x4d\x1d\xab\x35\x7d\x9f\x5e\x57\xe5\x3b\xb9\xbf\x27\x3b\x0a\xb6\xc4\xc9\x54\x2d\xab\x9b\xe3\x2f\x2c\xaf\x51\x7c\xcd\xbe\xc1\x31\x60\x91\x94\x69\x56\x2c\x4e\x98\xc8\x92\x2e\xf4\x33\x05\x97\x60\xb3\x1f\xca\x34\x7b\x88\xeb\xed\xd3\xa7\x75\x5a\x74\x0f\xd0\x76\x34\xcd\x27\xcb\xc0\x71\x22\x06\xcd\xc6\xc6\xae\x43\x6a\x99\x0b\x71\x85\xf2\xb1\x4c\x8d\x42\x83\x07\xba\x4e\x7d\xb0\xdc\x3a\x2d\x8b\xa4\xe6\x1c\x0b\x99\xbf\x05\x14\x37\x62\xaa\xad\xb0\xf2\x06\xaa\x20\x66\x72\xc1\x78\xef\x98\xac\x11\x6f\x12\xa1\x20\x1d\x1a\x0d\x26\x18\x9e\x3b\x5c\x6e\x0e\xf4\xcf\x5e\xe2\xcc\xb1\x1b\xbe\xb7\x1d\x81\xa9\x2b\xcf\x32\x51\x31\x99\x3c\x06\xa1\xc5\x85\x65\x2d\x0d\xc1\x79\x3d\xf9\xec\xc8\xda\x07\xa8\x60\x93\x0f\xeb\xd4\xa0\xef\x1a\x95\x2f\xa6\xbf\xf7\xae\xfe\x4b\x8a\xf0\xe6\xaa\xdd\xed\x28\xcd\xbe\x36\x61\x57\x75\x7a\x9e\x92\xa4\x53\x26\x0f\x7a\x95\x86\x00\xb5\x08\x45\x96\x9b\xb5\x0e\x97\x53\x90\xbc\xc6\x68\x48\xc5\x5e\x2c\x32\x4f\x34\x11\x78\x4d\x63\x61\xfd\x0f\x26\xd4\xbc\xd1\x81\xa8\x9b\x3f\x3a\xb0\xc7\x9f\xf9\xa2\x26\xc6\xba\x62\x15\xf1\xde\x17\xc6\x33\x1a\x29\x84\x81\x0a\xe3\x0b\x11\x01\x72\xde\xf5\x5b\x25\xf5\x4e\xca\xee\x49\xca\xf4\x64\x7d\x9f\xd1\x46\x8d\x88\x73\xf8\xcf\x31\x79\xdd\x17\x0d\x26\xba\xf7\x69\x09\xe4\xbc\xab\x85\x51\xc3\xbc\xae\xf3\x5c\xef\x38\xb0\x6d\x5b\xed\x37\x47\x71\x47\xaf\xd1\xc1\xd8\xbf\x50\x94\xf9\x0a\xf9\x55\x96\xa6\x39\xbe\x30\x6e\xda\xaa\x2a\x63\xbe\x71\xe2\x08\xac\x69\x4c\xa9\x2a\x79\xd8\x19\xaa\xb3\xa0\xe4\x8e\x8e\xa0\x16\xd8\x89\xc3\x9c\x97\x4b\x58\xf6\xb7\x80\x90\x2c\x79\x82\xac\xd0\x33\x20\xc7\xc2\xb7\xfd\x29\x1f\xbe\xc7\xa3\x88\xe9\x99\x77\x4c\x4f\x10\x98\x40\x58\xd4\x58\x31\xce\x96\xaa\xc8\xf4\xe9\x3f\xe9\xbb\xe8\x39\x42\x4f\xcf\xd4\xed\xd5\x41\x0d\xc9\x09\xe5\x63\x62\x31\x89\xc9\xeb\x20\x63\xb8\x66\x83\x68\x22\x5f\x5d\x49\x8a\xe0\x9a\xa0\x7d\x00\x93\x38\xcd\xe2\xa6\xc9\x8a\x14\x5f\xcd\x1b\xda\x7e\x17\x93\xde\x2b\x56\x39\xd7\xac\xbf\xc7\xdd\x3b\x2c\x72\x72\x1f\x0b\x9e\xe7\x85\x4d\xa3\xbe\x19\x92\x2f\x4a\x69\x81\x5f\x01\x4b\x3d\x93\x08\x72\xae\xa4\xe9\x9c\x9b\x51\xb9\x0d\x94\xdb\x30\xd9\xf6\xba\x34\x0e\xe1\xd8\x51\xf7\x8e\x18\x47\x55\x92\x5a\x34\x0e\x86\xdf\x22\xb4\x23\xeb\xbf\x46\x84\x86\xa4\x08\xe3\x75\x2e\x41\xc9\x76\xba\xba\x16\xd4\x83\x4c\xc9\xff\x00\x52\xda\xf3\x9c\x06\xd9\x5a\x9f\x18\x86\x2d\x11\x91\xce\xb0\xef\x05\xbb\x78\x65\x27\xbf\x7f\x88\x32\xd6\xa9\xfe\xdd\x27\x53\xd3\xe8\x1f\x0f\xee\x9c\x98\x29\x19\x27\x66\xe3\x7a\x66\x86\x08\xf7\x95\x6f\x0c\xe0\x68\x88\x7a\xc2\xb7\x08\x56\x2c\x1f\x86\xa8\xce\xcc\x8e\xd5\xcc\x1c\xf5\x84\x6f\xc3\x74\x60\xd5\x31\xe3\x0b\xab\x8a\x49\xd2\xae\x31\x33\xe3\x30\xbe\xd8\x73\xc2\xa1\xbf\x95\xcd\x7d\x46\xda\xca\xfc\xdf\xc5\x72\x7b\xee\x57\x2c\x0f\x07\x4d\x9b\x79\xda\x02\x57\xdf\x16\x86\xad\xc1\x7a\x15\xd8\xd8\x32\xbf\x6d\xe1\x18\x56\xa3\x82\xee\xdd\x6d\x6d\x4e\x77\x2f\x28\xb2\x7c\xe8\x82\xee\x6f\x04\x3d\x25\x98\xea\xf7\xbb\xff\xfe\xd1\x11\x18\x90\xe7\xc8\xc5\x86\xb7\x91\xb5\x4b\x0a\x76\x61\xd7\x80\xf6\xbd\xda\xd9\xf7\xe9\xb2\xb2\x7e\x65\x94\xeb\x35\xbd\x65\x18\xd1\x85\x37\x7a\xc1\x5d\xdf\x5c\x5f\xff\x7d\x79\xd9\x73\xb3\x53\xf5\xea\xdc\xcd\x7c\xbf\xb2\x57\x0f\x9b\x83\x55\xe8\xaf\xf3\x79\x36\x87\x95\x4b\x64\x5b\x78\xcc\x22\x88\x9d\x2f\xcd\x1d\x03\xb2\x65\x8c\xb2\x65\xad\x2b\x59\x4a\x2f\x2f\x66\x96\x4a\xa6\x41\x7f\xb8\xea\x2e\xa0\x6f\x4b\xf6\x84\xfd\xd3\xfa\x33\xe7\xec\x2d\x82\x1c\x8b\x80\x71\x1e\x6a\xa4\xd3\xab\xf7\x65\x01\xe2\xad\x48\xe2\x7f\x58\x26\xcf\x79\x59\x57\x6a\xe7\x65\x11\x7f\x4e\xd3\xc0\x3d\xae\x9e\x4e\x43\xb9\xd3\xa5\xa6\x30\xde\x1f\x15\xbd\x0b\xea\x85\x53\x80\x83\xac\xeb\x6b\x9a\xb7\xa7\x70\xc0\x38\xff\x9a\x7d\x8b\x9c\x22\x20\x48\x4d\xf7\x19\xf8\xd4\xe9\x45\xa9\x27\x9a\x0c\xb2\x42\xf6\xec\xe6\xa5\x38\x47\xf2\x30\x3e\x2b\x0b\x0c\xac\x99\xaa\x7f\x3d\xfc\x14\x52\xb4\xbd\x46\x5d\x1b\x64\xa1\x35\xa7\xbe\x2c\x54\x24\xcd\x65\x26\xd5\x1c\xe5\x38\x9d\x99\x50\x8f\xc3\x59\xc2\x72\xc6\x4d\x29\x8c\x01\xb2\xe9\x15\x39\x1a\xb4\xc7\x33\x43\x70\x38\x42\xce\x3e\x3a\xb5\x11\x81\x25\x69\x7e\x2e\x76\xbe\xb8\xfc\xd2\x53\xe9\x16\x86\x71\xf6\x3f\xc6\x31\x3b\x58\x7a\x9d\x65\x56\x30\xee\x84\xdb\xd9\xc5\xe9\x7e\x84\xfd\x14\xe7\x5f\x58\xbe\x93\x91\xfc\x0d\x14\x60\x62\xa9\xa5\x3b\x8a\x6e\xf7\xa5\xa9\x15\xc9\x38\x5d\x6a\x1d\x81\xbb\x1b\x55\xe8\x6f\x69\x50\x23\xc3\x4c\x73\xea\x79\x8c\xe5\x1b\x99\xcc\xf5\xc3\xb3\xb9\xf4\x70\x35\x6c\x8c\x21\xb5\x17\xd7\x1d\x1d\xc1\xdd\xcd\xd9\x0d\x0d\xfc\x98\x48\xd5\xd3\x40\xeb\xfe\x10\xbf\x75\x6a\xf2\x4c\xec\x54\xb2\xab\xaa\x9c\xb8\x3b\x65\xd0\x47\xfb\xbd\xe2\x5a\x39\x55\x7d\xb0\xb2\x82\xbc\x56\x70\xe6\x26\x1d\xdc\xe1\x8a\xf3\xdb\xcb\x91\x9a\x51\xb6\xf6\xa8\xbf\xff\x07\x00\x00\xff\xff\x8d\xa2\x29\x7b\xff\x1c\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 7423, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
