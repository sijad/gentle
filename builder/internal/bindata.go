// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x6f\x9c\x3e\x16\x7f\x36\x9f\xe2\x68\x14\x55\x10\x51\xd2\xe7\x91\xf2\xb0\x49\xda\x6c\x76\x73\x69\x76\xba\xbb\x0f\x55\x15\x79\xe0\x30\x43\x97\x01\x62\x9b\x5c\x44\xf8\xee\xab\x63\x1b\x30\x0c\x49\xd3\x7f\x9f\xc2\xd8\xc7\xe7\xfa\x3b\xbf\x63\xa7\x69\x3e\xc2\x81\x28\x4b\x05\xcb\x63\x88\xe0\x63\xdb\x7a\x7a\xe9\xbe\x46\xf1\xfc\xed\xb9\x42\xbd\x4e\x1f\x32\xba\xa5\xb5\x41\x64\x57\x2b\xae\xb2\xb2\x98\x48\x5d\xd9\x65\x2d\x58\xf1\xf8\x7f\x7c\x83\xd0\x34\xd1\x57\xf3\x79\xcd\x77\xd8\xb6\x9e\x97\xed\xaa\x52\x28\xf0\xb5\x2e\xc1\x8b\x0d\xc2\x41\xb6\xab\x42\x38\xe0\x79\xc6\xa5\x56\x78\xa1\x65\x64\xdb\x7a\xac\x69\xcc\x7a\xdb\x42\xd3\x90\x20\xbc\xc0\x7d\x5d\x2a\xb4\xde\x60\x91\x68\x83\x81\xe7\x35\x4d\x96\xc2\x46\x81\x9f\x63\x01\xd1\x19\x56\x58\x24\x58\xc4\x19\xca\x00\x3e\x69\x21\xa6\xc8\x65\x77\x07\xa4\x12\x75\xac\xa0\xf1\x18\x73\x1c\x4a\xb0\xd2\x8e\xb8\xa2\x74\x9e\x84\x68\x33\xa2\x68\xe0\x05\xea\xaa\x42\x71\xca\x25\x7e\xc9\x84\x54\xda\x47\x32\x71\x5e\x6a\x15\x3a\x31\x26\xcb\x26\x47\x5a\x85\xeb\x35\xb3\x41\xe4\x12\x5f\x73\x30\x2b\x14\x8a\x94\xc7\xd8\xf4\x01\x53\x1a\xb5\x20\x3e\x61\x5c\x53\xce\x4f\xcb\x42\xe1\x93\x72\xa2\x39\xdc\x08\x5e\x6d\xef\xf3\xe8\xa6\x42\xc1\x1d\x19\x8f\x1d\x9a\x63\x7c\x9d\xe3\x2a\xde\xe2\x8e\x7b\xad\xe7\x3d\x70\x01\xb2\xac\x45\x8c\x12\x8e\xe1\xfb\x8f\x43\x2e\x55\xb4\xd2\x0b\x8d\xc7\x28\x3d\x14\xf2\x12\x16\x52\x1f\x89\xac\x7a\xb9\x08\x3d\xc6\x2e\x8a\xaa\x56\x4b\x2a\x90\x8e\x75\x95\xe4\xf0\x02\x82\x3f\xde\x9a\x42\x91\xc8\x49\x9d\xe5\xea\xa2\x58\x42\xca\x73\x89\xa1\xc7\xda\xb0\x33\x5b\x71\x21\x31\x31\xae\xc0\x31\x6c\xee\x73\xbd\x22\xa2\xab\x5a\xaa\xcb\x92\xdb\x2d\xdf\xba\x17\x45\x51\x30\x8a\x7f\x08\xc4\x89\x5f\x83\xc1\x41\xb3\xce\x2e\x33\x48\x3e\x6c\x9a\x61\x67\x8c\xcf\x68\xb4\x65\x31\xdb\x97\xcc\x7c\x93\xe2\x51\x0f\x18\xdd\x3d\xfe\x49\xbd\xbb\xbf\x6f\x61\xb4\x3b\x63\xa4\xf5\xbc\xb4\x2e\x62\xb8\xc6\xc7\xcf\x93\x10\x4d\xdf\xec\xc5\x76\xff\x57\x02\x73\x90\x18\xf6\x6a\xa7\x91\xed\xfe\x28\xac\x51\x8b\x42\x87\xc9\x69\x50\x54\x30\x81\xaa\x16\x05\x7c\x98\xd6\xd4\x74\xe6\x5c\x31\x4d\x35\x97\xa0\xd7\xc3\xa1\xb3\x6c\x97\xbd\x52\xa6\xbe\x4e\x4b\xe8\x76\x27\x67\x87\xfc\xfb\x08\x7b\xcd\x12\x80\x2d\x44\x00\xa6\x47\xa6\x11\xb8\x70\xfe\x85\xa6\xd3\x72\x57\xe5\xf8\x94\xa9\x67\x9f\xf0\x4c\x29\x0b\x21\xcd\x30\x4f\x08\xc9\x59\xb1\x09\x21\xde\x66\x79\x32\xc8\x11\x1d\x84\xd4\x5a\x7f\x13\x1b\x09\x3b\x5e\x7d\x37\x82\x3f\x1c\x9a\x08\xc0\xd7\x52\xeb\xb2\xcc\x03\xc7\xb1\x4f\xa1\x69\xbe\x5f\x38\x45\xc5\xf1\x63\xf5\x04\xb1\x21\x8c\xc8\x12\xc7\x50\xbe\x7f\xa1\xac\xca\x42\xe2\xdf\x79\x91\xe4\x28\xb4\x89\x98\xf8\xb2\x13\x38\x47\x35\xa5\x1d\xd2\x18\x78\x0c\xb5\xdc\x94\xb7\x1a\x11\x87\x80\xad\xe7\x31\xf9\x98\xa9\x78\x0b\x22\x1e\x78\x6b\xf8\x22\x43\x31\x97\x08\x94\x77\x53\x7c\x8f\x75\xd1\x51\x44\xf3\x6e\x1f\x4e\xfd\xd6\x6c\xcf\x12\xae\xb8\x76\x26\x8e\xee\xb4\x32\x3a\x1d\x8e\x4d\xaf\x30\xc7\x98\xbe\x56\xa8\x42\x40\x63\x34\xa0\xd3\x44\x5c\xeb\x3a\x85\xf5\xb3\x42\x19\x9d\xd4\x69\x8a\xa2\xd3\x1a\x5d\x71\x21\xb7\x3c\x3f\xbf\xbd\xf4\x3f\xac\xeb\x34\xf0\x68\xa7\x03\xf8\xd4\x1b\xed\x0c\x3b\xe3\x8a\x2f\x49\x63\x74\x42\x1a\xfd\x80\x40\xc9\x08\xb0\x94\x96\x04\x53\x5e\xe7\xca\x09\xb7\xa7\xf7\x02\x57\xdb\x52\xf9\x7d\x6b\x09\x51\x8a\x4e\xb5\x89\x68\x51\x17\xb2\xae\x68\xa2\x62\x02\xe7\x24\x77\x7b\x09\x65\x17\xe3\x22\x08\x2c\xe4\x9b\xc6\x4e\x3f\x35\x1a\xec\x1d\x37\x65\x29\xe0\xbd\xd9\x8c\xfe\x99\x15\x09\x2c\x6e\x4e\xfe\xf1\xf9\xf4\xdb\xc2\x36\x16\x65\xa4\x69\xcc\xbe\x1d\x8f\x79\xf9\x38\x1a\x8f\x17\x04\xe3\x1d\x16\xaa\x14\x66\xca\x18\xf0\x36\xd3\x73\x76\xc0\x03\xa9\xb5\x48\x8d\x3b\xa8\x0e\xa8\x09\xe0\xce\x3d\xd7\xb6\x73\xe5\x0f\x41\x62\xae\x01\x33\xae\x65\xb9\xfe\xa9\x19\x4d\xcd\x32\x99\xa3\x74\x80\xbd\xad\xaa\x01\x3c\x63\xba\x4f\xa5\x0b\xfb\xd3\x32\x27\x13\x5f\xf4\x86\x8f\xf1\xde\xec\xd5\xce\x84\xbf\x93\x25\x03\x1d\x8a\x6b\x30\xf3\xdf\x4c\x6d\xb5\x0d\xa7\xb5\xc2\x01\x57\xee\x96\xc1\xd6\xcd\xfa\x27\xc6\x66\x3e\xcf\x64\xd9\x00\xcd\x18\x2a\x6b\xe5\x06\x74\x8d\x8f\x5a\xdb\x0a\x95\x6f\xc2\xd5\xd8\x4f\x4b\x01\x59\x47\x54\xcb\x63\x7b\x69\xb2\xf9\x30\x26\x6d\x1f\xeb\x35\x63\xcf\xac\xeb\xf6\x5d\xdc\xdd\x91\x1f\x05\xdf\xe1\x62\xa9\x97\xb5\xe5\xe8\x3f\x3c\xaf\x51\x7e\xcf\x7e\xc0\x31\x60\x11\x97\x49\x56\x6c\x4e\xb8\xcc\xe2\x2e\xf5\x2b\x0d\x17\x7f\x3e\x0e\xed\x9a\x7b\x89\xeb\xfd\x33\xd2\xa6\x2c\x66\x06\x18\x3f\x9a\xe6\xc0\x71\x70\x5a\x88\x41\xb3\xf5\xb1\x9b\x90\xe6\xcc\x85\xbc\x42\xb5\x2d\x13\xab\xd0\xe2\x81\xcc\xe9\x0f\x27\xac\xd3\xb2\x88\x6b\x21\xb0\x50\xf9\xb3\x4f\x79\x23\xa6\x7a\x15\x56\x6c\xa0\x0a\x62\xa6\x31\x18\xef\x46\x2e\x1b\xc4\xdb\x42\x68\x48\x07\x56\x83\x2d\x27\xf9\x4c\x77\xcb\xde\xc7\x69\x96\x7b\x75\x7a\x40\xbe\x00\x99\xea\xfd\x31\xf1\x59\x43\xe5\xfa\x67\x34\x31\x1e\x0c\x69\xe9\xef\xb3\x33\xbf\xdb\x8e\xc8\xb4\xf5\xb3\x4c\x56\x5c\xc5\x5b\x3f\x70\x38\xb1\xac\x95\x67\x64\x7a\x0e\x7a\xa3\x78\xbf\xc1\x08\x73\xf9\xda\x67\x08\x63\x6b\xd2\xc5\x98\x7c\xe9\xd3\xfa\x87\x4c\xc1\x52\x3d\xf5\xde\xe8\xd0\xbe\x45\xe1\xad\x26\x65\x4c\x9f\x24\x29\x5b\x73\xb3\x4a\x77\x01\xbd\x08\x45\x96\xdb\xb5\x0e\x9e\x4b\x50\xa2\xc6\x70\xa8\xc4\xbb\xc8\x24\x8d\x2d\x80\x8e\x8e\xe0\xdb\xcd\xd9\x0d\x70\xb1\x91\x66\x45\xa0\xe6\xbc\x19\x3c\xf8\x03\x1e\x6c\x11\x2b\x2e\xf8\x4e\x17\xd1\xc8\x7d\xa5\xdf\xb2\x47\xa3\xbe\xa3\xd1\x4c\xd1\x72\x26\xe2\x05\x59\x5a\xf4\xe0\x61\x8c\xd1\x42\xd8\x9f\x70\x1f\x4b\x6f\x68\x89\xd5\xd3\x48\x09\xbb\xa3\xb8\x86\x23\xfb\x6a\x18\xc6\x51\x92\x45\x4d\x93\x15\x09\x3e\xd9\x57\x9b\xfb\x12\x23\xc5\x57\xbc\x1a\xd9\xd9\x7f\x01\x8e\x6d\x38\x6d\x30\xb3\xe2\xde\x57\x19\x0b\xba\xfc\x76\xbd\xff\xfe\xe6\x1c\x58\x60\x98\x72\x32\x04\x81\x86\xaf\xf7\x5e\x9d\x4d\x63\xcc\x76\x7f\xbd\xa3\x23\xb0\x9a\x73\x14\x72\xee\x2a\xe0\x6c\x93\x86\xb7\x7a\xd0\x22\xf8\x57\x1e\xbf\x77\x52\x3f\x38\x8f\x6a\xb5\xf7\xa0\x7e\xad\xe9\x9a\x66\xe6\xc2\x72\x7d\x73\x7d\xfd\xef\xcb\xcb\x1e\x19\xa3\x5c\x6b\xb9\x9b\xf4\x7d\xc9\xd6\x73\xfc\xc3\x43\xe0\xed\x83\x29\x4b\xe1\x01\x8e\x8f\xa9\x17\x6d\xfb\x4f\xae\x6c\xd7\x75\x9e\xf7\x9c\x38\xeb\xe7\xf8\x62\xd5\x2b\x28\xb2\xdc\x9b\x43\xaf\xd1\x91\x49\x3d\x2b\x57\x31\xcf\xb9\xb0\xa9\xea\xa1\xd6\x45\x3a\x37\x55\x27\x8c\x33\x45\xb4\x7f\xf8\x10\x8c\x88\xbd\xfb\x47\x88\xf3\xcb\xfd\x31\xc0\xea\xff\x01\x00\x00\xff\xff\xa7\x04\x52\xec\x64\x12\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 4708, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
