// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x5f\x6f\x9c\x46\x10\x7f\x5e\x3e\xc5\xe8\x64\x45\x60\x11\x92\xe7\x93\xfc\x50\xdb\x89\xeb\x36\x8e\xe3\x5e\xd4\x3e\x44\x91\xb5\x07\xc3\x1d\x29\x07\x78\x77\xa9\x6d\xad\xf9\xee\xd5\xec\x2e\xb0\x70\x67\xa7\x69\x9e\x8e\x9b\x9d\x7f\xbf\x99\xdf\xcc\x82\xd6\xaf\xe1\x48\xd4\xb5\x82\xe5\x09\x24\xf0\xba\xeb\x02\x23\xba\x6b\x51\x3c\x7e\x7e\x6c\xd0\xc8\xe9\x41\x26\x37\x24\x1b\x55\x76\xad\xe2\xaa\xa8\xab\x99\xd6\x95\x13\x1b\xc5\x86\xa7\x7f\xf3\x0d\x82\xd6\xc9\x27\xfb\xf8\x91\xef\xb0\xeb\x82\xa0\xd8\x35\xb5\x50\x10\x1a\x5f\x82\x57\x1b\x84\xa3\x62\xd7\xc4\x70\xc4\xcb\x82\x4b\xe3\xf0\xd2\xe8\xc8\xae\x0b\x98\xd6\x56\xde\x75\xa0\x35\x29\xc2\x13\xdc\xb5\xb5\x42\x97\x0d\x56\x99\x09\x18\x05\x81\xd6\x45\x0e\x1b\x05\x61\x89\x15\x24\xe7\xd8\x60\x95\x61\x95\x16\x28\x23\x78\x6b\x94\x98\xa2\x94\xfd\x13\x90\x4a\xb4\xa9\x02\x1d\x30\xe6\x25\x94\x61\x63\x12\xf1\x55\xc9\x9e\x94\xe8\x30\x21\x34\xf0\x04\x6d\xd3\xa0\x38\xe3\x12\xdf\x17\x42\x2a\x93\x23\x85\xb8\xa8\x8d\x0b\x53\x18\x5b\x65\x5b\x23\xe3\xc2\xcf\x9a\x39\x10\xa5\xc4\xe7\x12\x2c\x2a\x85\x22\xe7\x29\xea\x01\x30\x95\xd1\x28\xe2\x03\xa6\x2d\xd5\xfc\xac\xae\x14\x3e\x28\x0f\xcd\xf1\x46\xf0\x66\x7b\x57\x26\xd7\x0d\x0a\xee\xe9\x04\xec\xd8\x9a\xf1\x75\x89\xab\x74\x8b\x3b\x1e\x74\x41\xf0\x0f\x17\x20\xeb\x56\xa4\x28\xe1\x04\xbe\x7c\x3d\xe6\x52\x25\x2b\x23\xd0\x01\xa3\xf2\x10\xe4\x25\x2c\xa4\x31\x49\x9c\x7b\xb9\x88\x03\xc6\x2e\xab\xa6\x55\x4b\x6a\x90\xc1\xba\xca\x4a\x78\x02\xc1\xef\x6f\x6c\xa3\x48\xe5\xb4\x2d\x4a\x75\x59\x2d\x21\xe7\xa5\xc4\x38\x60\x5d\xdc\x87\x6d\xb8\x90\x98\xd9\x54\xe0\x04\x36\x77\xa5\x91\x88\xe4\xaa\x95\xea\x43\xcd\xdd\x51\xe8\xd2\x4b\x92\x24\x9a\xe0\x1f\x81\x78\xf8\x0d\x19\x3c\x36\x9b\xea\x32\xcb\xe4\x63\xad\xc7\x93\x29\x3f\x93\xc9\x91\xe3\xec\xd0\x32\xfb\x4c\x8e\x27\x33\x60\x7d\x0f\xfc\x27\xf7\xfe\xf9\x7e\x84\xc9\xe9\x81\x20\x5d\x10\xe4\x6d\x95\xc2\x47\xbc\x7f\x37\x83\x68\xe7\x66\x0f\xdb\xdd\xff\x01\xe6\x31\x31\x1e\xdc\xce\x91\xed\x7e\x0a\xd6\x64\x44\xa1\xe7\xe4\x1c\x14\x35\x4c\xa0\x6a\x45\x05\xaf\xe6\x3d\xb5\x93\x79\xa8\x99\xb6\x9b\x4b\x30\xf2\x78\x9c\x2c\x37\x65\xcf\xb4\x69\xe8\xd3\x12\xfa\xd3\x99\xed\x58\xff\x10\x61\x6f\x58\x22\x70\x8d\x88\xc0\xce\xc8\x1c\x81\x4f\xe7\xef\x78\x3a\xab\x77\x4d\x89\x0f\x85\x7a\x0c\x89\xcf\x54\xb2\x18\xf2\x02\xcb\x8c\x98\x5c\x54\x9b\x18\xd2\x6d\x51\x66\xa3\x1e\xad\x83\x98\x46\xeb\x17\xb1\x91\xb0\xe3\xcd\x17\xab\xf8\xd5\x5b\x13\x11\x84\x46\x6b\x5d\xd7\x65\xe4\x25\xf6\x36\xb6\xc3\xf7\x9d\xa4\xa8\x39\x61\xaa\x1e\x20\xb5\x0b\x23\x71\x8b\x63\x6c\xdf\x1f\x28\x9b\xba\x92\xf8\x2b\xaf\xb2\x12\x85\x09\x91\xd2\xbe\xec\x15\x2e\x50\xcd\xd7\x0e\x79\x8c\x02\x86\x46\x6f\xbe\xb7\xb4\x48\x63\xc0\x2e\x08\x98\xbc\x2f\x54\xba\x05\x91\x8e\x7b\x6b\x7c\xa2\x40\x29\x97\x08\x54\x77\xdb\xfc\x80\xf5\xe8\x08\xd1\xe1\xb4\x8f\xe7\x79\x9b\x6d\xcf\x32\xae\xb8\x49\x26\x4d\x6e\x8d\x33\xb2\x8e\xa7\xa1\x57\x58\x62\x4a\x4f\x2b\x54\x31\xa0\x0d\x1a\x91\x35\x2d\xae\x75\x9b\xc3\xfa\x51\xa1\x4c\x4e\xdb\x3c\x47\xd1\x7b\x4d\xae\xb8\x90\x5b\x5e\x5e\xdc\x7c\x08\x5f\xad\xdb\x3c\x0a\xe8\xa4\x27\xf8\x3c\x1b\x93\x0c\x3b\xe7\x8a\x2f\xc9\x63\x72\x4a\x1e\xc3\x88\x48\xc9\x88\xb0\x54\x96\x0c\x73\xde\x96\xca\x83\x3b\xac\xf7\x0a\x57\xdb\x5a\x85\xc3\x68\x09\x51\x8b\xde\xb5\x45\xb4\x68\x2b\xd9\x36\x74\xa3\x62\x06\x17\xa4\x77\xf3\x01\xea\x1e\xe3\x22\x8a\x1c\xe5\xb5\x76\xb7\x9f\x9a\x5c\xec\xfd\x6e\x2a\x72\xc0\x3b\x7b\x98\xfc\x5e\x54\x19\x2c\xae\x4f\x7f\x7b\x77\xf6\x79\xe1\x06\x8b\x2a\xa2\xb5\x3d\x77\xd7\x63\x59\xdf\x4f\xae\xc7\x4b\xa2\xf1\x0e\x2b\x55\x0b\x7b\xcb\x58\xf2\xea\xb9\x9d\xbb\xe0\x81\xdc\x3a\xa6\xa6\x3d\x55\x47\xd6\x44\x70\xeb\xdb\x75\xdd\xa1\xf6\xc7\x20\xb1\x34\x84\x99\xf6\xb2\x5e\x7f\x33\x1b\x4d\x1d\xdc\x64\x9e\xd3\x91\xf6\xae\xab\x96\xf0\x8c\x99\x39\x95\x3e\xed\xcf\xea\x92\x42\xbc\x37\x07\x21\xa6\x7b\x77\xaf\x49\x26\xfe\x91\x2a\x59\xea\x10\xae\x31\xcc\x5f\x85\xda\x9a\x18\xde\x68\xc5\x23\xaf\xfc\x23\xcb\xad\xeb\xf5\x37\x4c\xed\xfd\x7c\xa0\xca\x96\x68\x36\x50\xdd\x2a\x1f\xd0\x47\xbc\x37\xde\x56\xa8\x42\x0b\xd7\x70\x3f\xaf\x05\x14\xfd\xa2\x5a\x9e\xb8\x97\x26\x57\x0f\x1b\xd2\xcd\xb1\x91\xd9\x78\x56\xee\xbd\x63\x0d\xe6\x36\x29\x5b\x35\xbb\xa2\xed\x94\x6b\x7d\xe4\xd9\xcf\xeb\x34\x02\x58\x1a\x93\x9e\xa3\xce\xe6\x52\x5e\xa1\xda\xd6\x99\x73\xe8\xda\x45\xe1\xcc\x83\x13\xd6\xad\x21\x4a\xda\x0a\x81\x95\x2a\x1f\x43\x82\x45\x8b\xe4\xd9\xae\xb3\x71\x92\x69\x71\x4c\xb9\x72\x3b\x49\xd9\x12\xd2\xd5\xc9\x30\x2e\x72\x1e\x5c\xb5\x29\x67\x7a\xf5\x1b\x72\xa4\x74\xfe\xe4\x65\x8b\xf2\x4b\xf1\x15\x4e\xc6\x0a\x98\xfb\xeb\x09\x28\xd4\x90\x8f\xc5\xe7\x02\xd5\xeb\x6f\xc9\x2c\x78\x34\x96\x65\x78\xdd\x3c\xf0\xbf\xeb\xf7\x8c\x89\x7e\x5e\xc8\x86\xab\x74\x1b\x46\xde\xca\xaa\x5b\x15\x58\x9d\x61\x45\xbc\xd0\xbc\x1f\x18\xd8\x43\xf5\xda\x1f\x60\x1b\x6b\x36\x64\x98\xbd\x1f\xca\xfa\x93\x83\xcc\x72\x73\x29\xbd\x30\x40\xc3\x04\xc1\x4b\x33\xc4\x98\xb1\x24\x2d\xd7\x73\x2b\xa5\xab\xda\x08\xa1\x2a\x4a\x27\xeb\xe9\xb9\x04\x25\x5a\x8c\xc7\x4e\xb0\xdb\xff\x32\xec\x79\x6a\xbb\xfb\xe6\x0d\x7c\xbe\x3e\xbf\x06\x2e\x36\x32\xb0\xd4\x34\x1b\xe9\x00\x1d\xc2\x91\x0e\xae\x87\x0d\x17\x7c\x67\x7a\x68\xf5\x3e\xd1\x7f\x39\x90\xd1\xbc\x41\xd1\xc6\x37\x7a\x16\xf0\x82\x02\x2d\x06\xee\x30\xc6\x48\x10\x0f\x16\xfe\xa7\xcc\x0b\x5e\x52\xf5\x30\x71\x62\x40\xc7\xa3\xc9\xbe\x1b\x86\x69\x92\x15\x89\xd6\x45\x95\xe1\x83\xfb\xa6\xf2\xbf\x93\xc8\xf1\x15\x6f\x26\x71\xf6\xbf\xcf\xa6\x31\xbc\x29\x38\x20\xf1\xdf\x26\x19\x8b\x02\x6f\xf2\x67\x44\x5a\x99\x5b\x2c\x14\x68\xd7\xe3\xde\x47\x9e\xd6\xd6\x4f\xff\xfb\x6f\x00\x00\x00\xff\xff\x3d\x75\x64\x0f\x7c\x0f\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 3964, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
