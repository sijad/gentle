// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x6f\xa3\xc8\x12\x7e\x86\x5f\x51\xc7\x1a\x45\x10\xb1\x64\x9f\x2d\xe5\x61\x92\xec\x64\x73\x4e\x2e\x3b\xeb\x39\x67\x1f\x46\xa3\xa8\x03\x65\x9b\x19\x0c\xa4\xbb\x89\x13\x11\xfe\xfb\x51\x55\x37\xd0\x60\xe7\xb2\xb3\x4f\xc1\xdd\x75\xaf\xaf\x2e\x9d\xa6\xf9\x05\x3e\xc8\xb2\xd4\x30\x3f\x86\x18\x7e\x69\x5b\x9f\x8f\xee\x6b\x94\x4f\x5f\x9e\x2a\xe4\x73\xfa\x50\xf1\x67\x3a\x1b\x48\x36\xb5\x16\x3a\x2b\x8b\x09\xd5\x95\x3d\x66\xc2\x4a\x24\x3f\xc4\x0a\xa1\x69\xe2\x3f\xcc\xe7\xb5\xd8\x60\xdb\xfa\x7e\xb6\xa9\x4a\xa9\x21\x60\x59\x52\x14\x2b\x84\x0f\xd9\xa6\x8a\xe0\x83\xc8\x33\xa1\x58\xe0\x05\xd3\xa8\xb6\xf5\xbd\xa6\x31\xe7\x6d\x0b\x4d\x43\x84\xf0\x0c\xf7\x75\xa9\xd1\x5a\x83\x45\xca\x0a\x43\xdf\x6f\x9a\x6c\x09\x2b\x0d\x41\x8e\x05\xc4\x67\x58\x61\x91\x62\x91\x64\xa8\x42\xf8\x95\x89\x3c\x4d\x26\xbb\x37\xa0\xb4\xac\x13\x0d\x8d\xef\x79\x8e\x41\x29\x56\x6c\x88\x4b\x4a\xfc\x44\x44\x97\x31\x79\x03\xcf\x50\x57\x15\xca\x53\xa1\xf0\x53\x26\x95\x66\x1b\x49\xc5\x79\xc9\x22\x38\x30\x26\xca\x26\x46\x2c\xc2\xb5\xda\xb3\x4e\xe4\x0a\x5f\x32\x30\x2b\x34\xca\xa5\x48\xb0\xe9\x1d\xa6\x30\x32\x21\x3e\x62\x52\x53\xcc\x4f\xcb\x42\xe3\xa3\x76\xbc\x39\x5c\x49\x51\xad\xef\xf3\xf8\xa6\x42\x29\x1c\x1a\xdf\x3b\x34\x6c\xe2\x2e\xc7\x45\xb2\xc6\x8d\xf0\x5b\xdf\x7f\x10\x12\x54\x59\xcb\x04\x15\x1c\xc3\xd7\x6f\x87\x42\xe9\x78\xc1\x07\x8d\xef\x51\x78\xc8\xe5\x39\xcc\x14\xb3\xc4\x56\xbc\x9a\x45\xbe\xe7\x5d\x14\x55\xad\xe7\x94\x20\xf6\x75\x91\xe6\xf0\x0c\x52\x6c\x3f\x9b\x44\x11\xc9\x49\x9d\xe5\xfa\xa2\x98\xc3\x52\xe4\x0a\x23\xdf\x6b\xa3\x4e\x6d\x25\xa4\xc2\xd4\x98\x02\xc7\xb0\xba\xcf\xf9\x44\xc6\x57\xb5\xd2\x97\xa5\xb0\x57\x81\x35\x2f\x8e\xe3\x70\xe4\xff\xe0\x88\xe3\x3f\x83\xc1\x41\x33\x47\xd7\x33\x48\x3e\x6c\x9a\xe1\x66\x8c\xcf\x78\x74\x65\x31\xdb\xa7\xcc\x7c\x93\xe0\x51\x0d\x18\xd9\x3d\xfe\x49\xbc\x7b\xbf\xab\x61\x74\xbb\x47\x49\xeb\xfb\xcb\xba\x48\xe0\x1a\xb7\xbf\x4d\x5c\x34\x75\xb3\xe3\xdb\xfd\xcf\x38\xe6\x20\x31\xea\xc5\x4e\x3d\xdb\xfc\x23\xb7\x46\x25\x0a\x1d\x26\xa7\x4e\x51\xc2\x24\xea\x5a\x16\x70\x30\xcd\xa9\xa9\xcc\x7d\xc9\x34\xd9\x9c\x03\x9f\x47\x43\x65\xd9\x2a\x7b\x21\x4d\x7d\x9e\xe6\xd0\xdd\x4e\x78\x87\xf8\x07\x08\x3b\xc5\x12\x82\x4d\x44\x08\xa6\x46\xa6\x1e\xb8\x70\x7e\x43\xd2\x69\xb9\xa9\x72\x7c\xcc\xf4\x53\x40\x78\xa6\x90\x45\xb0\xcc\x30\x4f\x09\xc9\x59\xb1\x8a\x20\x59\x67\x79\x3a\xd0\x51\x3b\x88\xa8\xb4\x3e\xca\x95\x82\x8d\xa8\xbe\x1a\xc2\x6f\x4e\x9b\x08\x21\x60\xaa\xbb\xb2\xcc\x43\xc7\xb0\x5f\x23\x53\x7c\x6f\x18\x45\xc9\x09\x12\xfd\x08\x89\x69\x18\xb1\x6d\x1c\x43\xfa\xfe\x44\x55\x95\x85\xc2\xdf\x45\x91\xe6\x28\x59\x45\x42\xfd\xb2\x23\x38\x47\x3d\x6d\x3b\x24\x31\xf4\x3d\x64\xba\x69\xdf\x6a\x64\x12\x01\xb6\xbe\xef\xa9\x6d\xa6\x93\x35\xc8\x64\xe8\x5b\xc3\x17\x29\x4a\x84\x42\xa0\xb8\x9b\xe4\xfb\x5e\xe7\x1d\x79\xb4\xdf\xec\xc3\xa9\xdd\xdc\xed\xbd\x54\x68\xc1\xc6\x24\xf1\x2d\x0b\x23\xee\x68\xac\x7a\x81\x39\x26\xf4\xb5\x40\x1d\x01\x1a\xa5\x21\x71\x53\xe3\xba\xab\x97\x70\xf7\xa4\x51\xc5\x27\xf5\x72\x89\xb2\x93\x1a\x5f\x09\xa9\xd6\x22\x3f\xff\x7c\x19\x1c\xdc\xd5\xcb\xd0\xa7\x9b\x0e\xe0\x53\x6b\xd8\x18\xef\x4c\x68\x31\x27\x89\xf1\x09\x49\x0c\x42\x02\xa5\x47\x80\xa5\xb0\xa4\xb8\x14\x75\xae\x1d\x77\xfb\xf6\x5e\xe0\x62\x5d\xea\xa0\x2f\x2d\x29\x4b\xd9\x89\x36\x1e\xcd\xea\x42\xd5\x15\x4d\x54\x4c\xe1\x9c\xe8\x3e\x5f\x42\xd9\xf9\x38\x0b\x43\x0b\xf9\xa6\xb1\xd3\x4f\x8f\x06\x7b\xd7\x9b\xb2\x25\xe0\xbd\xb9\x8c\xff\x93\x15\x29\xcc\x6e\x4e\xfe\xfd\xdb\xe9\x97\x99\x2d\x2c\x8a\x48\xd3\x98\x7b\x3b\x1e\xf3\x72\x3b\x1a\x8f\x17\x04\xe3\x0d\x16\xba\x94\x66\xca\x18\xf0\x36\x53\x3e\x3b\xe0\x81\xc4\x5a\xa4\x26\x1d\x54\x07\xd4\x84\x70\xeb\xf2\xb5\xed\xbe\xf4\x47\xa0\x30\x67\xc0\x8c\x73\x59\xde\x7d\xe7\x8e\xa6\xf7\x76\x32\x47\xe8\x00\x7b\x9b\x55\x03\x78\xcf\xe3\x3a\x55\x2e\xec\x4f\xcb\x9c\x54\x7c\xe2\x8b\x00\x93\x9d\xd9\xcb\xc6\x44\x7f\x27\x4a\x06\x3a\xe4\xd7\xa0\xe6\xaf\x4c\xaf\x59\x87\x53\x5a\xd1\x80\x2b\xf7\xca\x60\xeb\xe6\xee\x3b\x26\x66\x3e\xef\x89\xb2\x01\x9a\x51\x54\xd6\xda\x75\xe8\x1a\xb7\x2c\x6d\x81\x3a\x30\xee\x32\xf6\x97\xa5\x84\xac\x6b\x54\xf3\x63\xbb\x34\xd9\x78\x18\x95\xb6\x8e\xf9\xcc\xe8\x33\xe7\x5c\xbe\xb3\xdb\x5b\xb2\xa3\x10\x1b\x9c\xcd\xf9\x98\x35\xc7\xff\x13\x79\x8d\xea\x6b\xf6\x0d\x8e\x01\x8b\xa4\x4c\xb3\x62\x75\x22\x54\x96\x74\xa1\x5f\x30\x5c\x82\xfd\x7e\xb0\x69\xee\x12\xd7\xdb\x67\xa8\x4d\x5a\xcc\x0c\x30\x76\x34\xcd\x07\xc7\xc0\x69\x22\x06\xc9\xd6\xc6\x6e\x42\x1a\x9e\x0b\x75\x85\x7a\x5d\xa6\x56\xa0\xc5\x03\xa9\xe3\x0f\xc7\xad\xd3\xb2\x48\x6a\x29\xb1\xd0\xf9\x53\x40\x71\xa3\x4e\xf5\x22\xac\xbc\xa1\x55\x50\x67\x1a\x83\xf1\x76\x64\xb2\x41\xbc\x4d\x04\x43\x3a\xb4\x12\x6c\x30\xbc\xf1\x72\xb9\x3f\xd0\x3f\xab\x64\xb4\xc7\xee\xf9\xdd\x76\x0d\x8c\x55\x9e\x65\xaa\x12\x3a\x59\x07\xa1\xd3\x0b\xcb\x5a\xdb\x06\xe7\xf5\xcd\xe7\x95\xac\xfd\x8d\x56\xb0\xcf\x87\xdd\xd6\x60\x74\x4d\xca\x17\xd3\x4f\xbd\xab\xff\xb0\x45\x78\x4b\x1e\x77\xaf\x94\x66\x5f\x9b\xf0\x5a\x75\x7a\x1e\x73\x12\x95\xcd\x83\x39\xa5\x25\x80\x0f\xa1\xc8\x72\x7b\xd6\xe1\x72\x0e\x5a\xd6\x18\x0d\xa9\x78\x57\x17\x59\x26\xa6\x11\x78\x47\x47\xf0\xe5\xe6\xec\x06\x84\x5c\x29\x73\x22\x51\x7d\xa1\x77\x1a\x4a\x69\xc7\xe6\x9f\xa8\xca\xfc\x01\xe5\x55\x96\xa6\x39\x6e\x85\xb4\x03\x87\x01\x2e\xf7\xce\xe2\xc0\xd9\x53\x58\x54\x29\xc3\x0e\xf7\xc6\x3e\xe6\x3b\x3a\x82\x5a\x61\xc7\x0e\x4b\x59\x6e\x60\xd3\x6b\x01\xa5\x45\xf2\x03\xb2\xc2\x6c\x47\x12\x0b\xdf\x2d\x9b\xf2\xee\x7b\x3c\x49\xbf\xd9\x06\xa7\x85\x0b\x81\xad\x09\xa7\x69\x54\x42\x8a\x0d\xc3\xcf\x50\xff\x41\xbf\x55\x5f\x3d\x66\xaf\xa4\x39\xc8\x84\x26\x59\x33\x0a\xd2\xcc\xa9\x31\xcf\xa3\x93\x68\xe0\xb1\x55\xb8\x87\x35\xd1\x8f\x63\x4e\x8a\xe0\x0e\xa3\x4b\x80\x49\x9c\x66\x71\xd3\x64\x45\x8a\x8f\xf6\x75\xe9\xbe\x18\x49\xee\x95\xa8\x46\x6a\x76\x5f\xaa\x63\x1d\x4e\xd9\x8e\xd7\x68\xcf\xf3\xc2\xa6\xe1\x5f\xb6\xfd\x15\xa5\xee\x62\xf3\xbb\x50\xbc\x6e\xf0\x03\x82\x20\x38\xe6\xb4\x33\xc5\x23\xaf\xa5\x84\x7f\x1d\x13\x49\x97\x6c\x4c\xcc\xaa\x62\x10\x83\x52\x86\xa3\x1c\xf6\x13\xa8\xce\x73\x0b\xe1\x4e\x96\xc1\x21\x1c\x8f\xc4\xbd\xc1\x26\x91\x07\xb5\x61\x8d\x83\xe1\x95\x6e\x1c\xd9\x7d\xa7\x87\xb6\x7c\x09\xe3\x75\xae\x81\x79\x3b\x59\x5d\x73\xee\x41\xc6\xfc\xcf\x40\x42\xfb\x0e\x60\x40\xb6\xd3\x41\x87\x35\x44\x45\x24\x33\xec\xba\x24\x47\xd9\x64\xc1\x06\xdc\xef\xfe\xfa\x47\x47\x60\xe5\xe6\x28\xd5\xbe\x4d\xcd\xb9\x26\x09\xaf\x75\x4a\xdb\x67\xde\xb2\xf7\xbd\x8b\xd4\x83\xf3\x3f\x0f\xbd\x1b\xc7\x17\x5a\x63\xd3\xec\xd9\x27\xaf\x6f\xae\xaf\xff\x7b\x79\xd9\xd7\xc3\x28\xd2\x4c\x77\xb3\x7c\x5f\xa8\x79\xcd\x3a\x78\x08\xfd\xdd\x1a\xca\x96\xf0\x30\x06\xcf\x0b\xd8\xb1\xff\xee\x79\x73\xef\x7d\x65\x5c\x3b\xc6\xb0\x2d\x3b\x9d\xc0\x11\x7a\x79\xb1\x70\x44\x0a\xd3\x64\x0f\x1f\x3a\x05\xf4\x6b\x23\x7e\x60\xbf\xe8\x7f\x94\x52\x3c\x45\x90\x63\x11\x08\x29\x43\x03\x58\xda\xc1\xb7\x2b\x50\x4f\x45\x12\xff\x25\x32\x7d\x2e\xcb\xba\xe2\x9b\xed\x2a\xfe\x98\xa6\xc1\x98\x9c\x17\xb9\x61\x83\x23\xa5\xb6\x9e\xde\x1e\x5c\xde\x05\xf5\x9f\x39\xc0\x41\xd6\xf5\x12\x53\x2b\x73\x38\x10\x52\x7e\xcd\xbe\xd9\xe3\x76\xe8\xee\xf3\xf7\x8c\x1f\xa6\x5e\x95\x66\x8a\x64\xf4\xe0\xed\x27\x04\xbd\x83\x90\x3c\x8c\xcf\xca\x02\x83\x6e\xdb\x91\xa8\xfb\x5d\xe6\xa7\x90\x62\xec\xb5\xe2\xda\x20\x0b\x9d\xa9\xb9\x5d\x71\x24\xad\x32\x9b\x6a\x89\x7a\x9a\xce\x4c\xf1\xaa\xba\x48\x44\x2e\xa4\x2d\x85\x29\x40\xf6\xed\xb4\x93\xb1\x3f\xed\xd3\xc1\xe1\x04\x39\xef\x91\x69\x8c\x08\x1c\x4e\xfb\xcf\xab\xd1\x8f\xa1\xc1\xfc\x3f\x00\x00\xff\xff\xdc\x40\x96\xa2\x0d\x16\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 5645, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
