// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x53\xe3\xb8\x12\x7e\xb6\x7f\x45\x9f\xd4\x14\x65\x53\x5e\xb3\xcf\xa9\xe2\x61\x06\x76\x59\xce\xe1\x32\x6c\x98\xd9\x87\xa9\x29\x4a\xd8\x9d\xe0\xc1\xb1\x8d\x24\x07\x28\x8f\xff\xfb\xa9\x96\x64\x5b\x72\x2e\x84\x59\x5e\x48\x24\xf5\x4d\xfd\xf5\xd7\xad\x34\xcd\x6f\xf0\x81\x97\xa5\x84\xe9\x31\xc4\xf0\x5b\xdb\xfa\x6a\xe9\xa9\x46\xfe\x7a\xfb\x5a\xa1\x5a\xa7\x0f\x22\xbe\xa1\xb5\xe1\xc8\xb2\x96\x4c\x66\x65\x31\x3a\x75\x69\x96\xd5\xc1\x8a\x25\x8f\x6c\x81\xd0\x34\xf1\x67\xfd\xf1\x8a\x2d\xb1\x6d\x7d\x3f\x5b\x56\x25\x97\x10\x28\x5d\x9c\x15\x0b\x84\x0f\xd9\xb2\x8a\xe0\x03\xcb\x33\x26\x94\xc2\x73\x75\x46\xb4\xad\xef\x35\x8d\x5e\x6f\x5b\x68\x1a\x3a\x08\x3f\xe1\xa9\x2e\x25\x1a\x6f\xb0\x48\x95\xc1\xd0\xf7\x9b\x26\x9b\xc3\x42\x42\x90\x63\x01\xf1\x29\x56\x58\xa4\x58\x24\x19\x8a\x10\x7e\x57\x87\x3c\x49\x2e\xdb\x3b\x20\x24\xaf\x13\x09\x8d\xef\x79\x96\x43\x29\x56\xca\x11\xfb\x28\xc9\xd3\x21\xda\x8c\x29\x1a\xf8\x09\x75\x55\x21\x3f\x61\x02\xff\xcc\xb8\x90\xca\x47\x32\x71\x56\x2a\x15\xea\x62\xf4\x2d\xeb\x3b\x52\x2a\x6c\xaf\x3d\x13\x44\x2e\x70\x9b\x83\x59\x21\x91\xcf\x59\x82\x4d\x1f\x30\x5d\xa3\x3a\x88\x2f\x98\xd4\x74\xe7\x27\x65\x21\xf1\x45\x5a\xd1\x1c\x2e\x38\xab\x1e\x9e\xf2\xf8\xba\x42\xce\xac\x33\xbe\x77\xa8\xc5\xd8\x7d\x8e\xb3\xe4\x01\x97\xcc\x6f\x7d\x7f\xc5\x38\x88\xb2\xe6\x09\x0a\x38\x86\x6f\xdf\x0f\x99\x90\xf1\x4c\x2d\x34\xbe\x47\xd7\x43\x21\x4f\x61\x22\x94\x48\x6c\xd4\x8b\x49\xe4\x7b\xde\x79\x51\xd5\x72\x4a\x09\x52\xb1\xce\xd2\x1c\x7e\x02\x67\xcf\x37\x3a\x51\x74\xe4\x53\x9d\xe5\xf2\xbc\x98\xc2\x9c\xe5\x02\x23\xdf\x6b\xa3\xce\x6c\xc5\xb8\xc0\x54\xbb\x02\xc7\xb0\x78\xca\xd5\x0a\x8f\x2f\x6b\x21\x2f\x4a\x66\xb6\x02\xe3\x5e\x1c\xc7\xa1\x13\xff\x10\x88\x15\xbf\x02\x83\x85\x66\x75\xbb\x9e\x46\xf2\x61\xd3\x0c\x3b\x2e\x3e\x63\x67\xcb\x60\xb6\x4f\x99\xfe\x4c\x8a\x9d\x1a\xd0\xba\x7b\xfc\x93\x7a\x7b\x7f\xdd\x82\xb3\xbb\xc1\x48\xeb\xfb\xf3\xba\x48\xe0\x0a\x9f\xff\x18\x85\xa8\xeb\x66\x2d\xb6\xa7\x5f\x09\xcc\x42\x62\xd4\xab\x1d\x47\xb6\xfc\x57\x61\x39\x25\x0a\x1d\x26\xc7\x41\x51\xc2\x38\xca\x9a\x17\x70\x30\xce\xa9\xae\xcc\x4d\xc9\xd4\xd9\x9c\x82\x5a\x8f\x86\xca\x32\x55\xb6\x25\x4d\x7d\x9e\xa6\xd0\xed\x8e\x64\x87\xfb\x0f\x10\xd6\x8a\x25\x04\x93\x88\x10\x74\x8d\x8c\x23\xb0\xe1\xfc\x86\xa6\x93\x72\x59\xe5\xf8\x92\xc9\xd7\x80\xf0\x4c\x57\x16\xc1\x3c\xc3\x3c\x25\x24\x67\xc5\x22\x82\xe4\x21\xcb\xd3\xe1\x1c\xd1\x41\x44\xa5\xf5\x91\x2f\x04\x2c\x59\xf5\x4d\x1f\xfc\x6e\xd1\x44\x08\x81\x3a\x75\x5f\x96\x79\x68\x39\xf6\x7b\xa4\x8b\xef\x0d\xa7\x28\x39\x41\x22\x5f\x20\xd1\x84\x11\x1b\xe2\x18\xd2\xf7\x37\x8a\xaa\x2c\x04\xfe\xc5\x8a\x34\x47\xae\x4c\x24\xc4\x97\xdd\x81\x33\x94\x63\xda\x21\x8d\xa1\xef\xa1\x3a\x37\xe6\xad\x86\x27\x11\x60\xeb\xfb\x9e\x78\xce\x64\xf2\x00\x3c\x19\x78\x6b\xf8\x44\x86\x12\x26\x10\xe8\xde\x75\xf2\x7d\xaf\x8b\x8e\x22\xda\xec\xf6\xe1\xd8\x6f\xc5\xf6\x5e\xca\x24\x53\xce\x24\xf1\x9d\x52\x46\xd2\x91\x6b\x7a\x86\x39\x26\xf4\x69\x86\x32\x02\xd4\x46\x43\x92\x26\xe2\xba\xaf\xe7\x70\xff\x2a\x51\xc4\x9f\xea\xf9\x1c\x79\xa7\x35\xbe\x64\x5c\x3c\xb0\xfc\xec\xe6\x22\x38\xb8\xaf\xe7\xa1\x4f\x3b\x1d\xc0\xc7\xde\x28\x67\xbc\x53\x26\xd9\x94\x34\xc6\x9f\x48\x63\x10\x12\x28\x3d\x02\x2c\x5d\x4b\x8a\x73\x56\xe7\xd2\x0a\xb7\xa7\xf7\x02\x67\x0f\xa5\x0c\xfa\xd2\xe2\xbc\xe4\x9d\x6a\x1d\xd1\xa4\x2e\x44\x5d\x51\x47\xc5\x14\xce\xe8\xdc\xcd\x05\x94\x5d\x8c\x93\x30\x34\x90\x6f\x1a\xd3\xfd\xa4\xd3\xd8\x3b\x6e\xca\xe6\x80\x4f\x7a\x33\xfe\x5f\x56\xa4\x30\xb9\xfe\xf4\xdf\x3f\x4e\x6e\x27\xa6\xb0\xe8\x46\x9a\x46\xef\x9b\xf6\x98\x97\xcf\x4e\x7b\x3c\x27\x18\x2f\xb1\x90\x25\xd7\x5d\x46\x83\xb7\x19\xcb\x99\x06\x0f\xa4\xd6\x20\x35\xe9\xa0\x3a\xa0\x26\x84\x3b\x5b\xae\x6d\x37\xa5\x3f\x02\x81\xb9\x02\x8c\x9b\xcb\xf2\xfe\x87\x62\x34\xb9\x91\xc9\x2c\xa5\x03\xec\x4d\x56\x35\xe0\x3d\x4f\xd5\xa9\xb0\x61\x7f\x52\xe6\x64\xe2\x4f\xb5\x11\x60\xb2\xd6\x7b\x95\x33\xd1\x7b\x6e\x49\x43\x87\xe2\x1a\xcc\xfc\x93\xc9\x07\x65\xc3\x2a\xad\x68\xc0\x95\xbd\xa5\xb1\x75\x7d\xff\x03\x13\xdd\x9f\x37\xdc\xb2\x06\x9a\x36\x54\xd6\xd2\x0e\xe8\x0a\x9f\x95\xb6\x19\xca\x40\x87\xab\xb0\x3f\x2f\x39\x64\x1d\x51\x4d\x8f\xcd\xd0\x64\xee\x43\x9b\x34\x75\xac\xd6\xb4\x3d\xbd\xae\xca\x77\x72\x77\x47\x7e\x14\x6c\x89\x93\xa9\x5a\x56\x96\xe3\xaf\x2c\xaf\x51\x7c\xcb\xbe\xc3\x31\x60\x91\x94\x69\x56\x2c\x3e\x31\x91\x25\xdd\xd5\xcf\x14\x5c\x82\xcd\x71\x28\xd7\xec\x21\xae\xf7\x4f\x9f\xd6\x69\xd1\x3d\x40\xfb\xd1\x34\x1f\x2c\x07\xc7\x89\x18\x34\x1b\x1f\xbb\x0e\xa9\x65\xce\xc5\x25\xca\x87\x32\x35\x0a\x0d\x1e\xc8\x9c\xfa\x60\x85\x75\x52\x16\x49\xcd\x39\x16\x32\x7f\x0d\xe8\xde\x88\xa9\xb6\xc2\xca\x1b\xa8\x82\x98\xc9\x05\xe3\x9d\xe3\xb2\x46\xbc\x49\x84\x82\x74\x68\x34\x98\xcb\xf0\xdc\xe1\x72\xf3\x45\xff\xaa\x11\x67\x8e\xdd\xf0\xbd\xed\x08\x4c\x99\x3c\xcd\x44\xc5\x64\xf2\x10\x84\x16\x17\x96\xb5\x34\x04\xe7\xf5\xe4\xb3\x23\x6b\xef\xa0\x82\x4d\x31\xac\x53\x83\xb6\x35\x2a\x5f\x4c\xff\xec\x43\xfd\x97\x14\xe1\xcd\x55\xbb\xdb\x51\x9a\x7d\x6d\xc2\xae\xea\xf4\x3c\x25\x49\xa7\x4c\x1e\xf4\x2a\x0d\x01\x6a\x11\x8a\x2c\x37\x6b\x1d\x2e\xa7\x20\x79\x8d\xd1\x90\x8a\xbd\x58\x64\x9e\x68\x22\xf0\x9a\xc6\xc2\xfa\x5f\x4c\xa8\x79\xa3\x03\x51\x37\x7f\x74\x60\x8f\x3f\xf2\x45\x4d\x8c\x75\xc9\x2a\xe2\xbd\xaf\x8c\x67\x34\x52\x08\x03\x15\xc6\x17\x22\x02\xe4\xbc\xeb\xb7\x4a\xea\x8d\x94\xdd\x91\x94\xe9\xc9\xda\x9e\xd1\x46\x8d\x88\x73\xf8\xcf\x31\x45\xdd\x17\x0d\x26\xba\xf7\x69\x09\xe4\xbc\xab\x85\x51\xc3\xbc\xaa\xf3\x5c\xef\x38\xb0\x6d\x5b\x1d\x37\x47\x71\x4b\xaf\xd1\xc1\xd9\xbf\x51\x94\xf9\x0a\xf9\x65\x96\xa6\x39\x3e\x33\x6e\xda\xaa\x2a\x63\xbe\x71\xe2\x08\xac\x69\x4c\xa9\x2a\x79\xd8\x39\xaa\xb3\xa0\xe4\x8e\x8e\xa0\x16\xd8\x89\xc3\x9c\x97\x4b\x58\xf6\x56\x40\x48\x96\x3c\x42\x56\xe8\x19\x90\x63\xe1\xdb\xf1\x94\xf7\x3f\xe2\xd1\x8d\xe9\x99\x77\x4c\x4f\x10\x98\x8b\xb0\xa8\xb1\x62\x9c\x2d\x55\x91\xe9\xd3\x9f\xe9\xbb\xe8\x39\x42\x4f\xcf\xd4\xed\xd5\x41\x0d\xc9\x09\xe5\x63\x62\x31\x89\xc9\xeb\x20\x63\xb8\x66\x83\x68\x22\x5f\x5c\x49\xba\xc1\x35\x41\xfb\x00\x26\x71\x9a\xc5\x4d\x93\x15\x29\xbe\x98\x37\xb4\xfd\x2e\x26\xbd\x97\xac\x72\xcc\xac\xbf\xc7\x5d\x1b\x16\x39\xb9\x8f\x05\xcf\xf3\xc2\xa6\x51\xdf\x0c\xc9\x17\xa5\xb4\xc0\xaf\x80\xa5\x9e\x49\x04\x39\x57\xd2\x74\xce\xcd\xa8\xdc\x06\xca\x6d\x98\x6c\x7b\x5d\x1a\x87\x70\xec\xa8\x7b\x43\x8c\xa3\x2a\x49\x2d\x1a\x07\xc3\x6f\x11\x3a\x90\xf5\x5f\x23\x42\x43\x52\x84\xf1\x3a\x97\xa0\x64\x3b\x5d\x5d\x0b\xea\x41\xa6\xe4\x7f\x02\x29\xed\x79\x4e\x83\x6c\xad\x4f\x0c\xc3\x96\x88\x48\x67\xd8\xf7\x82\x5d\xbc\xb2\x93\xdf\xdf\x45\x19\xeb\x54\xff\xe6\x93\xa9\x69\xf4\x8f\x07\xb7\xce\x9d\x29\x19\xe7\xce\xc6\xf5\xcc\x0c\x11\xee\x2b\xdf\x18\xc0\xd1\x10\xf5\x88\xaf\x11\xac\x58\x3e\x0c\x51\x9d\x9b\x1d\xab\x99\x39\xea\x11\x5f\x87\xe9\xc0\xaa\x63\xc6\x17\x56\x15\x93\xa4\x5d\x63\x66\xc6\x61\x7c\xb1\xe7\x84\x43\x7f\x2b\x9b\xfb\x8c\xb4\x95\xf9\x2f\xc5\x72\x7b\xee\x57\x2c\x0f\x07\x4d\x9b\x79\xda\x02\x57\xdf\x16\x86\xad\xc1\x7b\x75\xb1\xb1\xe5\x7e\xdb\xc2\x31\xac\x46\x05\xdd\x87\xdb\xda\x9c\xee\x1a\x28\xb2\x7c\xe8\x82\xee\x6f\x04\x3d\x25\x98\xea\xf7\xbb\xff\xfe\xd1\x11\x18\x90\xe7\xc8\xc5\x86\xb7\x91\xb5\x4b\x0a\x76\x61\xd7\x80\xf6\xad\xda\xd9\xf7\xe9\xb2\xb2\x7e\x65\x94\xeb\x35\xbd\x65\x18\xd1\x85\x37\x7a\xc1\x5d\x5d\x5f\x5d\x7d\xb9\xb8\xe8\xb9\xd9\xa9\x7a\x75\xee\x7a\xbe\x5f\xd9\xab\x87\xcd\xc1\x2a\xf4\xd7\xf9\x3c\x9b\xc3\xca\x25\xb2\x2d\x3c\x66\x11\xc4\xce\x97\xe6\x8e\x01\xd9\x72\x46\xf9\xb2\xd6\x95\x2c\xa5\x17\xe7\x33\x4b\x25\xd3\xa0\x3f\x5c\x75\x06\xe8\xdb\x92\x3d\x62\xff\xb4\xfe\xc8\x39\x7b\x8d\x20\xc7\x22\x60\x9c\x87\x1a\xe9\xf4\xea\x7d\x5e\x80\x78\x2d\x92\xf8\x1f\x96\xc9\x33\x5e\xd6\x95\xda\x79\x5e\xc4\x1f\xd3\x34\x70\x8f\xab\xa7\xd3\x50\xee\x64\xd4\x14\xc6\xdb\xa3\xa2\x77\x4e\xbd\x70\x0a\x70\x90\x75\x7d\x4d\xf3\xf6\x14\x0e\x18\xe7\xdf\xb2\xef\x91\x53\x04\x04\xa9\xe9\x3e\x03\x9f\x3a\xbd\x28\xf5\x44\x93\x41\x56\xc8\x9e\xdd\xbc\x14\xe7\x48\x11\xc6\xa7\x65\x81\x81\x35\x53\xf5\xaf\x87\x5f\x42\x8a\xf6\xd7\xa8\x6b\x83\x2c\xb4\xe6\xd4\xe7\x85\xba\x49\x63\xcc\xa4\x9a\xa3\x1c\xa7\x33\x13\xea\x71\x38\x4b\x58\xce\xb8\x29\x85\x31\x40\x36\xbd\x22\x47\x83\xf6\x78\x66\x08\x0e\x47\xc8\xd9\x47\xa7\x76\x22\xb0\x24\xcd\xcf\xc5\xce\x17\x97\x5f\x7a\x2a\xdd\xc2\x30\xce\xfe\xfb\x38\x66\x07\x4b\xaf\xb3\xcc\x0a\xc6\x9d\x70\x3b\xbb\x38\xdd\x8f\xb0\x9f\xe2\xfc\x2b\xcb\x77\x32\x92\xbf\x81\x02\xcc\x5d\x6a\xe9\x8e\xa2\xdb\x7d\x69\x6a\x45\x32\x4e\x97\x5a\x47\xe0\xee\x46\x15\xfa\x5b\x1a\xd4\xc8\x31\xd3\x9c\x7a\x1e\x63\xf9\x46\x26\x73\xe3\xf0\x6c\x2e\x3d\x5c\x0d\x1b\x63\x48\x6d\x0c\xf6\xfc\xea\xf3\x97\xdb\x31\xe1\x1d\x1d\xc1\xed\xf5\xe9\x35\x4d\xfd\x98\x48\xd5\xd8\x40\x1b\xb0\xdd\xa0\x57\x60\xe7\xc3\xde\xc4\xd7\xa9\xce\x33\xf1\x6e\xc5\xbb\x4a\xd0\x49\x92\x53\x33\x7d\x6a\xde\xaa\xc4\x95\x43\x01\x07\x2b\x2b\x23\x6b\xd5\x69\x2c\xe9\x4c\x0c\x26\xce\x6e\x2e\x46\x6a\x46\xa9\xdd\xa3\x58\xff\x1f\x00\x00\xff\xff\x45\x2d\x13\xee\x2c\x1d\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 7468, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
