// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x6f\xdb\xb8\x12\x7e\x96\x7e\xc5\x1c\xa3\x08\xa4\x40\xab\xec\xb3\x81\x3c\x34\xc9\x36\x9b\x73\x72\xd9\xae\x7b\xce\x3e\x14\x45\xc0\x48\x63\x9b\xad\x2c\x2a\x24\x15\x27\x50\xf4\xdf\x0f\x86\xa4\x24\x4a\x76\x2e\xbb\x7d\xaa\x43\x0e\xe7\xfa\xcd\x37\xa3\x36\xcd\x2f\xf0\x41\x0a\xa1\x61\x7e\x0c\x29\xfc\xd2\xb6\xa1\x39\xba\xaf\x51\x3e\x7d\x79\xaa\xd0\x9c\xd3\x0f\x95\x7e\xa6\xb3\x41\x64\x53\x6b\xa6\xb9\x28\x27\x52\x57\xee\xd8\x08\x56\x2c\xfb\xc1\x56\x08\x4d\x93\xfe\x61\x7f\x5e\xb3\x0d\xb6\x6d\x18\xf2\x4d\x25\xa4\x86\xc8\xe8\x92\xac\x5c\x21\x7c\xe0\x9b\x2a\x81\x0f\xac\xe0\x4c\x19\x85\x17\x46\x46\xb5\x6d\x18\x34\x8d\x3d\x6f\x5b\x68\x1a\x12\x84\x67\xb8\xaf\x85\x46\xe7\x0d\x96\xb9\x31\x18\x87\x61\xd3\xf0\x25\xac\x34\x44\x05\x96\x90\x9e\x61\x85\x65\x8e\x65\xc6\x51\xc5\xf0\xab\x11\x0a\x34\xb9\xec\xdf\x80\xd2\xb2\xce\x34\x34\x61\x10\x78\x0e\xe5\x58\x19\x47\x7c\x51\x7a\x4f\x42\x74\x99\x52\x34\xf0\x0c\x75\x55\xa1\x3c\x65\x0a\x3f\x71\xa9\xb4\xf1\x91\x4c\x9c\x0b\xa3\xc2\x24\xc6\x66\xd9\xe6\xc8\xa8\xf0\xbd\x0e\x5c\x10\x85\xc2\x97\x1c\xe4\xa5\x46\xb9\x64\x19\x36\x7d\xc0\x94\x46\x23\x88\x8f\x98\xd5\x94\xf3\x53\x51\x6a\x7c\xd4\x5e\x34\x87\x2b\xc9\xaa\xf5\x7d\x91\xde\x54\x28\x99\x27\x13\x06\x87\xf6\x19\xbb\x2b\x70\x91\xad\x71\xc3\xc2\x36\x0c\x1f\x98\x04\x25\x6a\x99\xa1\x82\x63\xf8\xfa\xed\x90\x29\x9d\x2e\xcc\x41\x13\x06\x94\x1e\x0a\x79\x0e\x33\x65\x9e\xa4\x4e\xbd\x9a\x25\x61\x10\x5c\x94\x55\xad\xe7\x54\x20\x13\xeb\x22\x2f\xe0\x19\x24\xdb\x7e\xb6\x85\x22\x91\x93\x9a\x17\xfa\xa2\x9c\xc3\x92\x15\x0a\x93\x30\x68\x93\xce\x6c\xc5\xa4\xc2\xdc\xba\x02\xc7\xb0\xba\x2f\xcc\x89\x4c\xaf\x6a\xa5\x2f\x05\x73\x57\x91\x73\x2f\x4d\xd3\x78\x14\xff\x10\x88\x17\xbf\x01\x83\x87\x66\x93\xdd\xc0\x22\xf9\xb0\x69\x86\x9b\x31\x3e\xd3\xd1\x95\xc3\x6c\x5f\x32\xfb\x9b\x14\x8f\x7a\xc0\xea\xee\xf1\x4f\xea\xfd\xfb\x5d\x0b\xa3\xdb\x3d\x46\xda\x30\x5c\xd6\x65\x06\xd7\xb8\xfd\x6d\x12\xa2\xed\x9b\x9d\xd8\xee\xff\x49\x60\x1e\x12\x93\x5e\xed\x34\xb2\xcd\x4f\x85\x35\x6a\x51\xe8\x30\x39\x0d\x8a\x0a\x26\x51\xd7\xb2\x84\x83\x69\x4d\x6d\x67\xee\x2b\xa6\xad\xe6\x1c\xcc\x79\x32\x74\x96\xeb\xb2\x17\xca\xd4\xd7\x69\x0e\xdd\xed\xe4\xed\x90\xff\x08\x61\xa7\x59\x62\x70\x85\x88\xc1\xf6\xc8\x34\x02\x1f\xce\x6f\x68\x3a\x15\x9b\xaa\xc0\x47\xae\x9f\x22\xc2\x33\xa5\x2c\x81\x25\xc7\x22\x27\x24\xf3\x72\x95\x40\xb6\xe6\x45\x3e\xc8\x11\x1d\x24\xd4\x5a\x1f\xe5\x4a\xc1\x86\x55\x5f\xad\xe0\x37\x8f\x26\x62\x88\x8c\xd4\x9d\x10\x45\xec\x39\xf6\x6b\x62\x9b\xef\x0d\xa7\xa8\x38\x51\xa6\x1f\x21\xb3\x84\x91\x3a\xe2\x18\xca\xf7\x27\xaa\x4a\x94\x0a\x7f\x67\x65\x5e\xa0\x34\x26\x32\xe2\xcb\x4e\xe0\x1c\xf5\x94\x76\x48\x63\x1c\x06\x68\xe4\xa6\xbc\xd5\xc8\x2c\x01\x6c\xc3\x30\x50\x5b\xae\xb3\x35\xc8\x6c\xe0\xad\xe1\x17\x19\xca\x98\x42\xa0\xbc\xdb\xe2\x87\x41\x17\x1d\x45\xb4\xdf\xed\xc3\xa9\xdf\x86\xed\x83\x9c\x69\x66\x9c\xc9\xd2\x5b\xa3\x8c\x5e\x27\x63\xd3\x0b\x2c\x30\xa3\x5f\x0b\xd4\x09\xa0\x35\x1a\xd3\x6b\x22\xae\xbb\x7a\x09\x77\x4f\x1a\x55\x7a\x52\x2f\x97\x28\x3b\xad\xe9\x15\x93\x6a\xcd\x8a\xf3\xcf\x97\xd1\xc1\x5d\xbd\x8c\x43\xba\xe9\x00\x3e\xf5\xc6\x38\x13\x9c\x31\xcd\xe6\xa4\x31\x3d\x21\x8d\x51\x4c\xa0\x0c\x08\xb0\x94\x96\x1c\x97\xac\x2e\xb4\x17\x6e\x4f\xef\x25\x2e\xd6\x42\x47\x7d\x6b\x49\x29\x64\xa7\xda\x46\x34\xab\x4b\x55\x57\x34\x51\x31\x87\x73\x92\xfb\x7c\x09\xa2\x8b\x71\x16\xc7\x0e\xf2\x4d\xe3\xa6\x9f\x1e\x0d\xf6\x8e\x9b\xf8\x12\xf0\xde\x5e\xa6\xff\xe1\x65\x0e\xb3\x9b\x93\x7f\xff\x76\xfa\x65\xe6\x1a\x8b\x32\xd2\x34\xf6\xde\x8d\xc7\x42\x6c\x47\xe3\xf1\x82\x60\xbc\xc1\x52\x0b\x69\xa7\x8c\x05\x6f\x33\x7d\xe7\x06\x3c\x90\x5a\x87\xd4\xac\x83\xea\x80\x9a\x18\x6e\xfd\x77\x6d\xbb\xaf\xfc\x09\x28\x2c\x0c\x60\xc6\xb5\x14\x77\xdf\x0d\xa3\xe9\xbd\x4c\xe6\x29\x1d\x60\xef\xaa\x6a\x01\x1f\x04\xa6\x4f\x95\x0f\xfb\x53\x51\x90\x89\x4f\xe6\x22\xc2\x6c\x67\xf6\x1a\x67\x92\xbf\x93\x25\x0b\x1d\x8a\x6b\x30\xf3\x17\xd7\x6b\x63\xc3\x6b\xad\x64\xc0\x95\x7f\x65\xb1\x75\x73\xf7\x1d\x33\x3b\x9f\xf7\x64\xd9\x02\xcd\x1a\x12\xb5\xf6\x03\xba\xc6\xad\xd1\xb6\x40\x1d\xd9\x70\x0d\xf6\x97\x42\x02\xef\x88\x6a\x7e\xec\x96\x26\x97\x0f\x6b\xd2\xf5\xb1\x39\xb3\xf6\xec\xb9\x69\xdf\xd9\xed\x2d\xf9\x51\xb2\x0d\xce\xe6\xe6\xd8\x58\x4e\xff\xc7\x8a\x1a\xd5\x57\xfe\x0d\x8e\x01\xcb\x4c\xe4\xbc\x5c\x9d\x30\xc5\xb3\x2e\xf5\x0b\x03\x97\x68\x7f\x1c\xc6\x35\x7f\x89\xeb\xfd\xb3\xd2\xb6\x2c\x76\x06\x58\x3f\x9a\xe6\x83\xe7\xe0\xb4\x10\x83\x66\xe7\x63\x37\x21\xed\x9b\x0b\x75\x85\x7a\x2d\x72\xa7\xd0\xe1\x81\xcc\x99\x1f\x5e\x58\xa7\xa2\xcc\x6a\x29\xb1\xd4\xc5\x53\x44\x79\x23\xa6\x7a\x11\x56\xc1\x40\x15\xc4\x4c\x63\x30\xde\x8e\x5c\xb6\x88\x77\x85\x30\x90\x8e\x9d\x06\x97\x8c\x60\xbc\x5c\xee\x4d\x74\xaf\xd1\xcc\xc8\x67\x20\x6b\xbd\x4b\x36\x44\x67\x4b\xdc\x7d\x4f\x27\xf6\x7d\x33\xdd\x4a\xbb\xe7\xef\xb6\xe3\x32\x63\xfd\x8c\xab\x8a\xe9\x6c\x1d\xc5\x1e\x2d\x8a\x5a\x87\x56\xa6\xa7\xa1\x57\xea\xf7\x37\x48\x61\x5f\xca\x76\x49\xc2\xda\x9a\x34\x32\xe6\x9f\xfa\xcc\xfe\x24\x59\x04\x4b\x33\xf8\x5e\x69\xd2\xbe\x4b\xe1\xb5\x3e\x0d\x02\xf3\x92\xa4\x5c\xd9\xed\x29\xad\x03\xe6\x10\x4a\x5e\xb8\xb3\x0e\xa1\x73\xd0\xb2\xc6\x64\xa8\xc4\xbb\xf8\x64\x99\x59\x4a\x08\x8e\x8e\xe0\xcb\xcd\xd9\x0d\x30\xb9\x52\xf6\x44\xa2\xfa\x42\x5f\x6c\x28\xa5\x1b\xa0\x7f\xa2\x12\xc5\x03\xca\x2b\x9e\xe7\x05\x6e\x99\x74\xa3\xc7\x40\x5d\xee\x9d\xca\x91\xb7\xb1\x18\x55\x42\xc6\x5d\x07\x58\xff\xcc\xbb\xa3\x23\xa8\x15\x76\xcf\x61\x29\xc5\x06\x36\xbd\x15\x50\x9a\x65\x3f\x80\x97\x76\x4f\x92\x58\x86\x7e\x03\xed\x41\x6c\xe4\xda\xc0\xe3\x89\x8a\x49\xb6\x31\x38\xb3\x82\x7f\xd0\xdf\xaa\x6f\x18\xbb\x4a\xd2\xe8\x33\x82\xb6\x2a\x33\xca\xc6\xcc\x6b\xab\x20\xa0\x93\x64\x78\xe3\x1a\x6f\xcf\xd3\x4c\x3f\x8e\x5f\x52\xaa\x76\x1e\xfa\x02\x98\xa5\x39\x4f\x9b\x86\x97\x39\x3e\xba\x0f\x4a\xff\x23\x91\xf4\x5e\xb1\x6a\x64\x66\xf7\xe3\x74\x6c\xc3\x6b\xcf\xf1\xe6\x1c\x04\x41\xec\xa8\xae\x14\xba\x4b\xca\xef\x4c\x99\xd5\xc2\x7c\x2c\x10\xc8\xc6\x4f\xdc\xfc\x08\x28\x5c\x29\xe1\x5f\xc7\x24\xd2\x95\x13\x33\xbb\x96\x58\x4c\xa0\x94\xf1\xa8\x4a\xfd\xb4\xa9\x8b\xc2\x81\xb4\xd3\x65\x91\x06\xc7\x23\x75\x6f\x3c\x93\x68\x86\xb2\x7d\x9a\x46\xc3\x17\xb9\x47\x73\xa3\x6f\xf2\xd8\x35\x28\xa1\xb8\x2e\x34\x98\xb7\x9d\xae\x8e\x88\xdf\x4f\x93\x03\x25\x0f\x2b\x87\x4a\x48\x67\xdc\xd1\xe0\xa8\x00\x4d\x63\xd3\xd8\xfd\x1b\x1e\x1d\x81\xd3\x5c\xa0\x54\xfb\xf6\x32\xef\x9a\x34\xbc\xc6\x86\x8e\x4b\xde\xf2\xf8\xbd\x6b\xd3\x83\xf7\x3f\x1c\x7a\x37\x93\x2f\xd0\x5f\xd3\xec\xd9\x1e\xaf\x6f\xae\xaf\xff\x7b\x79\xd9\xb7\xc2\x28\xd7\x46\xee\x66\xf9\xbe\x64\x9b\xa5\xea\xe0\x21\x0e\x77\xdb\x87\x2f\xe1\x61\x0c\x9f\x17\xd0\xe3\xfe\x73\xe7\xcd\x2d\xb7\xe7\xc3\xd7\x94\x4d\xbb\xdf\xd3\x76\x79\xb1\xf0\x74\x31\xcb\xa0\x87\x0f\x9d\x36\xfa\x6b\xc3\x7e\x60\xbf\xcf\x7f\x94\x92\x3d\x25\x50\x60\x19\x31\x29\x63\x8b\x55\x5a\xb5\xb7\x2b\x50\x4f\x65\x96\xfe\xc5\xb8\x3e\x97\xa2\xae\xcc\xcd\x76\x95\x7e\xcc\xf3\x68\x2c\x6e\xf6\xb5\x61\x51\x23\xa3\xae\x95\xde\x9e\x4a\xc1\x05\x71\xce\x1c\xe0\x80\x77\xfc\x61\xdb\x64\x0e\x07\x4c\xca\xaf\xfc\x9b\x3b\x6e\x07\xea\x9e\xbf\x67\xb6\x18\xe9\x95\xb0\x23\x82\xd3\x77\x6d\x4f\xff\xf4\xb9\x83\x14\x61\x7a\x26\x4a\x8c\xba\xa5\x46\xa2\x76\xbb\xe1\x3f\x84\x88\xf5\xd7\xa9\x6b\x23\x1e\x7b\x23\x71\xbb\x32\x99\x74\xc6\x5c\x5d\x25\xea\x69\x39\xb9\x32\x1b\xe9\x22\x63\x05\x93\xae\x07\xba\x6a\x76\x08\xde\xb7\xba\x4e\x66\xfa\x94\x9b\xa3\x43\x03\xdf\x5d\xfa\x7f\x4d\xa7\x75\x22\xf2\x5e\xba\xff\xa3\x1a\xfd\x31\x30\xcb\xff\x03\x00\x00\xff\xff\x1e\xe0\xf4\x80\xf4\x15\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 5620, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
