// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x4b\x6f\x9c\x4e\x12\x3f\x37\x9f\xa2\x34\xb2\x22\xb0\x08\xce\x79\x24\x1f\xd6\x76\xe2\xf5\xae\x1f\xf1\x4e\x76\xf7\x10\x45\x56\x0f\x14\x33\x64\x19\xc0\xdd\x8d\x1f\xc2\x7c\xf7\x55\x75\x37\xd0\x30\xd8\x71\xfe\x39\x99\xa9\xae\xae\xe7\xaf\x7e\x05\x6e\x9a\x8f\x70\x20\xca\x52\xc1\xf2\x18\x22\xf8\xd8\xb6\x9e\x16\xdd\xd7\x28\x9e\xbf\x3d\x57\xa8\xe5\xf4\x20\xa3\x5b\x92\x0d\x2a\xbb\x5a\x71\x95\x95\xc5\x44\xeb\xca\x8a\xb5\x62\xc5\xe3\xff\xf1\x0d\x42\xd3\x44\x5f\xcd\xe3\x35\xdf\x61\xdb\x7a\x5e\xb6\xab\x4a\xa1\xc0\xd7\xb6\x04\x2f\x36\x08\x07\xd9\xae\x0a\xe1\x80\xe7\x19\x97\xda\xe0\x85\xd6\x91\x6d\xeb\xb1\xa6\x31\xf2\xb6\x85\xa6\x21\x45\x78\x81\xfb\xba\x54\x68\xa3\xc1\x22\xd1\x0e\x03\xcf\x6b\x9a\x2c\x85\x8d\x02\x3f\xc7\x02\xa2\x33\xac\xb0\x48\xb0\x88\x33\x94\x01\x7c\xd2\x4a\x4c\x51\xc8\xee\x09\x48\x25\xea\x58\x41\xe3\x31\xe6\x04\x94\x60\xa5\x03\x71\x55\xe9\x3e\x29\xd1\x61\x44\xd9\xc0\x0b\xd4\x55\x85\xe2\x94\x4b\xfc\x92\x09\xa9\x74\x8c\xe4\xe2\xbc\xd4\x26\x74\x61\x4c\x95\x4d\x8d\xb4\x09\x37\x6a\x66\x93\xc8\x25\xbe\x16\x60\x56\x28\x14\x29\x8f\xb1\xe9\x13\xa6\x32\x6a\x45\x7c\xc2\xb8\xa6\x9a\x9f\x96\x85\xc2\x27\xe5\x64\x73\xb8\x11\xbc\xda\xde\xe7\xd1\x4d\x85\x82\x3b\x3a\x1e\x3b\x34\xd7\xf8\x3a\xc7\x55\xbc\xc5\x1d\xf7\x5a\xcf\x7b\xe0\x02\x64\x59\x8b\x18\x25\x1c\xc3\xf7\x1f\x87\x5c\xaa\x68\xa5\x05\x8d\xc7\xa8\x3c\x94\xf2\x12\x16\x52\x5f\x89\xac\x79\xb9\x08\x3d\xc6\x2e\x8a\xaa\x56\x4b\x6a\x90\xce\x75\x95\xe4\xf0\x02\x82\x3f\xde\x9a\x46\x91\xca\x49\x9d\xe5\xea\xa2\x58\x42\xca\x73\x89\xa1\xc7\xda\xb0\x73\x5b\x71\x21\x31\x31\xa1\xc0\x31\x6c\xee\x73\x2d\x11\xd1\x55\x2d\xd5\x65\xc9\xed\x91\x6f\xc3\x8b\xa2\x28\x18\xe5\x3f\x24\xe2\xe4\xaf\xc1\xe0\xa0\x59\x57\x97\x19\x24\x1f\x36\xcd\x70\x32\xc6\x67\x34\x3a\xb2\x98\xed\x5b\x66\x9e\xc9\xf0\x68\x06\x8c\xed\x1e\xff\x64\xde\x3d\xdf\xf7\x30\x3a\x9d\x71\xd2\x7a\x5e\x5a\x17\x31\x5c\xe3\xe3\xe7\x49\x8a\x66\x6e\xf6\x72\xbb\xff\x2b\x89\x39\x48\x0c\x7b\xb3\xd3\xcc\x76\x7f\x94\xd6\x68\x44\xa1\xc3\xe4\x34\x29\x6a\x98\x40\x55\x8b\x02\x3e\x4c\x7b\x6a\x26\x73\xae\x99\xa6\x9b\x4b\xd0\xf2\x70\x98\x2c\x3b\x65\xaf\xb4\xa9\xef\xd3\x12\xba\xd3\xc9\xdd\xa1\xfe\x3e\xc2\xde\xb0\x04\x60\x1b\x11\x80\x99\x91\x69\x06\x2e\x9c\x7f\x61\xe9\xb4\xdc\x55\x39\x3e\x65\xea\xd9\x27\x3c\x53\xc9\x42\x48\x33\xcc\x13\x42\x72\x56\x6c\x42\x88\xb7\x59\x9e\x0c\x7a\x44\x07\x21\x8d\xd6\xdf\xc4\x46\xc2\x8e\x57\xdf\x8d\xe2\x0f\x87\x26\x02\xf0\xb5\xd6\xba\x2c\xf3\xc0\x09\xec\x53\x68\x86\xef\x17\x41\x51\x73\xfc\x58\x3d\x41\x6c\x08\x23\xb2\xc4\x31\xb4\xef\x5f\x28\xab\xb2\x90\xf8\x77\x5e\x24\x39\x0a\xed\x22\x26\xbe\xec\x14\xce\x51\x4d\x69\x87\x2c\x06\x1e\x43\xad\x37\xe5\xad\x46\xc4\x21\x60\xeb\x79\x4c\x3e\x66\x2a\xde\x82\x88\x07\xde\x1a\x9e\xc8\x51\xcc\x25\x02\xd5\xdd\x34\xdf\x63\x5d\x76\x94\xd1\x7c\xd8\x87\xd3\xb8\x35\xdb\xb3\x84\x2b\xae\x83\x89\xa3\x3b\x6d\x8c\x6e\x87\x63\xd7\x2b\xcc\x31\xa6\xa7\x15\xaa\x10\xd0\x38\x0d\xe8\x36\x11\xd7\xba\x4e\x61\xfd\xac\x50\x46\x27\x75\x9a\xa2\xe8\xac\x46\x57\x5c\xc8\x2d\xcf\xcf\x6f\x2f\xfd\x0f\xeb\x3a\x0d\x3c\x3a\xe9\x00\x3e\x8d\x46\x07\xc3\xce\xb8\xe2\x4b\xb2\x18\x9d\x90\x45\x3f\x20\x50\x32\x02\x2c\x95\x25\xc1\x94\xd7\xb9\x72\xd2\xed\xe9\xbd\xc0\xd5\xb6\x54\x7e\x3f\x5a\x42\x94\xa2\x33\x6d\x32\x5a\xd4\x85\xac\x2b\xda\xa8\x98\xc0\x39\xe9\xdd\x5e\x42\xd9\xe5\xb8\x08\x02\x0b\xf9\xa6\xb1\xdb\x4f\x8d\x16\x7b\xc7\x4d\x59\x0a\x78\x6f\x0e\xa3\x7f\x66\x45\x02\x8b\x9b\x93\x7f\x7c\x3e\xfd\xb6\xb0\x83\x45\x15\x69\x1a\x73\x6e\xd7\x63\x5e\x3e\x8e\xd6\xe3\x05\xc1\x78\x87\x85\x2a\x85\xd9\x32\x06\xbc\xcd\xf4\x9e\x5d\xf0\x40\x66\x2d\x52\xe3\x0e\xaa\x03\x6a\x02\xb8\x73\xef\xb5\xed\x5c\xfb\x43\x90\x98\x6b\xc0\x8c\x7b\x59\xae\x7f\x6a\x46\x53\xb3\x4c\xe6\x18\x1d\x60\x6f\xbb\x6a\x00\xcf\x98\x9e\x53\xe9\xc2\xfe\xb4\xcc\xc9\xc5\x17\x7d\xe0\x63\xbc\xb7\x7b\x75\x30\xe1\xef\x54\xc9\x40\x87\xf2\x1a\xdc\xfc\x37\x53\x5b\xed\xc3\x19\xad\x70\xc0\x95\x7b\x64\xb0\x75\xb3\xfe\x89\xb1\xd9\xcf\x33\x55\x36\x40\x33\x8e\xca\x5a\xb9\x09\x5d\xe3\xa3\xb6\xb6\x42\xe5\x9b\x74\x35\xf6\xd3\x52\x40\xd6\x11\xd5\xf2\xd8\xbe\x34\xd9\x7a\x18\x97\x76\x8e\xb5\xcc\xf8\x33\x72\x3d\xbe\x8b\xbb\x3b\x8a\xa3\xe0\x3b\x5c\x2c\xb5\x58\x7b\x8e\xfe\xc3\xf3\x1a\xe5\xf7\xec\x07\x1c\x03\x16\x71\x99\x64\xc5\xe6\x84\xcb\x2c\xee\x4a\xbf\xd2\x70\xf1\xe7\xf3\xd0\xa1\xb9\x2f\x71\x7d\x7c\x46\xdb\xb4\xc5\xec\x00\x13\x47\xd3\x1c\x38\x01\x4e\x1b\x31\x58\xb6\x31\x76\x1b\xd2\xdc\xb9\x90\x57\xa8\xb6\x65\x62\x0d\x5a\x3c\x90\x3b\xfd\xe0\xa4\x75\x5a\x16\x71\x2d\x04\x16\x2a\x7f\xf6\xa9\x6e\xc4\x54\xaf\xc2\x8a\x0d\x54\x41\xcc\x34\x06\xe3\xdd\x28\x64\x83\x78\xdb\x08\x0d\xe9\xc0\x5a\xb0\xc5\x60\xe3\x97\xcb\xd9\x42\xf7\x16\xf5\x8e\x7c\x01\xf2\xd6\x87\x64\x52\xb4\xbe\xca\xf5\xcf\x68\xe2\xdf\x75\xd3\xbd\xd2\xce\xfc\x6e\x3b\x2e\xd3\xde\xcf\x32\x59\x71\x15\x6f\xfd\xc0\xa1\xc5\xb2\x56\x9e\xd1\xe9\x69\xe8\x8d\xfe\xfd\x06\x29\xcc\x95\x6c\x9f\x24\x8c\xaf\xc9\x20\x63\xf2\xa5\xaf\xec\x1f\x92\x05\x4b\xf5\xe2\x7b\x63\x48\xfb\x29\x85\xb7\xe6\x94\x31\x7d\x93\xb4\x6c\xdb\x8d\x94\x5e\x07\xb4\x10\x8a\x2c\xb7\xb2\x0e\xa1\x4b\x50\xa2\xc6\x70\xe8\xc4\xbb\xf8\x24\x8d\x0d\x25\xb0\xa3\x23\xf8\x76\x73\x76\x03\x5c\x6c\xa4\x91\x08\xd4\xb4\x37\x83\x07\x7f\xc0\x83\x6d\x62\xc5\x05\xdf\xe9\x26\x1a\xbd\xaf\xf4\x5b\xf6\x68\xd4\xaf\x69\xb4\x56\xb4\x9e\xc9\x78\x41\x9e\x16\x0e\x64\x19\x09\xc2\xfe\xc6\x1e\xa4\xe7\xad\xc4\xea\x69\x64\x84\xdd\x51\x5e\xc3\x95\x7d\x33\x0c\xe3\x28\xc9\xa2\xa6\xc9\x8a\x04\x9f\xec\x87\x9b\xfb\x31\x46\x86\xaf\x78\x35\xf2\xb3\xff\x11\x38\xf6\xe1\x8c\xc1\x8c\xc4\x7d\x65\x65\x2c\xe8\xea\xdb\x8d\xff\xfb\x87\x73\x20\x82\x61\xd1\xc9\x10\x04\x1a\xca\xde\xfb\xf0\x6c\x1a\xe3\xb6\xfb\xeb\x1d\x1d\x81\xb5\x9c\xa3\x90\x73\x6f\x03\xce\x31\x59\x78\x6b\x06\x2d\x82\x7f\x15\xf1\x7b\x97\xf5\x83\xf3\x5d\xad\xf6\xbe\xa9\x5f\x1b\xba\xa6\x99\x79\x67\xb9\xbe\xb9\xbe\xfe\xf7\xe5\x65\x8f\x8c\x51\xad\xb5\xde\x4d\xfa\xbe\x62\xeb\x55\xfe\xe1\x21\xf0\xf6\xc1\x94\xa5\xf0\x00\xc7\xc7\x34\x8b\x76\xfc\x27\x6f\x6d\xd7\x75\x9e\xf7\x9c\x38\x1b\xe7\xf8\xdd\xaa\x37\x50\x64\xb9\x37\x87\x5e\x63\x23\x93\x7a\x5d\xae\x62\x9e\x73\x61\x4b\xd5\x43\xad\xcb\x74\x6e\xb1\x4e\x18\x67\x8a\x68\xff\xf0\x21\x18\x11\x7b\xf7\xbf\x10\xe7\x97\xfb\x63\x80\xd5\xff\x03\x00\x00\xff\xff\x89\x9c\x35\x27\x67\x12\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 4711, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
