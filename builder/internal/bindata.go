// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4d\x6f\xdc\x3c\x0e\x3e\xdb\xbf\x82\x18\x04\x85\x1d\xb8\x4e\xcf\x03\xe4\xb0\x49\xda\x6c\x76\xf3\xd1\xec\x74\x77\x0f\x45\x11\x68\x6c\x7a\xc6\x5d\x8f\xed\x48\x72\x3e\xa0\xf8\xbf\x2f\x28\xc9\xb6\xec\x71\xd2\xf4\xed\x69\x3c\x12\x45\xf2\x21\x1f\x92\x92\x52\x1f\xe1\x80\x57\x95\x84\xe5\x31\xc4\xf0\xb1\x6d\x7d\xbd\x74\xdf\x20\x7f\xfe\xf6\x5c\xa3\x5e\xa7\x0f\x11\xdf\xd2\xda\x20\xb2\x6b\x24\x93\x79\x55\x4e\xa4\xae\xec\xb2\x16\xac\x59\xf2\x3f\xb6\x41\x50\x2a\xfe\x6a\x3e\xaf\xd9\x0e\xdb\xd6\xf7\xf3\x5d\x5d\x71\x09\x81\xd6\xc5\x59\xb9\x41\x38\xc8\x77\x75\x04\x07\xac\xc8\x99\xd0\x0a\x2f\xb4\x8c\x68\x5b\xdf\x53\xca\xac\xb7\x2d\x28\x45\x82\xf0\x02\xf7\x4d\x25\xd1\x7a\x83\x65\xaa\x0d\x86\xbe\xaf\x54\x9e\xc1\x46\x42\x50\x60\x09\xf1\x19\xd6\x58\xa6\x58\x26\x39\x8a\x10\x3e\x69\x21\x4f\x92\xcb\xee\x0e\x08\xc9\x9b\x44\x82\xf2\x3d\xcf\x71\x28\xc5\x5a\x3b\xe2\x8a\xd2\x79\x12\xa2\xcd\x98\xd0\xc0\x0b\x34\x75\x8d\xfc\x94\x09\xfc\x92\x73\x21\xb5\x8f\x64\xe2\xbc\xd2\x2a\x74\x60\x4c\x94\x4d\x8c\xb4\x0a\xd7\x6b\xcf\x82\x28\x04\xbe\xe6\x60\x5e\x4a\xe4\x19\x4b\x50\xf5\x80\x29\x8c\x5a\x10\x9f\x30\x69\x28\xe6\xa7\x55\x29\xf1\x49\x3a\x68\x0e\x37\x9c\xd5\xdb\xfb\x22\xbe\xa9\x91\x33\x47\xc6\xf7\x0e\xcd\x31\xb6\x2e\x70\x95\x6c\x71\xc7\xfc\xd6\xf7\x1f\x18\x07\x51\x35\x3c\x41\x01\xc7\xf0\xfd\xc7\x21\x13\x32\x5e\xe9\x05\xe5\x7b\x14\x1e\x82\xbc\x84\x85\xd0\x47\x62\xab\x5e\x2c\x22\xdf\xf3\x2e\xca\xba\x91\x4b\x4a\x90\xc6\xba\x4a\x0b\x78\x01\xce\x1e\x6f\x4d\xa2\x48\xe4\xa4\xc9\x0b\x79\x51\x2e\x21\x63\x85\xc0\xc8\xf7\xda\xa8\x33\x5b\x33\x2e\x30\x35\xae\xc0\x31\x6c\xee\x0b\xbd\xc2\xe3\xab\x46\xc8\xcb\x8a\xd9\xad\xc0\xba\x17\xc7\x71\x38\xc2\x3f\x00\x71\xf0\x6b\x32\x38\x6c\xd6\xd1\xf5\x0c\x93\x0f\x95\x1a\x76\xc6\xfc\x8c\x47\x5b\x96\xb3\x7d\xca\xcc\x37\x29\x1e\xd5\x80\xd1\xdd\xf3\x9f\xd4\xbb\xfb\xfb\x16\x46\xbb\x33\x46\x5a\xdf\xcf\x9a\x32\x81\x6b\x7c\xfc\x3c\x81\x68\xea\x66\x0f\xdb\xfd\x5f\x01\xe6\x30\x31\xea\xd5\x4e\x91\xed\xfe\x08\xd6\xa8\x44\xa1\xe3\xe4\x14\x14\x25\x8c\xa3\x6c\x78\x09\x1f\xa6\x39\x35\x95\x39\x97\x4c\x93\xcd\x25\xe8\xf5\x68\xa8\x2c\x5b\x65\xaf\xa4\xa9\xcf\xd3\x12\xba\xdd\xc9\xd9\x21\xfe\x01\xc2\x5e\xb1\x84\x60\x13\x11\x82\xa9\x91\x29\x02\x97\xce\xbf\xd0\x74\x5a\xed\xea\x02\x9f\x72\xf9\x1c\x10\x9f\x29\x64\x11\x64\x39\x16\x29\x31\x39\x2f\x37\x11\x24\xdb\xbc\x48\x07\x39\x6a\x07\x11\x95\xd6\xdf\xf8\x46\xc0\x8e\xd5\xdf\x8d\xe0\x0f\xa7\x4d\x84\x10\x68\xa9\x75\x55\x15\xa1\xe3\xd8\xa7\xc8\x14\xdf\x2f\x9c\xa2\xe4\x04\x89\x7c\x82\xc4\x34\x8c\xd8\x36\x8e\x21\x7d\xff\x42\x51\x57\xa5\xc0\xbf\xb3\x32\x2d\x90\x6b\x13\x09\xf5\xcb\x4e\xe0\x1c\xe5\xb4\xed\x90\xc6\xd0\xf7\x50\xcb\x4d\xfb\x96\xe2\x49\x04\xd8\xfa\xbe\x27\x1e\x73\x99\x6c\x81\x27\x43\xdf\x1a\xbe\xc8\x50\xc2\x04\x02\xc5\xdd\x24\xdf\xf7\x3a\x74\x84\x68\xde\xed\xc3\xa9\xdf\xba\xdb\x7b\x29\x93\x4c\x3b\x93\xc4\x77\x5a\x19\x9d\x8e\xc6\xa6\x57\x58\x60\x42\x5f\x2b\x94\x11\xa0\x31\x1a\xd2\x69\x6a\x5c\xeb\x26\x83\xf5\xb3\x44\x11\x9f\x34\x59\x86\xbc\xd3\x1a\x5f\x31\x2e\xb6\xac\x38\xbf\xbd\x0c\x3e\xac\x9b\x2c\xf4\x69\xa7\x23\xf8\xd4\x1b\xed\x8c\x77\xc6\x24\x5b\x92\xc6\xf8\x84\x34\x06\x21\x91\xd2\x23\xc2\x52\x58\x52\xcc\x58\x53\x48\x07\x6e\xdf\xde\x4b\x5c\x6d\x2b\x19\xf4\xa5\xc5\x79\xc5\x3b\xd5\x06\xd1\xa2\x29\x45\x53\xd3\x44\xc5\x14\xce\x49\xee\xf6\x12\xaa\x0e\xe3\x22\x0c\x2d\xe5\x95\xb2\xd3\x4f\x8e\x06\x7b\xd7\x9b\xf2\x0c\xf0\xde\x6c\xc6\xff\xcc\xcb\x14\x16\x37\x27\xff\xf8\x7c\xfa\x6d\x61\x0b\x8b\x22\xa2\x94\xd9\xb7\xe3\xb1\xa8\x1e\x47\xe3\xf1\x82\x68\xbc\xc3\x52\x56\xdc\x4c\x19\x43\x5e\x35\x3d\x67\x07\x3c\x90\x5a\xcb\xd4\xa4\xa3\xea\xc0\x9a\x10\xee\xdc\x73\x6d\x3b\x97\xfe\x08\x04\x16\x9a\x30\xe3\x5c\x56\xeb\x9f\xba\xa3\xc9\xd9\x4e\xe6\x28\x1d\x68\x6f\xb3\x6a\x08\xef\x79\xba\x4e\x85\x4b\xfb\xd3\xaa\x20\x13\x5f\xf4\x46\x80\xc9\xde\xec\xd5\xce\x44\xbf\x13\x25\x43\x1d\xc2\x35\x98\xf9\x6f\x2e\xb7\xda\x86\x53\x5a\xd1\xc0\x2b\x77\xcb\x70\xeb\x66\xfd\x13\x13\x33\x9f\x67\xa2\x6c\x88\x66\x0c\x55\x8d\x74\x01\x5d\xe3\xa3\xd6\xb6\x42\x19\x18\xb8\x9a\xfb\x59\xc5\x21\xef\x1a\xd5\xf2\xd8\x5e\x9a\x6c\x3c\x8c\x49\x5b\xc7\x7a\xcd\xd8\x33\xeb\xba\x7c\x17\x77\x77\xe4\x47\xc9\x76\xb8\x58\xea\x65\x6d\x39\xfe\x0f\x2b\x1a\x14\xdf\xf3\x1f\x70\x0c\x58\x26\x55\x9a\x97\x9b\x13\x26\xf2\xa4\x0b\xfd\x4a\xd3\x25\x98\xc7\xa1\x5d\x73\x2f\x71\xbd\x7f\x46\xda\xa4\xc5\xcc\x00\xe3\x87\x52\x07\x8e\x83\xd3\x44\x0c\x9a\xad\x8f\xdd\x84\x34\x67\x2e\xc4\x15\xca\x6d\x95\x5a\x85\x96\x0f\x64\x4e\x7f\x38\xb0\x4e\xab\x32\x69\x38\xc7\x52\x16\xcf\x01\xc5\x8d\x3a\xd5\xab\xb4\xf2\x86\x56\x41\x9d\x69\x4c\xc6\xbb\x91\xcb\x86\xf1\x36\x11\x9a\xd2\xa1\xd5\x60\x83\xe1\x8d\x2f\x97\xb3\x81\xee\x35\xea\x19\xf9\x02\x64\xad\x77\xc9\x40\xb4\xb6\xaa\xf5\xcf\x78\x62\xdf\x35\xd3\x5d\x69\x67\xfe\xb7\x5d\x2f\xd3\xd6\xcf\x72\x51\x33\x99\x6c\x83\xd0\x69\x8b\x55\x23\x7d\x23\xd3\xb7\xa1\x37\xf2\xf7\x1b\x4d\x61\x2e\x64\xfb\x4d\xc2\xd8\x9a\x14\x32\xa6\x5f\xfa\xc8\xfe\x61\xb3\xf0\x32\x3d\xf8\xde\x28\xd2\xbe\x4a\xe1\xad\x3a\xf5\x3c\x7d\x92\xa4\x6c\xda\xcd\x2a\x5d\x07\xf4\x22\x94\x79\x61\xd7\x3a\x86\x2e\x41\xf2\x06\xa3\x21\x13\xef\xea\x27\x59\x62\x5a\x82\x77\x74\x04\xdf\x6e\xce\x6e\x80\xf1\x8d\x30\x2b\x1c\x75\xdb\x9b\xe1\x43\x30\xf0\xc1\x26\xb1\x66\x9c\xed\x74\x12\x8d\xdc\x57\xfa\x2f\x7a\x36\xea\x6b\x1a\x8d\x15\x2d\x67\x10\x2f\xc8\xd2\xc2\xa1\xac\x47\x0b\x51\x7f\xc2\x52\x7a\xe6\x60\x22\x9f\x46\xe7\x08\xc8\xf4\x98\xb3\x8d\x49\x9c\xe6\xb1\x52\x79\x99\xe2\x93\x7d\xa7\xb9\x6f\x2f\x52\x7a\xc5\xea\x91\x8d\xfd\x37\xdf\xc8\x82\x43\xfa\xd1\x75\xd4\xf3\xc2\x2e\x76\x5d\x69\xbf\xbf\xf0\x86\x22\x1f\x86\x98\x88\x80\xa3\x69\xc7\x7b\x8f\x4a\xa5\x8c\xd9\xee\xd7\x3f\x3a\x02\xab\xb9\x40\x2e\xe6\x26\xbd\xb3\x4d\x1a\xde\xaa\x2f\xcb\xce\x5f\x79\xfc\xde\x41\xfc\xe0\xbc\x99\xe5\xde\x7b\xf9\xb5\x82\x52\x6a\xe6\x3e\x72\x7d\x73\x7d\xfd\xef\xcb\xcb\x9e\x02\xa3\x58\x6b\xb9\x9b\xec\x7d\xc1\xd6\x63\xfa\xc3\x43\xe8\xef\x13\x27\xcf\xe0\x01\x8e\x8f\xa9\xce\x6c\x69\x4f\x6e\x64\xd7\x4d\x51\xf4\xfd\x6e\xd6\xcf\xf1\xbd\xa9\xaf\xb0\xb7\x94\xb9\xac\xcf\x85\x1e\x8a\xab\x84\x15\x8c\xdb\xa0\x75\xaa\x3a\xc8\x73\xd3\x73\xd2\x56\xa6\x3c\x0e\x0e\x35\xde\xfd\x4a\x79\x4b\xa7\x71\x22\x70\x4e\xda\x67\xf2\xe8\xcf\x40\xc5\xff\x07\x00\x00\xff\xff\x42\x27\x10\x48\x77\x12\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 4727, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
