// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x4f\xe4\xb8\x12\x7e\x4e\x7e\x45\x9d\xd6\x08\x25\x28\x1b\xf6\xb9\x25\x1e\x76\x60\x87\xe5\x1c\x2e\xcb\xf6\xec\xec\xc3\x68\x84\x4c\x52\x69\x3c\xa4\x93\x60\x3b\x0d\x28\x93\xff\x7e\x54\xb6\x93\x38\xe9\x0b\x30\xcb\x0b\xdd\xbe\xd4\xf5\xab\xaf\xca\xdd\x34\xbf\xc0\x07\x51\x96\x0a\xe6\xc7\x10\xc3\x2f\x6d\xeb\xeb\xa5\xc7\x1a\xc5\xcb\xe7\x97\x0a\xf5\x3a\x7d\x90\xf1\x0d\xad\x0d\x47\x56\xb5\x62\x8a\x97\xc5\xe4\xd4\xa5\x5d\xd6\x07\x2b\x96\x3c\xb0\x25\x42\xd3\xc4\x7f\x9a\x8f\x57\x6c\x85\x6d\xeb\xfb\x7c\x55\x95\x42\x41\xa0\x65\x09\x56\x2c\x11\x3e\xf0\x55\x15\xc1\x07\x96\x73\x26\xb5\xc0\x73\x7d\x46\xb6\xad\xef\x35\x8d\x59\x6f\x5b\x68\x1a\x3a\x08\x3f\xe0\xb1\x2e\x15\x5a\x6b\xb0\x48\xb5\xc2\xd0\xf7\x9b\x86\x67\xb0\x54\x10\xe4\x58\x40\x7c\x8a\x15\x16\x29\x16\x09\x47\x19\xc2\xaf\xfa\x90\xa7\xc8\x64\x77\x07\xa4\x12\x75\xa2\xa0\xf1\x3d\xcf\x31\x28\xc5\x4a\x1b\xe2\x1e\xa5\xfb\x74\x88\x36\x63\xf2\x06\x7e\x40\x5d\x55\x28\x4e\x98\xc4\x4f\x5c\x48\xa5\x6d\x24\x15\x67\xa5\x16\xa1\x03\x63\xa2\x6c\x62\xa4\x45\xb8\x56\x7b\xd6\x89\x5c\xe2\x2e\x03\x79\xa1\x50\x64\x2c\xc1\xa6\x77\x98\xc2\xa8\x0f\xe2\x33\x26\x35\xc5\xfc\xa4\x2c\x14\x3e\x2b\xc7\x9b\xc3\xa5\x60\xd5\xfd\x63\x1e\x5f\x57\x28\x98\x73\xc6\xf7\x0e\xcd\x35\x76\x97\xe3\x22\xb9\xc7\x15\xf3\x5b\xdf\x5f\x33\x01\xb2\xac\x45\x82\x12\x8e\xe1\xeb\xb7\x43\x26\x55\xbc\xd0\x0b\x8d\xef\x51\x78\xc8\xe5\x39\xcc\xa4\xbe\x12\x5b\xf1\x72\x16\xf9\x9e\x77\x5e\x54\xb5\x9a\x53\x82\xb4\xaf\x8b\x34\x87\x1f\x20\xd8\xd3\x8d\x49\x14\x1d\xf9\x58\xf3\x5c\x9d\x17\x73\xc8\x58\x2e\x31\xf2\xbd\x36\xea\xd4\x56\x4c\x48\x4c\x8d\x29\x70\x0c\xcb\xc7\x5c\xaf\x88\xf8\xb2\x96\xea\xa2\x64\x76\x2b\xb0\xe6\xc5\x71\x1c\x8e\xfc\x1f\x1c\x71\xfc\xd7\x60\x70\xd0\xac\xa3\xeb\x19\x24\x1f\x36\xcd\xb0\x33\xc6\x67\x3c\xda\xb2\x98\xed\x53\x66\x3e\x93\xe0\x51\x0d\x18\xd9\x3d\xfe\x49\xbc\xbb\xbf\xa9\x61\xb4\xbb\x45\x49\xeb\xfb\x59\x5d\x24\x70\x85\x4f\xbf\x4f\x5c\x34\x75\xb3\xe1\xdb\xe3\xcf\x38\xe6\x20\x31\xea\xc5\x4e\x3d\x5b\xfd\x2b\xb7\x46\x25\x0a\x1d\x26\xa7\x4e\x51\xc2\x04\xaa\x5a\x14\x70\x30\xcd\xa9\xa9\xcc\x6d\xc9\x34\xd9\x9c\x83\x5e\x8f\x86\xca\xb2\x55\xb6\x23\x4d\x7d\x9e\xe6\xd0\xed\x4e\xee\x0e\xf1\x0f\x10\x36\x8a\x25\x04\x9b\x88\x10\x4c\x8d\x4c\x3d\x70\xe1\xfc\x8a\xa4\x93\x72\x55\xe5\xf8\xcc\xd5\x4b\x40\x78\xa6\x90\x45\x90\x71\xcc\x53\x42\x32\x2f\x96\x11\x24\xf7\x3c\x4f\x87\x73\x44\x07\x11\x95\xd6\x6f\x62\x29\x61\xc5\xaa\xaf\xe6\xe0\x37\x87\x26\x42\x08\xf4\xa9\xbb\xb2\xcc\x43\xc7\xb0\x5f\x23\x53\x7c\xaf\x18\x45\xc9\x09\x12\xf5\x0c\x89\x21\x8c\xd8\x12\xc7\x90\xbe\xbf\x50\x56\x65\x21\xf1\x0f\x56\xa4\x39\x0a\xad\x22\x21\xbe\xec\x0e\x9c\xa1\x9a\xd2\x0e\x49\x0c\x7d\x0f\xf5\xb9\x29\x6f\x35\x22\x89\x00\x5b\xdf\xf7\xe4\x13\x57\xc9\x3d\x88\x64\xe0\xad\xe1\x13\x29\x4a\x98\x44\xa0\xb8\x9b\xe4\xfb\x5e\xe7\x1d\x79\xb4\xdd\xec\xc3\xa9\xdd\x9a\xed\xbd\x94\x29\xa6\x8d\x49\xe2\x5b\x2d\x8c\x6e\x47\x63\xd5\x0b\xcc\x31\xa1\x4f\x0b\x54\x11\xa0\x51\x1a\xd2\x6d\x22\xae\xbb\x3a\x83\xbb\x17\x85\x32\xfe\x58\x67\x19\x8a\x4e\x6a\x7c\xc9\x84\xbc\x67\xf9\xd9\xcd\x45\x70\x70\x57\x67\xa1\x4f\x3b\x1d\xc0\xa7\xd6\x68\x63\xbc\x53\xa6\xd8\x9c\x24\xc6\x1f\x49\x62\x10\x12\x28\x3d\x02\x2c\x85\x25\xc5\x8c\xd5\xb9\x72\xdc\xed\xe9\xbd\xc0\xc5\x7d\xa9\x82\xbe\xb4\x84\x28\x45\x27\xda\x78\x34\xab\x0b\x59\x57\xd4\x51\x31\x85\x33\x3a\x77\x73\x01\x65\xe7\xe3\x2c\x0c\x2d\xe4\x9b\xc6\x76\x3f\x35\x6a\xec\x1d\x37\xf1\x0c\xf0\xd1\x6c\xc6\xff\xe3\x45\x0a\xb3\xeb\x8f\xff\xfd\xfd\xe4\xf3\xcc\x16\x16\x45\xa4\x69\xcc\xbe\x6d\x8f\x79\xf9\x34\x6a\x8f\xe7\x04\xe3\x15\x16\xaa\x14\xa6\xcb\x18\xf0\x36\xd3\x7b\xb6\xc1\x03\x89\xb5\x48\x4d\x3a\xa8\x0e\xa8\x09\xe1\xd6\xbd\xd7\xb6\xdb\xd2\x1f\x81\xc4\x5c\x03\x66\x9c\xcb\xf2\xee\xbb\x66\x34\xb5\x95\xc9\x1c\xa1\x03\xec\x6d\x56\x0d\xe0\x3d\x4f\xd7\xa9\x74\x61\x7f\x52\xe6\xa4\xe2\x93\xde\x08\x30\xd9\xe8\xbd\xda\x98\xe8\x3d\x51\x32\xd0\x21\xbf\x06\x35\xff\x70\x75\xaf\x75\x38\xa5\x15\x0d\xb8\x72\xb7\x0c\xb6\xae\xef\xbe\x63\x62\xfa\xf3\x96\x28\x1b\xa0\x19\x45\x65\xad\x5c\x87\xae\xf0\x49\x4b\x5b\xa0\x0a\x8c\xbb\x1a\xfb\x59\x29\x80\x77\x44\x35\x3f\xb6\x43\x93\x8d\x87\x51\x69\xeb\x58\xaf\x19\x7d\x66\x5d\x97\xef\xec\xf6\x96\xec\x28\xd8\x0a\x67\x73\xbd\xac\x35\xc7\x5f\x58\x5e\xa3\xfc\xca\xbf\xc1\x31\x60\x91\x94\x29\x2f\x96\x1f\x99\xe4\x49\x17\xfa\x85\x86\x4b\xb0\xdd\x0f\x6d\x9a\x3b\xc4\xf5\xf6\x99\xd3\x26\x2d\xa6\x07\x18\x3b\x9a\xe6\x83\x63\xe0\x34\x11\x83\x64\x6b\x63\xd7\x21\xcd\x9d\x73\x79\x89\xea\xbe\x4c\xad\x40\x8b\x07\x52\xa7\x3f\x38\x6e\x9d\x94\x45\x52\x0b\x81\x85\xca\x5f\x02\x8a\x1b\x31\xd5\x4e\x58\x79\x03\x55\x10\x33\x8d\xc1\x78\x3b\x32\xd9\x20\xde\x26\x42\x43\x3a\xb4\x12\x6c\x30\xbc\xf1\x70\xb9\x3d\xd0\x3f\xab\x64\x34\xc7\x6e\xf9\xde\x76\x04\xa6\x55\x9e\x72\x59\x31\x95\xdc\x07\xa1\xc3\x85\x65\xad\x2c\xc1\x79\x3d\xf9\xec\xc9\xda\x3b\xa8\x60\x9b\x0f\x9b\xd4\x60\x74\x4d\xca\x17\xd3\x4f\xbd\xab\xff\x92\x22\xbc\x4c\xb7\xbb\x3d\xa5\xd9\xd7\x26\xec\xab\x4e\xcf\xd3\x37\xe9\x94\xcd\x83\x59\xa5\x21\x40\x2f\x42\xc1\x73\xbb\xd6\xe1\x72\x0e\x4a\xd4\x18\x0d\xa9\x78\x13\x8b\x64\x89\x21\x02\xaf\x69\x1c\xac\x93\x1e\x3d\x42\x75\x28\xea\x06\x90\x0e\xed\x74\xa2\x26\xca\xba\x64\x15\x11\xdf\x17\x26\x38\xcd\x14\xd2\x62\x85\x89\xa5\x8c\x00\x85\xe8\x1a\xae\xbe\xf5\x4a\xce\x6e\xe9\x96\x6d\xca\x46\x9f\x95\x46\x9d\x48\x08\xf8\xcf\x31\xb9\xdd\x57\x0d\x26\xa6\xf9\x99\x1b\x28\x44\x57\x0c\x93\x8e\x79\x55\xe7\xb9\xd9\x19\xe1\xb6\x6d\x8d\xe3\x02\xe5\x67\x7a\x8e\x0e\xc6\xfe\x85\xb2\xcc\xd7\x28\x2e\x79\x9a\xe6\xf8\xc4\x84\xed\xab\xba\x8e\xc5\xd6\x91\x23\x70\xc6\x31\x2d\xaa\x14\x61\x67\xa8\x49\x83\xbe\x77\x74\x04\xb5\xc4\xee\x3a\x64\xa2\x5c\xc1\xaa\xd7\x02\x52\xb1\xe4\x01\x78\x61\x86\x40\x81\x85\xef\xfa\x53\xde\x7d\x8f\x27\x11\x33\x43\xef\x94\x9f\x20\xb0\x81\x70\xb8\xb1\x62\x82\xad\x74\x95\x99\xd3\x7f\xd2\x77\xd9\x93\x84\x19\x9f\xa9\xdd\xeb\x83\x06\x93\x33\xca\xc7\xcc\xa1\x12\x9b\xd7\xe1\x8e\x25\x9b\x2d\x57\x13\xf5\x3c\xbe\x49\x11\xdc\xb8\xe8\x1e\xc0\x24\x4e\x79\xdc\x34\xbc\x48\xf1\xd9\x3e\xa2\xdd\x87\x31\xc9\xbd\x64\xd5\x48\xcd\xe6\x83\x7c\xac\xc3\x61\xa7\xf1\x6b\xc1\xf3\xbc\xb0\x69\xf4\x37\xcb\xf2\x45\xa9\xba\xd8\xfc\xc1\xa4\x06\x96\x7e\x27\x11\xe4\xc6\x37\x6d\xeb\xdc\x8e\xca\x5d\xa0\xdc\x85\xc9\xb6\x97\x65\x70\x08\xc7\x23\x71\xaf\x5c\x13\xa8\x4b\xd2\x5c\x8d\x83\xe1\xc7\x08\xe3\xc8\xe6\xcf\x11\xa1\x65\x29\xc2\x78\x9d\x2b\xd0\x77\x3b\x59\x5d\x0f\xea\x41\xa6\xef\xff\x00\x12\xda\x13\x9d\x01\xd9\x46\xa3\x18\xa6\x2d\x19\x91\xcc\xb0\x6f\x06\x7b\x89\x65\x2f\xc3\xbf\x8b\x33\x36\xc9\xfe\xd5\x47\x53\x2f\xaa\xb3\x2a\x36\xf3\x46\xbb\x51\xc2\xcc\x72\xdf\xee\x1b\x8d\x45\x15\x8d\x4a\x0f\xf8\x12\xc1\x9a\xe5\xc3\xa8\xd4\x99\xd2\x51\x97\x9d\x96\x1e\xf0\x65\x98\x01\x9c\x62\x65\x62\xe9\x94\x2a\xdd\x74\x0b\xc9\x4e\x32\x4c\x2c\xdf\x38\xc7\xd0\xdf\xda\x25\x38\x7b\xdb\x49\xef\xdf\xc5\x6a\x77\x82\xd7\x2c\x0f\x07\x49\xdb\xc9\xd8\x41\x50\xcf\xfd\xc3\xd6\x60\xbd\x0e\x65\xec\x98\xdf\xb6\x70\x0c\xeb\x49\xd5\xf6\xee\xb6\x2e\x71\x8f\x15\x14\x3c\x1f\x7a\xdd\xf8\x97\x80\xbe\xee\x6d\x89\xfb\xdd\x7f\xff\xe8\x08\x2c\x92\x73\x14\x72\xcb\x0b\xc8\xd9\x25\x01\xfb\xf0\x69\x81\xf9\x5a\x81\xbc\xf5\x81\xb2\x76\x7e\x4b\x54\x9b\x85\xbb\x63\xe4\x30\xd5\x35\x79\xa7\x5d\x5d\x5f\x5d\xfd\x7d\x71\xd1\x13\xf0\xa8\xb4\xf5\xb9\xeb\xec\x6d\xb5\xad\x9f\x2f\x07\xeb\xd0\xdf\x24\x6d\x9e\xc1\x7a\xcc\x56\x3b\xc8\xca\x61\x81\xbd\xef\xc9\x3d\x63\xb0\x63\x8c\xb6\x65\xa3\xf5\x38\x42\x2f\xce\x17\x8e\x48\x66\x40\x7f\xb8\xee\x14\xd0\xb7\x15\x7b\xc0\xfe\x01\xfd\x9b\x10\xec\x25\x82\x1c\x8b\x80\x09\x11\x1a\xa4\xd3\xdb\xf6\x69\x09\xf2\xa5\x48\xe2\x7f\x18\x57\x67\xa2\xac\x2b\xbd\xf3\xb4\x8c\x7f\x4b\xd3\x60\x7c\x5c\x3f\x90\x86\x72\x27\xa5\xb6\x30\x5e\x1f\x08\xbd\x73\x6a\x78\x73\x80\x03\xde\x35\x2f\x43\xce\x73\x38\x60\x42\x7c\xe5\xdf\xa2\x51\x11\x10\xa4\xe6\x6f\x19\xeb\xf4\xe9\x65\x69\xc6\x16\x0e\xbc\x50\x3d\x9f\x79\x29\x66\x48\x1e\xc6\xa7\x65\x81\x81\x33\x38\xf5\x6f\x84\x9f\x42\x8a\xb1\xd7\x8a\x6b\x03\x1e\x3a\xd3\xe8\xd3\x52\x47\xd2\x2a\xb3\xa9\x16\xa8\xa6\xe9\xe4\x52\x3f\x01\x17\x09\xcb\x99\xb0\xa5\x30\x05\xc8\xb6\xb7\xe2\x64\x9c\x9e\x0e\x06\xc1\xe1\x04\x39\x6f\x91\x69\x8c\x08\x9c\x9b\xf6\x47\xe1\xd1\x97\x31\xbf\xf4\x54\xba\x83\x61\x46\xfb\xef\xe3\x98\x3d\x2c\xbd\xc9\x32\x6b\x98\x76\xbb\xdd\xec\x32\xea\x77\x84\xfd\x14\xb3\x2f\x2c\xdf\xcb\x48\xfe\x16\x0a\xb0\xb1\x34\xb7\x3b\x8a\x6e\xdf\x4a\x53\x6b\xba\x33\xea\x52\x9b\x08\xdc\xdf\xa8\x42\x7f\x47\x83\x9a\x18\x66\x9b\x53\xcf\x63\x2c\xdf\xca\x64\x63\x3f\x3c\x97\x4b\x0f\xd7\xc3\xc6\x14\x52\x6f\xe2\xba\xa3\x23\xf8\x7c\x7d\x7a\x4d\x53\x3d\x26\x4a\xf7\x34\x30\xb2\xdf\xc5\x6f\x9d\x98\x9c\xcb\xbd\x42\xf6\x55\xd5\x28\xee\xa3\x32\xe8\xa3\xfd\x5a\x71\xad\x47\x55\x7d\xb0\x76\x82\xbc\x51\x70\x56\x93\x09\xee\xa0\xe2\xec\xe6\x62\x22\x66\x92\xad\x37\xd4\xdf\xff\x03\x00\x00\xff\xff\x47\x8c\xc6\x96\xe5\x1c\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 7397, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
