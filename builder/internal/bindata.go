// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4b\x73\x9c\x3e\x12\x3f\xc3\xa7\xe8\x9a\x72\xa5\xc0\x45\x70\xce\x53\xe5\xc3\xda\x4e\xbc\xde\xf5\x23\xde\xc9\xee\x1e\x52\x29\x97\x06\x9a\x19\xb2\x0c\x60\x49\xf8\x51\x32\xdf\x7d\xab\x25\x01\x82\xc1\x8e\xf3\xcf\x69\x18\xa9\xf5\xeb\xd7\xaf\xbb\x25\xa5\x3e\xc2\x01\xaf\x2a\x09\xcb\x63\x88\xe1\x63\xdb\xfa\x7a\xe9\xbe\x41\xfe\xfc\xed\xb9\x46\xbd\x4e\x1f\x22\xbe\xa5\xb5\x41\x64\xd7\x48\x26\xf3\xaa\x9c\x48\x5d\xd9\x65\x2d\x58\xb3\xe4\x7f\x6c\x83\xa0\x54\xfc\xd5\x7c\x5e\xb3\x1d\xb6\xad\xef\xe7\xbb\xba\xe2\x12\x02\x8d\xc5\x59\xb9\x41\x38\xc8\x77\x75\x04\x07\xac\xc8\x99\xd0\x80\x17\x5a\x46\xb4\xad\xef\x29\x65\xd6\xdb\x16\x94\x22\x41\x78\x81\xfb\xa6\x92\x68\xad\xc1\x32\xd5\x0a\x43\xdf\x57\x2a\xcf\x60\x23\x21\x28\xb0\x84\xf8\x0c\x6b\x2c\x53\x2c\x93\x1c\x45\x08\x9f\xb4\x90\x27\xc9\x64\x77\x07\x84\xe4\x4d\x22\x41\xf9\x9e\xe7\x18\x94\x62\xad\x0d\x71\x45\xe9\x3c\x09\xd1\x66\x4c\xde\xc0\x0b\x34\x75\x8d\xfc\x94\x09\xfc\x92\x73\x21\xb5\x8d\xa4\xe2\xbc\xd2\x10\x3a\x30\x26\xca\x26\x46\x1a\xc2\xb5\xda\xb3\x4e\x14\x02\x5f\x33\x30\x2f\x25\xf2\x8c\x25\xa8\x7a\x87\x29\x8c\x5a\x10\x9f\x30\x69\x28\xe6\xa7\x55\x29\xf1\x49\x3a\xde\x1c\x6e\x38\xab\xb7\xf7\x45\x7c\x53\x23\x67\x8e\x8c\xef\x1d\x9a\x63\x6c\x5d\xe0\x2a\xd9\xe2\x8e\xf9\xad\xef\x3f\x30\x0e\xa2\x6a\x78\x82\x02\x8e\xe1\xfb\x8f\x43\x26\x64\xbc\xd2\x0b\xca\xf7\x28\x3c\xe4\xf2\x12\x16\x42\x1f\x89\x2d\xbc\x58\x44\xbe\xe7\x5d\x94\x75\x23\x97\x94\x20\xed\xeb\x2a\x2d\xe0\x05\x38\x7b\xbc\x35\x89\x22\x91\x93\x26\x2f\xe4\x45\xb9\x84\x8c\x15\x02\x23\xdf\x6b\xa3\x4e\x6d\xcd\xb8\xc0\xd4\x98\x02\xc7\xb0\xb9\x2f\xf4\x0a\x8f\xaf\x1a\x21\x2f\x2b\x66\xb7\x02\x6b\x5e\x1c\xc7\xe1\xc8\xff\xc1\x11\xc7\x7f\x4d\x06\x87\xcd\x3a\xba\x9e\x61\xf2\xa1\x52\xc3\xce\x98\x9f\xf1\x68\xcb\x72\xb6\x4f\x99\xf9\x26\xe0\x51\x0d\x18\xec\x9e\xff\x04\xef\xee\xef\x6b\x18\xed\xce\x28\x69\x7d\x3f\x6b\xca\x04\xae\xf1\xf1\xf3\xc4\x45\x53\x37\x7b\xbe\xdd\xff\x15\xc7\x1c\x26\x46\x3d\xec\xd4\xb3\xdd\x1f\xb9\x35\x2a\x51\xe8\x38\x39\x75\x8a\x12\xc6\x51\x36\xbc\x84\x0f\xd3\x9c\x9a\xca\x9c\x4b\xa6\xc9\xe6\x12\xf4\x7a\x34\x54\x96\xad\xb2\x57\xd2\xd4\xe7\x69\x09\xdd\xee\xe4\xec\x10\xff\x00\x61\xaf\x58\x42\xb0\x89\x08\xc1\xd4\xc8\xd4\x03\x97\xce\xbf\x40\x3a\xad\x76\x75\x81\x4f\xb9\x7c\x0e\x88\xcf\x14\xb2\x08\xb2\x1c\x8b\x94\x98\x9c\x97\x9b\x08\x92\x6d\x5e\xa4\x83\x1c\xb5\x83\x88\x4a\xeb\x6f\x7c\x23\x60\xc7\xea\xef\x46\xf0\x87\xd3\x26\x42\x08\xb4\xd4\xba\xaa\x8a\xd0\x31\xec\x53\x64\x8a\xef\x17\x46\x51\x72\x82\x44\x3e\x41\x62\x1a\x46\x6c\x1b\xc7\x90\xbe\x7f\xa1\xa8\xab\x52\xe0\xdf\x59\x99\x16\xc8\xb5\x8a\x84\xfa\x65\x27\x70\x8e\x72\xda\x76\x08\x31\xf4\x3d\xd4\x72\xd3\xbe\xa5\x78\x12\x01\xb6\xbe\xef\x89\xc7\x5c\x26\x5b\xe0\xc9\xd0\xb7\x86\x2f\x52\x94\x30\x81\x40\x71\x37\xc9\xf7\xbd\xce\x3b\xf2\x68\xde\xec\xc3\xa9\xdd\xba\xdb\x7b\x29\x93\x4c\x1b\x93\xc4\x77\x1a\x8c\x4e\x47\x63\xd5\x2b\x2c\x30\xa1\xaf\x15\xca\x08\xd0\x28\x0d\xe9\x34\x35\xae\x75\x93\xc1\xfa\x59\xa2\x88\x4f\x9a\x2c\x43\xde\xa1\xc6\x57\x8c\x8b\x2d\x2b\xce\x6f\x2f\x83\x0f\xeb\x26\x0b\x7d\xda\xe9\x08\x3e\xb5\x46\x1b\xe3\x9d\x31\xc9\x96\x84\x18\x9f\x10\x62\x10\x12\x29\x3d\x22\x2c\x85\x25\xc5\x8c\x35\x85\x74\xdc\xed\xdb\x7b\x89\xab\x6d\x25\x83\xbe\xb4\x38\xaf\x78\x07\x6d\x3c\x5a\x34\xa5\x68\x6a\x9a\xa8\x98\xc2\x39\xc9\xdd\x5e\x42\xd5\xf9\xb8\x08\x43\x4b\x79\xa5\xec\xf4\x93\xa3\xc1\xde\xf5\xa6\x3c\x03\xbc\x37\x9b\xf1\x3f\xf3\x32\x85\xc5\xcd\xc9\x3f\x3e\x9f\x7e\x5b\xd8\xc2\xa2\x88\x28\x65\xf6\xed\x78\x2c\xaa\xc7\xd1\x78\xbc\x20\x1a\xef\xb0\x94\x15\x37\x53\xc6\x90\x57\x4d\xcf\xd9\x01\x0f\x04\x6b\x99\x9a\x74\x54\x1d\x58\x13\xc2\x9d\x7b\xae\x6d\xe7\xd2\x1f\x81\xc0\x42\x13\x66\x9c\xcb\x6a\xfd\x53\x77\x34\x39\xdb\xc9\x1c\xd0\x81\xf6\x36\xab\x86\xf0\x9e\xa7\xeb\x54\xb8\xb4\x3f\xad\x0a\x52\xf1\x45\x6f\x04\x98\xec\xcd\x5e\x6d\x4c\xf4\x3b\x51\x32\xd4\x21\xbf\x06\x35\xff\xcd\xe5\x56\xeb\x70\x4a\x2b\x1a\x78\xe5\x6e\x19\x6e\xdd\xac\x7f\x62\x62\xe6\xf3\x4c\x94\x0d\xd1\x8c\xa2\xaa\x91\xae\x43\xd7\xf8\xa8\xd1\x56\x28\x03\xe3\xae\xe6\x7e\x56\x71\xc8\xbb\x46\xb5\x3c\xb6\x97\x26\x1b\x0f\xa3\xd2\xd6\xb1\x5e\x33\xfa\xcc\xba\x2e\xdf\xc5\xdd\x1d\xd9\x51\xb2\x1d\x2e\x96\x7a\x59\x6b\x8e\xff\xc3\x8a\x06\xc5\xf7\xfc\x07\x1c\x03\x96\x49\x95\xe6\xe5\xe6\x84\x89\x3c\xe9\x42\xbf\xd2\x74\x09\xe6\xfd\xd0\xa6\xb9\x97\xb8\xde\x3e\x23\x6d\xd2\x62\x66\x80\xb1\x43\xa9\x03\xc7\xc0\x69\x22\x06\x64\x6b\x63\x37\x21\xcd\x99\x0b\x71\x85\x72\x5b\xa5\x16\xd0\xf2\x81\xd4\xe9\x0f\xc7\xad\xd3\xaa\x4c\x1a\xce\xb1\x94\xc5\x73\x40\x71\xa3\x4e\xf5\x2a\xad\xbc\xa1\x55\x50\x67\x1a\x93\xf1\x6e\x64\xb2\x61\xbc\x4d\x84\xa6\x74\x68\x11\x6c\x30\xbc\xf1\xe5\x72\x36\xd0\x3d\xa2\x9e\x91\x2f\x40\xda\x7a\x93\x8c\x8b\x56\x57\xb5\xfe\x19\x4f\xf4\xbb\x6a\xba\x2b\xed\xcc\xff\xb6\xeb\x65\x5a\xfb\x59\x2e\x6a\x26\x93\x6d\x10\x3a\x6d\xb1\x6a\xa4\x6f\x64\xfa\x36\xf4\x46\xfe\x7e\xa3\x29\xcc\x85\x6c\xbf\x49\x18\x5d\x93\x42\xc6\xf4\x4b\x1f\xd9\x3f\x6c\x16\x5e\xa6\x07\xdf\x1b\x45\xda\x57\x29\xbc\x55\xa7\x9e\xa7\x4f\x92\x94\x4d\xbb\x59\xa5\xeb\x80\x5e\x84\x32\x2f\xec\x5a\xc7\xd0\x25\x48\xde\x60\x34\x64\xe2\x5d\xfd\x24\x4b\x4c\x4b\xf0\x8e\x8e\xe0\xdb\xcd\xd9\x0d\x30\xbe\x11\x66\x85\xa3\x6e\x7b\x33\x7c\x08\x06\x3e\xd8\x24\xd6\x8c\xb3\x9d\x4e\xa2\x91\xfb\x4a\xff\x45\xcf\x46\x7d\x4d\xa3\xb1\xa2\xe5\x8c\xc7\x0b\xd2\xb4\x70\x28\xeb\xd1\x42\xd4\x9f\xd8\xa3\xf4\x3c\x4a\x22\x9f\x46\x20\xe4\x75\x34\x9c\xd8\x47\xf1\x30\x89\xd3\x3c\x56\x2a\x2f\x53\x7c\xb2\xef\x36\xf7\x2d\x46\xb8\x57\xac\x1e\xa9\xd9\x7f\x03\x8e\x75\x38\x55\x30\xb3\xe2\xde\x58\x3d\x2f\xec\xc2\xdb\x55\xff\xfb\x6b\x73\xe8\x03\xc3\x9c\x13\x11\x70\x34\x1d\x7b\xef\xdd\xa9\x94\x51\xdb\xfd\xfa\x47\x47\x60\x91\x0b\xe4\x62\xee\x32\xe0\x6c\x13\xc2\x5b\x25\x68\x09\xfc\x2b\x8b\xdf\x3b\xab\x1f\x9c\x67\xb5\xdc\x7b\x52\xbf\x56\x73\x4a\xcd\x5c\x59\xae\x6f\xae\xaf\xff\x7d\x79\xd9\x13\x63\x14\x6b\x2d\x77\x93\xbd\x2f\xd8\x7a\x92\x7f\x78\x08\xfd\x7d\x32\xe5\x19\x3c\xc0\xf1\x31\x95\xa2\xad\xfe\xc9\xa5\xed\xba\x29\x8a\xbe\x25\xce\xda\x39\xbe\x5a\xf5\x45\xf8\x16\xd8\x1e\xa5\x0d\x70\x2e\xf4\x08\x5d\x25\xac\x60\xdc\xc6\xaf\xe7\x5f\xe7\xfe\xdc\xb0\x9d\x74\xa1\x29\xcd\x83\xc3\x87\x61\xe2\x8e\x4b\xe9\x2d\x54\x63\x47\xe0\x9e\xb5\x0f\xeb\xc9\x3f\xf7\xcf\xc0\xd3\xff\x07\x00\x00\xff\xff\x57\x69\xf6\x4a\xb7\x12\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 4791, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
