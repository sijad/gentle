// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x53\xdc\xb8\x12\x7e\xb6\x7f\x45\x9f\xa9\x14\x65\x53\x5e\xb3\xcf\x53\xc5\x43\x80\x0d\xcb\x39\x5c\xc2\x0e\xc9\x3e\xa4\x52\x94\xb0\x7b\x06\x07\x8f\x6d\x24\x79\x80\x72\xfc\xdf\x4f\xb5\x24\xdb\x92\xe7\x02\x24\xbc\x30\x23\xa9\xef\x5f\x7f\x2d\x4d\xd3\xfc\x01\x1f\x78\x59\x4a\x98\x1e\x42\x0c\x7f\xb4\xad\xaf\x96\x1e\x6b\xe4\x2f\x37\x2f\x15\xaa\x75\xfa\x20\xe2\x6b\x5a\x1b\x8e\x2c\x6b\xc9\x64\x56\x16\xa3\x53\x17\x66\x59\x1d\xac\x58\xf2\xc0\x16\x08\x4d\x13\x7f\xd6\x1f\x2f\xd9\x12\xdb\xd6\xf7\xb3\x65\x55\x72\x09\x81\xd2\xc5\x59\xb1\x40\xf8\x90\x2d\xab\x08\x3e\xb0\x3c\x63\x42\x29\x3c\x53\x67\x44\xdb\xfa\x5e\xd3\xe8\xf5\xb6\x85\xa6\xa1\x83\xf0\x13\x1e\xeb\x52\xa2\xf1\x06\x8b\x54\x19\x0c\x7d\xbf\x69\xb2\x39\x2c\x24\x04\x39\x16\x10\x9f\x60\x85\x45\x8a\x45\x92\xa1\x08\xe1\x4f\x75\xc8\x93\xe4\xb2\xbd\x03\x42\xf2\x3a\x91\xd0\xf8\x9e\x67\x39\x94\x62\xa5\x1c\xb1\x8f\x92\x3c\x1d\xa2\xcd\x98\xa2\x81\x9f\x50\x57\x15\xf2\x63\x26\xf0\x53\xc6\x85\x54\x3e\x92\x89\xd3\x52\xa9\x50\x89\xd1\x59\xd6\x39\x52\x2a\x6c\xaf\x3d\x13\x44\x2e\x70\x9b\x83\x59\x21\x91\xcf\x59\x82\x4d\x1f\x30\xa5\x51\x1d\xc4\x67\x4c\x6a\xca\xf9\x71\x59\x48\x7c\x96\x56\x34\xfb\x0b\xce\xaa\xfb\xc7\x3c\xbe\xaa\x90\x33\xeb\x8c\xef\xed\x6b\x31\x76\x97\xe3\x2c\xb9\xc7\x25\xf3\x5b\xdf\x5f\x31\x0e\xa2\xac\x79\x82\x02\x0e\xe1\xdb\xf7\x7d\x26\x64\x3c\x53\x0b\x8d\xef\x51\x7a\x28\xe4\x29\x4c\x84\x12\x89\x8d\x7a\x31\x89\x7c\xcf\x3b\x2b\xaa\x5a\x4e\xa9\x40\x2a\xd6\x59\x9a\xc3\x4f\xe0\xec\xe9\x5a\x17\x8a\x8e\x1c\xd5\x59\x2e\xcf\x8a\x29\xcc\x59\x2e\x30\xf2\xbd\x36\xea\xcc\x56\x8c\x0b\x4c\xb5\x2b\x70\x08\x8b\xc7\x5c\xad\xf0\xf8\xa2\x16\xf2\xbc\x64\x66\x2b\x30\xee\xc5\x71\x1c\x3a\xf1\x0f\x81\x58\xf1\x2b\x30\x58\x68\x56\xd9\xf5\x34\x92\xf7\x9b\x66\xd8\x71\xf1\x19\x3b\x5b\x06\xb3\x7d\xc9\xf4\x67\x52\xec\xf4\x80\xd6\xdd\xe3\x9f\xd4\xdb\xfb\xeb\x16\x9c\xdd\x0d\x46\x5a\xdf\x9f\xd7\x45\x02\x97\xf8\xf4\xd7\x28\x44\xdd\x37\x6b\xb1\x3d\xfe\x4a\x60\x16\x12\xa3\x5e\xed\x38\xb2\xe5\x6f\x85\xe5\xb4\x28\x74\x98\x1c\x07\x45\x05\xe3\x28\x6b\x5e\xc0\xde\xb8\xa6\xba\x33\x37\x15\x53\x57\x73\x0a\x6a\x3d\x1a\x3a\xcb\x74\xd9\x96\x32\xf5\x75\x9a\x42\xb7\x3b\x92\x1d\xf2\x1f\x20\xac\x35\x4b\x08\xa6\x10\x21\xe8\x1e\x19\x47\x60\xc3\xf9\x15\x4d\xc7\xe5\xb2\xca\xf1\x39\x93\x2f\x01\xe1\x99\x52\x16\xc1\x3c\xc3\x3c\x25\x24\x67\xc5\x22\x82\xe4\x3e\xcb\xd3\xe1\x1c\xd1\x41\x44\xad\xf5\x91\x2f\x04\x2c\x59\xf5\x4d\x1f\xfc\x6e\xd1\x44\x08\x81\x3a\x75\x57\x96\x79\x68\x39\xf6\x67\xa4\x9b\xef\x15\xa7\xa8\x38\x41\x22\x9f\x21\xd1\x84\x11\x1b\xe2\x18\xca\xf7\x0f\x8a\xaa\x2c\x04\xfe\xcd\x8a\x34\x47\xae\x4c\x24\xc4\x97\xdd\x81\x53\x94\x63\xda\x21\x8d\xa1\xef\xa1\x3a\x37\xe6\xad\x86\x27\x11\x60\xeb\xfb\x9e\x78\xca\x64\x72\x0f\x3c\x19\x78\x6b\xf8\x44\x86\x12\x26\x10\x28\xef\xba\xf8\xbe\xd7\x45\x47\x11\x6d\x76\x7b\x7f\xec\xb7\x62\x7b\x2f\x65\x92\x29\x67\x92\xf8\x56\x29\x23\xe9\xc8\x35\x3d\xc3\x1c\x13\xfa\x34\x43\x19\x01\x6a\xa3\x21\x49\x13\x71\xdd\xd5\x73\xb8\x7b\x91\x28\xe2\xa3\x7a\x3e\x47\xde\x69\x8d\x2f\x18\x17\xf7\x2c\x3f\xbd\x3e\x0f\xf6\xee\xea\x79\xe8\xd3\x4e\x07\xf0\xb1\x37\xca\x19\xef\x84\x49\x36\x25\x8d\xf1\x11\x69\x0c\x42\x02\xa5\x47\x80\xa5\xb4\xa4\x38\x67\x75\x2e\xad\x70\x7b\x7a\x2f\x70\x76\x5f\xca\xa0\x6f\x2d\xce\x4b\xde\xa9\xd6\x11\x4d\xea\x42\xd4\x15\x4d\x54\x4c\xe1\x94\xce\x5d\x9f\x43\xd9\xc5\x38\x09\x43\x03\xf9\xa6\x31\xd3\x4f\x3a\x83\xbd\xe3\xa6\x6c\x0e\xf8\xa8\x37\xe3\xff\x65\x45\x0a\x93\xab\xa3\xff\xfe\x75\x7c\x33\x31\x8d\x45\x19\x69\x1a\xbd\x6f\xc6\x63\x5e\x3e\x39\xe3\xf1\x8c\x60\xbc\xc4\x42\x96\x5c\x4f\x19\x0d\xde\x66\x2c\x67\x06\x3c\x90\x5a\x83\xd4\xa4\x83\xea\x80\x9a\x10\x6e\x6d\xb9\xb6\xdd\x54\xfe\x08\x04\xe6\x0a\x30\x6e\x2d\xcb\xbb\x1f\x8a\xd1\xe4\x46\x26\xb3\x94\x0e\xb0\x37\x55\xd5\x80\xf7\x3c\xd5\xa7\xc2\x86\xfd\x71\x99\x93\x89\x4f\x6a\x23\xc0\x64\x6d\xf6\x2a\x67\xa2\xf7\x64\x49\x43\x87\xe2\x1a\xcc\xfc\x9b\xc9\x7b\x65\xc3\x6a\xad\x68\xc0\x95\xbd\xa5\xb1\x75\x75\xf7\x03\x13\x3d\x9f\x37\x64\x59\x03\x4d\x1b\x2a\x6b\x69\x07\x74\x89\x4f\x4a\xdb\x0c\x65\xa0\xc3\x55\xd8\x9f\x97\x1c\xb2\x8e\xa8\xa6\x87\xe6\xd2\x64\xf2\xa1\x4d\x9a\x3e\x56\x6b\xda\x9e\x5e\x57\xed\x3b\xb9\xbd\x25\x3f\x0a\xb6\xc4\xc9\x54\x2d\x2b\xcb\xf1\x57\x96\xd7\x28\xbe\x65\xdf\xe1\x10\xb0\x48\xca\x34\x2b\x16\x47\x4c\x64\x49\x97\xfa\x99\x82\x4b\xb0\x39\x0e\xe5\x9a\x7d\x89\xeb\xfd\xd3\xa7\x75\x59\xf4\x0c\xd0\x7e\x34\xcd\x07\xcb\xc1\x71\x21\x06\xcd\xc6\xc7\x6e\x42\x6a\x99\x33\x71\x81\xf2\xbe\x4c\x8d\x42\x83\x07\x32\xa7\x3e\x58\x61\x1d\x97\x45\x52\x73\x8e\x85\xcc\x5f\x02\xca\x1b\x31\xd5\x56\x58\x79\x03\x55\x10\x33\xb9\x60\xbc\x75\x5c\xd6\x88\x37\x85\x50\x90\x0e\x8d\x06\x93\x0c\xcf\xbd\x5c\x6e\x4e\xf4\xaf\x1a\x71\xee\xb1\x1b\xbe\xb7\x1d\x81\x29\x93\x27\x99\xa8\x98\x4c\xee\x83\xd0\xe2\xc2\xb2\x96\x86\xe0\xbc\x9e\x7c\x76\x54\xed\x1d\x54\xb0\x29\x86\x75\x6a\xd0\xb6\x46\xed\x8b\xe9\xa7\x3e\xd4\xdf\xa4\x08\x6f\xae\xc6\xdd\x8e\xd6\xec\x7b\x13\x76\x75\xa7\xe7\x29\x49\x3a\x65\xea\xa0\x57\xe9\x12\xa0\x16\xa1\xc8\x72\xb3\xd6\xe1\x72\x0a\x92\xd7\x18\x0d\xa5\x78\x13\x8b\xcc\x13\x4d\x04\x5e\xd3\x58\x58\xff\x9b\x09\x75\xdf\xe8\x40\xd4\xdd\x3f\x3a\xb0\xc7\x1f\xf9\xa2\x26\xc6\xba\x60\x15\xf1\xde\x57\xc6\x33\xba\x52\x08\x03\x15\xc6\x17\x22\x02\xe4\xbc\x9b\xb7\x4a\xea\x95\x92\xdd\x92\x94\x99\xc9\xda\x9e\xd1\x46\x83\x88\x73\xf8\xcf\x21\x45\xdd\x37\x0d\x26\x7a\xf6\x69\x09\xe4\xbc\xeb\x85\xd1\xc0\xbc\xac\xf3\x5c\xef\x38\xb0\x6d\x5b\x1d\x37\x47\x71\x43\xaf\xd1\xc1\xd9\x7f\x50\x94\xf9\x0a\xf9\x45\x96\xa6\x39\x3e\x31\x6e\xc6\xaa\x6a\x63\xbe\xf1\xc6\x11\x58\xb7\x31\xa5\xaa\xe4\x61\xe7\xa8\xae\x82\x92\x3b\x38\x80\x5a\x60\x27\x0e\x73\x5e\x2e\x61\xd9\x5b\x01\x21\x59\xf2\x00\x59\xa1\xef\x80\x1c\x0b\xdf\x8e\xa7\xbc\xfb\x11\x8f\x32\xa6\xef\xbc\x63\x7a\x82\xc0\x24\xc2\xa2\xc6\x8a\x71\xb6\x54\x4d\xa6\x4f\x7f\xa6\xef\xa2\xe7\x08\x7d\x7b\xa6\x69\xaf\x0e\x6a\x48\x4e\xa8\x1e\x13\x8b\x49\x4c\x5d\x07\x19\xc3\x35\x1b\x44\x13\xf9\xec\x4a\x52\x06\xd7\x04\xed\x03\x98\xc4\x69\x16\x37\x4d\x56\xa4\xf8\x6c\xde\xd0\xf6\xbb\x98\xf4\x5e\xb0\xca\x31\xb3\xfe\x1e\x77\x6d\x58\xe4\xe4\x3e\x16\x3c\xcf\x0b\x9b\x46\x7d\x33\x24\x5f\x94\xd2\x02\xbf\x02\x96\x7a\x26\x11\xe4\x5c\x49\x33\x39\x37\xa3\x72\x1b\x28\xb7\x61\xb2\xed\x75\x69\x1c\xc2\xa1\xa3\xee\x15\x31\x8e\xaa\x25\xb5\x68\x1c\x0c\xbf\x45\xe8\x40\xd6\x7f\x8d\x08\x0d\x49\x11\xc6\xeb\x5c\x82\x92\xed\x74\x75\x23\xa8\x07\x99\x92\xff\x09\xa4\xb4\xe7\x39\x0d\xb2\xb5\x39\x31\x5c\xb6\x44\x44\x3a\xc3\x7e\x16\xec\xe2\x95\x9d\xfc\xfe\x2e\xca\x58\xa7\xfa\x57\x9f\x4c\x4d\xa3\x7f\x3c\xb8\x71\x72\xa6\x64\x9c\x9c\x8d\xfb\x99\x19\x22\x7c\xab\x7c\x63\x00\x47\x97\xa8\x07\x7c\x89\x60\xc5\xf2\xe1\x12\xd5\xb9\xd9\xb1\x9a\xb9\x47\x3d\xe0\xcb\x70\x3b\xb0\xfa\x98\xf1\x85\xd5\xc5\x24\x69\xf7\x98\xb9\xe3\x30\xbe\x78\xe3\x0d\x87\xfe\x56\x36\xf7\x19\x69\xab\xf2\x5f\x8a\xe5\xf6\xda\xaf\x58\x1e\x0e\x9a\x36\xf3\xb4\x05\xae\x7e\x2c\x0c\x5b\x83\xf7\x2a\xb1\xb1\xe5\x7e\xdb\xc2\x21\xac\x46\x0d\xdd\x87\xdb\xda\x9c\xee\x1a\x28\xb2\x7c\x98\x82\xee\x6f\x04\x3d\x25\x98\xee\xf7\xbb\xff\xfe\xc1\x01\x18\x90\xe7\xc8\xc5\x86\xb7\x91\xb5\x4b\x0a\x76\x61\xd7\x80\xf6\xb5\xde\x79\xeb\xd3\x65\x65\xfd\xca\x28\xd7\x7b\x7a\xcb\x65\x44\x37\xde\xe8\x05\x77\x79\x75\x79\xf9\xe5\xfc\xbc\xe7\x66\xa7\xeb\xd5\xb9\xab\xf9\xdb\xda\x5e\x3d\x6c\xf6\x56\xa1\xbf\xce\xe7\xd9\x1c\x56\x2e\x91\x6d\xe1\x31\x8b\x20\x76\xbe\x34\x77\x5c\x90\x2d\x67\x94\x2f\x6b\x53\xc9\x52\x7a\x7e\x36\xb3\x54\x32\x0d\xfa\xfd\x55\x67\x80\xbe\x2d\xd9\x03\xf6\x4f\xeb\x8f\x9c\xb3\x97\x08\x72\x2c\x02\xc6\x79\xa8\x91\x4e\xaf\xde\xa7\x05\x88\x97\x22\x89\xff\x65\x99\x3c\xe5\x65\x5d\xa9\x9d\xa7\x45\xfc\x31\x4d\x03\xf7\xb8\x7a\x3a\x0d\xed\x4e\x46\x4d\x63\xbc\x7e\x55\xf4\xce\x68\x16\x4e\x01\xf6\xb2\x6e\xae\x69\xde\x9e\xc2\x1e\xe3\xfc\x5b\xf6\x3d\x72\x9a\x80\x20\x35\x7d\xcb\x85\x4f\x9d\x5e\x94\xfa\x46\x93\x41\x56\xc8\x9e\xdd\xbc\x14\xe7\x48\x11\xc6\x27\x65\x81\x81\x75\xa7\xea\x5f\x0f\xbf\x84\x14\xed\xaf\x51\xd7\x06\x59\x68\xdd\x53\x9f\x16\x2a\x93\xc6\x98\x29\x35\x47\x39\x2e\x67\x26\xd4\xe3\x70\x96\xb0\x9c\x71\xd3\x0a\x63\x80\x6c\x7a\x45\x8e\x2e\xda\xe3\x3b\x43\xb0\x3f\x42\xce\x5b\x74\x6a\x27\x02\x4b\xd2\xfc\x5c\xec\x7c\x71\xf9\xa5\xa7\xd2\x2d\x0c\xe3\xec\xbf\x8f\x63\x76\xb0\xf4\x3a\xcb\xac\x60\x3c\x09\xb7\xb3\x8b\x33\xfd\x08\xfb\x29\xce\xbf\xb2\x7c\x27\x23\xf9\x1b\x28\xc0\xe4\x52\x4b\x77\x14\xdd\xbe\x95\xa6\x56\x24\xe3\x4c\xa9\x75\x04\xee\x1e\x54\xa1\xbf\x65\x40\x8d\x1c\x33\xc3\xa9\xe7\x31\x96\x6f\x64\x32\x37\x0e\xcf\xe6\xd2\xfd\xd5\xb0\x31\x86\xd4\xc6\x60\xcf\x2e\x3f\x7f\xb9\x19\x13\xde\xc1\x01\xdc\x5c\x9d\x5c\xd1\xad\x1f\x13\xa9\x06\x1b\x68\x03\xef\x22\xb9\x4e\x4d\x9e\x89\x9d\x4a\x76\xb5\x96\x93\x7c\xa7\x17\xfa\x94\xbf\xd6\x61\x2b\xa7\xb5\xf7\x56\x56\xa6\xd7\xba\xce\x58\xd2\x19\x1e\x4c\x9c\x5e\x9f\x8f\xd4\x8c\x4a\xf6\x86\x26\xfc\x7f\x00\x00\x00\xff\xff\xcd\xa3\x69\xe2\x04\x1d\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 7428, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
