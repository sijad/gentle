// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x4d\x6f\x9c\x48\x13\x3e\x37\xbf\xa2\x34\xb2\x22\xb0\x08\xce\x79\x24\x1f\x5e\xdb\x89\x5f\xef\xda\x9e\x78\x27\xbb\x7b\x88\x22\xab\x07\x8a\x19\xb2\x0c\xe0\xee\xc6\x1f\xc2\xfc\xf7\x55\x75\x37\xd0\x30\x63\xc7\xd9\x9c\xcc\x54\x57\xd7\xe7\xf3\x54\x81\x9b\xe6\x3d\x1c\x88\xb2\x54\x30\x3f\x86\x08\xde\xb7\xad\xa7\x45\x77\x35\x8a\xa7\x2f\x4f\x15\x6a\x39\x3d\xc8\xe8\x86\x64\x83\xca\xb6\x56\x5c\x65\x65\x31\xd1\xba\xb2\x62\xad\x58\xf1\xf8\x1f\xbe\x46\x68\x9a\xe8\xb3\x79\xbc\xe6\x5b\x6c\x5b\xcf\xcb\xb6\x55\x29\x14\xf8\xda\x96\xe0\xc5\x1a\xe1\x20\xdb\x56\x21\x1c\xf0\x3c\xe3\x52\x1b\xbc\xd0\x3a\xb2\x6d\x3d\xd6\x34\x46\xde\xb6\xd0\x34\xa4\x08\xcf\x70\x57\x97\x0a\x6d\x34\x58\x24\xda\x61\xe0\x79\x4d\x93\xa5\xb0\x56\xe0\xe7\x58\x40\x74\x86\x15\x16\x09\x16\x71\x86\x32\x80\x0f\x5a\x89\x29\x0a\xd9\x3d\x01\xa9\x44\x1d\x2b\x68\x3c\xc6\x9c\x80\x12\xac\x74\x20\xae\x2a\xdd\x27\x25\x3a\x8c\x28\x1b\x78\x86\xba\xaa\x50\x9c\x72\x89\x9f\x32\x21\x95\x8e\x91\x5c\x9c\x97\xda\x84\x2e\x8c\xa9\xb2\xa9\x91\x36\xe1\x46\xcd\x6c\x12\xb9\xc4\x97\x02\xcc\x0a\x85\x22\xe5\x31\x36\x7d\xc2\x54\x46\xad\x88\x8f\x18\xd7\x54\xf3\xd3\xb2\x50\xf8\xa8\x9c\x6c\x0e\xd7\x82\x57\x9b\xbb\x3c\x5a\x54\x28\xb8\xa3\xe3\xb1\x43\x73\x8d\xaf\x72\x5c\xc6\x1b\xdc\x72\xaf\xf5\xbc\x7b\x2e\x40\x96\xb5\x88\x51\xc2\x31\x7c\xfd\x76\xc8\xa5\x8a\x96\x5a\xd0\x78\x8c\xca\x43\x29\xcf\x61\x26\xf5\x95\xc8\x9a\x97\xb3\xd0\x63\xec\xa2\xa8\x6a\x35\xa7\x06\xe9\x5c\x97\x49\x0e\xcf\x20\xf8\xc3\x8d\x69\x14\xa9\x9c\xd4\x59\xae\x2e\x8a\x39\xa4\x3c\x97\x18\x7a\xac\x0d\x3b\xb7\x15\x17\x12\x13\x13\x0a\x1c\xc3\xfa\x2e\xd7\x12\x11\x5d\xd5\x52\x5d\x96\xdc\x1e\xf9\x36\xbc\x28\x8a\x82\x51\xfe\x43\x22\x4e\xfe\x1a\x0c\x0e\x9a\x75\x75\x99\x41\xf2\x61\xd3\x0c\x27\x63\x7c\x46\xa3\x23\x8b\xd9\xbe\x65\xe6\x99\x0c\x8f\x38\x60\x6c\xf7\xf8\x27\xf3\xee\xf9\xae\x87\xd1\xe9\x1e\x27\xad\xe7\xa5\x75\x11\xc3\x35\x3e\x7c\x9c\xa4\x68\x78\xb3\x93\xdb\xdd\x7f\x49\xcc\x41\x62\xd8\x9b\x9d\x66\xb6\xfd\xa5\xb4\x46\x14\x85\x0e\x93\xd3\xa4\xa8\x61\x02\x55\x2d\x0a\x78\x37\xed\xa9\x61\xe6\xbe\x66\x9a\x6e\xce\x41\xcb\xc3\x81\x59\x96\x65\x2f\xb4\xa9\xef\xd3\x1c\xba\xd3\xc9\xdd\xa1\xfe\x3e\xc2\x0e\x59\x02\xb0\x8d\x08\xc0\x70\x64\x9a\x81\x0b\xe7\x1f\x58\x3a\x2d\xb7\x55\x8e\x8f\x99\x7a\xf2\x09\xcf\x54\xb2\x10\xd2\x0c\xf3\x84\x90\x9c\x15\xeb\x10\xe2\x4d\x96\x27\x83\x1e\x8d\x83\x90\xa8\xf5\x3f\xb1\x96\xb0\xe5\xd5\x57\xa3\xf8\xcd\x19\x13\x01\xf8\x5a\x6b\x55\x96\x79\xe0\x04\xf6\x21\x34\xe4\xfb\x41\x50\xd4\x1c\x3f\x56\x8f\x10\x9b\x81\x11\xd9\xc1\x31\xb4\xef\x0f\x94\x55\x59\x48\xfc\x3f\x2f\x92\x1c\x85\x76\x11\xd3\xbc\xec\x14\xce\x51\x4d\xc7\x0e\x59\x0c\x3c\x86\x5a\x6f\x3a\xb7\x1a\x11\x87\x80\xad\xe7\x31\xf9\x90\xa9\x78\x03\x22\x1e\xe6\xd6\xf0\x44\x8e\x62\x2e\x11\xa8\xee\xa6\xf9\x1e\xeb\xb2\xa3\x8c\xf6\x87\x7d\x38\x8d\x5b\x4f\x7b\x96\x70\xc5\x75\x30\x71\x74\xab\x8d\xd1\xed\x70\xec\x7a\x89\x39\xc6\xf4\xb4\x44\x15\x02\x1a\xa7\x01\xdd\xa6\xc1\xb5\xaa\x53\x58\x3d\x29\x94\xd1\x49\x9d\xa6\x28\x3a\xab\xd1\x15\x17\x72\xc3\xf3\xf3\x9b\x4b\xff\xdd\xaa\x4e\x03\x8f\x4e\x3a\x80\x4f\xa3\xd1\xc1\xb0\x33\xae\xf8\x9c\x2c\x46\x27\x64\xd1\x0f\x08\x94\x8c\x00\x4b\x65\x49\x30\xe5\x75\xae\x9c\x74\xfb\xf1\x5e\xe0\x72\x53\x2a\xbf\xa7\x96\x10\xa5\xe8\x4c\x9b\x8c\x66\x75\x21\xeb\x8a\x36\x2a\x26\x70\x4e\x7a\x37\x97\x50\x76\x39\xce\x82\xc0\x42\xbe\x69\xec\xf6\x53\xa3\xc5\xde\xcd\xa6\x2c\x05\xbc\x33\x87\xd1\xef\x59\x91\xc0\x6c\x71\xf2\xdb\xc7\xd3\x2f\x33\x4b\x2c\xaa\x48\xd3\x98\x73\xbb\x1e\xf3\xf2\x61\xb4\x1e\x2f\x08\xc6\x5b\x2c\x54\x29\xcc\x96\x31\xe0\x6d\xa6\xf7\xec\x82\x07\x32\x6b\x91\x1a\x77\x50\x1d\x50\x13\xc0\xad\x7b\xaf\x6d\xf7\xb5\x3f\x04\x89\xb9\x06\xcc\xb8\x97\xe5\xea\xbb\x9e\x68\x6a\xef\x24\x73\x8c\x0e\xb0\xb7\x5d\x35\x80\x67\x4c\xf3\x54\xba\xb0\x3f\x2d\x73\x72\xf1\x49\x1f\xf8\x18\xef\xec\x5e\x1d\x4c\xf8\x33\x55\x32\xd0\xa1\xbc\x06\x37\x7f\x67\x6a\xa3\x7d\x38\xd4\x0a\x07\x5c\xb9\x47\x06\x5b\x8b\xd5\x77\x8c\xcd\x7e\xde\x53\x65\x03\x34\xe3\xa8\xac\x95\x9b\xd0\x35\x3e\x68\x6b\x4b\x54\xbe\x49\x57\x63\x3f\x2d\x05\x64\xdd\xa0\x9a\x1f\xdb\x97\x26\x5b\x0f\xe3\xd2\xf2\x58\xcb\x8c\x3f\x23\x77\xde\xb1\xfa\xeb\x26\x28\x53\x35\x33\xa2\x0d\xcb\x9b\xe6\xc0\xb9\x3f\xad\xd3\x90\xc0\x5c\x5f\xe9\x30\x6a\xef\x5c\xc8\x2b\x54\x9b\x32\xb1\x06\x6d\xbb\xc8\x9d\x7e\xb0\xc2\xb2\xd6\x40\x89\x6b\x21\xb0\x50\xf9\x93\x4f\x69\xd1\x20\x79\xb1\xeb\x6c\x60\x32\x0d\x8e\x31\x56\x6e\x47\x21\x1b\x40\xda\x3a\x69\xc4\x05\xd6\x82\xad\x36\xc5\x4c\xaf\x7e\x7d\x8c\x14\xce\x5f\x3c\xaf\x51\x7e\xcd\xbe\xc1\xf1\x50\x01\xbd\xbf\x9e\x81\x5c\xf5\xf1\x98\xfc\xac\xa3\x72\xf5\x3d\x9a\x38\x0f\x86\xb2\xf4\xaf\x9b\x7b\x7e\xb7\xdd\x9c\xd1\xde\xcf\x32\x59\x71\x15\x6f\xfc\xc0\x19\x59\x65\xad\x3c\xa3\xd3\x8f\x88\x57\x9a\xf7\x13\x84\xdd\x57\xaf\x5d\x02\x1b\x5f\x13\x92\x61\xf2\xa9\x2f\xeb\x2f\x12\x99\xa5\x7a\x29\xbd\x42\xa0\x9e\x41\xf0\x1a\x87\x18\xd3\x37\x49\xcb\xf6\xdc\x48\x69\x55\x6b\x21\x14\x59\x6e\x65\x1d\x3c\xe7\xa0\x44\x8d\xe1\xd0\x89\x37\x71\x3d\x8d\x2d\x80\x8e\x8e\xe0\xcb\xe2\x6c\x01\x5c\xac\xa5\x91\x08\xd4\x23\x69\x0f\x1e\xfc\x01\x0f\xb6\x89\x15\x17\x7c\xab\x9b\x68\xf4\x3e\xd3\x6f\xd9\xa3\x51\xbf\x42\xd1\xc8\xd7\x7a\x26\xe3\x19\x79\x9a\xf5\xe0\x61\x8c\x91\x20\xec\x6f\xb8\xdf\x32\xaf\x58\x89\xd5\xe3\xc8\x08\xbb\xa5\xbc\x86\x2b\xbb\x66\x18\xc6\x51\x92\x45\x4d\x93\x15\x09\x3e\xda\x8f\x2a\xf7\x43\x89\x0c\x5f\xf1\x6a\xe4\x67\xf7\x03\x6d\xec\xc3\xa1\xc1\x1e\x89\xfb\x3a\xc9\x58\xd0\xd5\xb7\xe3\xfe\xdb\xc9\x39\x4c\x81\x61\x09\xc9\x10\x04\x9a\x71\xba\xf3\x51\xd8\x34\xc6\x6d\xf7\xd7\x3b\x3a\x02\x6b\x39\x47\x21\xf7\x6d\x6a\xe7\x98\x2c\xbc\xc6\x41\x8b\xe0\x1f\x45\xfc\xd6\x45\x7a\xef\x7c\xf3\xaa\x9d\xef\xdd\x97\x48\xd7\x34\x7b\xde\x27\xae\x17\xd7\xd7\x7f\x5e\x5e\xf6\xc8\x18\xd5\x5a\xeb\x2d\xd2\xb7\x15\x5b\xaf\xd9\x77\xf7\x81\xb7\x0b\xa6\x2c\x85\x7b\x38\x3e\x26\x2e\x5a\xfa\x4f\xde\xa8\xae\xeb\x3c\xef\x67\xe2\xde\x38\xc7\xef\x3d\xbd\x81\x22\xcb\xbd\x7d\xe8\x35\x36\x32\x79\xc2\x65\x16\x2f\x63\x9e\x73\x61\x4b\xd5\x43\xad\xcb\xb4\x88\xcb\x24\x2b\xd6\x5a\xb3\xab\xd8\x64\xe2\x4c\x11\xed\x1f\xde\x07\xa3\xc1\xde\xfd\x9f\xc2\xf9\xe5\xfe\x18\x60\xf5\x6f\x00\x00\x00\xff\xff\xaf\x57\x4d\xfd\x03\x12\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 4611, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
