// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xdb\x72\x9c\x3c\x12\xbe\x86\xa7\xe8\x9d\x72\xa5\xc0\xc5\x8f\x73\x3d\x55\xbe\x58\xdb\x89\xe3\x5d\x1f\xe2\x8c\x77\xf7\x22\x95\x72\x69\xa0\x99\x21\x61\x10\x96\x84\x0f\x85\xe7\xdd\xb7\x5a\x12\x20\x18\x7c\xc8\x9f\xab\x4c\xa4\x3e\xf7\xd7\x5f\x0b\x37\xcd\x5f\xb0\x27\x38\x57\x30\x3f\x84\x18\xfe\xda\x6e\x7d\x7d\x74\x57\xa3\x78\xba\x79\xaa\x50\x9f\xd3\x0f\x19\x5f\xd3\x59\x2f\xb2\xa9\x15\x53\x39\x2f\x47\x52\x17\xf6\x58\x0b\x56\x2c\xf9\xc5\x56\x08\x4d\x13\x7f\x35\x3f\x2f\xd9\x06\xb7\x5b\xdf\xcf\x37\x15\x17\x0a\x02\x6d\x4b\xb0\x72\x85\xb0\x97\x6f\xaa\x08\xf6\x58\x91\x33\xa9\x0d\x9e\x69\x19\xb9\xdd\xfa\x5e\xd3\x98\xf3\xed\x16\x9a\x86\x04\xe1\x19\xee\x6a\xae\xd0\x46\x83\x65\xaa\x1d\x86\xbe\xdf\x34\x79\x06\x2b\x05\x41\x81\x25\xc4\x27\x58\x61\x99\x62\x99\xe4\x28\x43\xf8\xa8\x85\x3c\x45\x21\xbb\x37\x20\x95\xa8\x13\x05\x8d\xef\x79\x4e\x40\x29\x56\x3a\x10\x57\x94\xf4\x49\x88\x2e\x63\xca\x06\x9e\xa1\xae\x2a\x14\xc7\x4c\xe2\xe7\x5c\x48\xa5\x63\x24\x17\xa7\x5c\x9b\xd0\x85\x31\x55\x36\x35\xd2\x26\xdc\xa8\x3d\x9b\x44\x21\xf1\xa5\x00\xf3\x52\xa1\xc8\x58\x82\x4d\x97\x30\x95\x51\x0b\xe2\x23\x26\x35\xd5\xfc\x98\x97\x0a\x1f\x95\x93\xcd\xfe\x4a\xb0\x6a\x7d\x57\xc4\x57\x15\x0a\xe6\xc8\xf8\xde\xbe\x51\x63\xcb\x02\x17\xc9\x1a\x37\xcc\xdf\xfa\xfe\x3d\x13\x20\x79\x2d\x12\x94\x70\x08\xdf\x7f\xec\x33\xa9\xe2\x85\x3e\x68\x7c\x8f\xca\x43\x29\xcf\x61\x26\xb5\x4a\x6c\xcd\xcb\x59\xe4\x7b\xde\x59\x59\xd5\x6a\x4e\x0d\xd2\xb9\x2e\xd2\x02\x9e\x41\xb0\x87\x6b\xd3\x28\x12\x39\xaa\xf3\x42\x9d\x95\x73\xc8\x58\x21\x31\xf2\xbd\x6d\xd4\xba\xad\x98\x90\x98\x9a\x50\xe0\x10\x56\x77\x85\x3e\x11\xf1\x45\x2d\xd5\x39\x67\xf6\x2a\xb0\xe1\xc5\x71\x1c\x0e\xf2\xef\x13\x71\xf2\xd7\x60\x70\xd0\xac\xab\xeb\x19\x24\xef\x37\x4d\x7f\x33\xc4\x67\x3c\xb8\xb2\x98\xed\x5a\x66\x7e\x93\xe1\xc1\x0c\x18\xdb\x1d\xfe\xc9\xbc\x7b\xbf\xeb\x61\x70\x3b\xe1\x64\xeb\xfb\x59\x5d\x26\x70\x89\x0f\x9f\x46\x29\x9a\xb9\xd9\xc9\xed\xee\xef\x24\xe6\x20\x31\xea\xcc\x8e\x33\xdb\xfc\x51\x5a\x83\x11\x85\x16\x93\xe3\xa4\xa8\x61\x02\x55\x2d\x4a\xf8\x30\xee\xa9\x99\xcc\xa9\x66\x9a\x6e\xce\x41\x9f\x47\xfd\x64\xd9\x29\x7b\xa1\x4d\x5d\x9f\xe6\xd0\xde\x8e\x74\xfb\xfa\x07\x08\x3b\xc3\x12\x82\x6d\x44\x08\x66\x46\xc6\x19\xb8\x70\x7e\xc3\xd2\x31\xdf\x54\x05\x3e\xe6\xea\x29\x20\x3c\x53\xc9\x22\xc8\x72\x2c\x52\x42\x72\x5e\xae\x22\x48\xd6\x79\x91\xf6\x72\x44\x07\x11\x8d\xd6\x3f\xc5\x4a\xc2\x86\x55\xdf\x8d\xe0\x0f\x87\x26\x42\x08\xb4\xd4\x92\xf3\x22\x74\x02\xfb\x18\x99\xe1\x7b\x23\x28\x6a\x4e\x90\xa8\x47\x48\x0c\x61\xc4\x96\x38\xfa\xf6\x7d\x43\x59\xf1\x52\xe2\x17\x56\xa6\x05\x0a\xed\x22\x21\xbe\x6c\x05\x4e\x51\x8d\x69\x87\x2c\x86\xbe\x87\x5a\x6e\xcc\x5b\x8d\x48\x22\xc0\xad\xef\x7b\xf2\x21\x57\xc9\x1a\x44\xd2\xf3\x56\xff\x8b\x1c\x25\x4c\x22\x50\xdd\x4d\xf3\x7d\xaf\xcd\x8e\x32\x9a\x0e\x7b\x7f\x1c\xb7\x66\x7b\x2f\x65\x8a\xe9\x60\x92\xf8\x56\x1b\x23\xed\x68\xe8\x7a\x81\x05\x26\xf4\x6b\x81\x2a\x02\x34\x4e\x43\xd2\x26\xe2\x5a\xd6\x19\x2c\x9f\x14\xca\xf8\xa8\xce\x32\x14\xad\xd5\xf8\x82\x09\xb9\x66\xc5\xe9\xf5\x79\xf0\x61\x59\x67\xa1\x4f\x37\x2d\xc0\xc7\xd1\xe8\x60\xbc\x13\xa6\xd8\x9c\x2c\xc6\x47\x64\x31\x08\x09\x94\x1e\x01\x96\xca\x92\x62\xc6\xea\x42\x39\xe9\x76\xf4\x5e\xe2\x62\xcd\x55\xd0\x8d\x96\x10\x5c\xb4\xa6\x4d\x46\xb3\xba\x94\x75\x45\x1b\x15\x53\x38\x25\xb9\xeb\x73\xe0\x6d\x8e\xb3\x30\xb4\x90\x6f\x1a\xbb\xfd\xd4\x60\xb1\xb7\xdc\x94\x67\x80\x77\xe6\x32\xfe\x77\x5e\xa6\x30\xbb\x3a\xfa\xd7\xa7\xe3\x9b\x99\x1d\x2c\xaa\x48\xd3\x98\x7b\xbb\x1e\x0b\xfe\x30\x58\x8f\x67\x04\xe3\x0d\x96\x8a\x0b\xb3\x65\x0c\x78\x9b\xb1\x9e\x5d\xf0\x40\x66\x2d\x52\x93\x16\xaa\x3d\x6a\x42\xb8\x75\xf5\xb6\xdb\xa9\xf6\x47\x20\xb1\xd0\x80\x19\xf6\x92\x2f\x7f\x6a\x46\x53\x93\x4c\xe6\x18\xed\x61\x6f\xbb\x6a\x00\xef\x79\x7a\x4e\xa5\x0b\xfb\x63\x5e\x90\x8b\xcf\xfa\x22\xc0\x64\x67\xf7\xea\x60\xa2\xdf\xa9\x92\x81\x0e\xe5\xd5\xbb\xf9\x5f\xae\xd6\xda\x87\x33\x5a\x51\x8f\x2b\xf7\xca\x60\xeb\x6a\xf9\x13\x13\xb3\x9f\x27\xaa\x6c\x80\x66\x1c\xf1\x5a\xb9\x09\x5d\xe2\x83\xb6\xb6\x40\x15\x98\x74\x35\xf6\x33\x2e\x20\x6f\x89\x6a\x7e\x68\x1f\x4d\xb6\x1e\xc6\xa5\x9d\x63\x7d\x66\xfc\x99\x73\x3d\xbe\xb3\xdb\x5b\x8a\xa3\x64\x1b\x9c\xcd\xf5\xb1\xf6\x1c\xff\x97\x15\x35\xca\xef\xf9\x0f\x38\x04\x2c\x13\x9e\xe6\xe5\xea\x88\xc9\x3c\x69\x4b\xbf\xd0\x70\x09\xa6\xf3\xd0\xa1\xb9\x8f\xb8\x2e\x3e\x23\x6d\xda\x62\x76\x80\x89\xa3\x69\xf6\x9c\x00\xc7\x8d\xe8\x2d\xdb\x18\xdb\x0d\x69\x74\xce\xe4\x05\xaa\x35\x4f\xad\x41\x8b\x07\x72\xa7\x7f\x38\x69\x1d\xf3\x32\xa9\x85\xc0\x52\x15\x4f\x01\xd5\x8d\x98\xea\x45\x58\x79\x3d\x55\x10\x33\x0d\xc1\x78\x3b\x08\xd9\x20\xde\x36\x42\x43\x3a\xb4\x16\x6c\x31\xbc\xe1\xe3\x72\xb2\xd0\x9d\x45\xbd\x23\x9f\x81\xbc\x75\x21\x99\x14\xad\x2f\xbe\xfc\x19\x8f\xfc\xbb\x6e\xda\x27\xed\xc4\xff\xb7\x2d\x97\x69\xef\x27\xb9\xac\x98\x4a\xd6\x41\xe8\xd0\x22\xaf\x95\x6f\x64\x3a\x1a\x7a\xa5\x7f\xbf\x41\x0a\x53\x25\xdb\x25\x09\xe3\x6b\x34\xc8\x98\x7e\xee\x2a\xfb\x87\x64\xe1\x65\x7a\xf1\xbd\x32\xa4\xdd\x94\xc2\x6b\x73\xea\x79\x5a\x93\xa4\x6c\xdb\xcd\x29\x3d\x07\xf4\x21\x94\x79\x61\xcf\x5a\x84\xce\x41\x89\x1a\xa3\xbe\x13\xef\xe2\x93\x2c\x31\x94\xe0\x1d\x1c\xc0\xcd\xd5\xc9\x15\x30\xb1\x92\xe6\x44\xa0\xbc\xa1\x2f\x36\x14\xc2\x2e\xd0\x6f\x28\x79\x71\x8f\xe2\x22\x4f\xd3\x02\x1f\x98\xb0\xab\x47\x43\x5d\x4c\x6e\xe5\xc0\x79\xb1\x68\x53\x5c\x84\xed\x04\x98\xf8\xb4\xde\xc1\x01\xd4\x12\x5b\x75\xc8\x04\xdf\xc0\xa6\xf3\x02\x52\xb1\xe4\x17\xe4\xa5\x79\x27\x09\x2c\x7d\x77\x80\x26\x10\x1b\xd8\x31\x70\x78\xa2\x62\x82\x6d\x34\xce\x8c\xe0\x57\xfa\xbf\xec\x06\xc6\x3c\x25\x69\xf5\x69\x41\xd3\x95\x19\x55\x63\xe6\x8c\x95\xe7\xd1\x49\xd4\xeb\xd8\xc1\x9b\x50\x4d\xd4\xe3\x50\x93\x4a\xb5\xa3\xe8\x0a\x60\x12\xa7\x79\xdc\x34\x79\x99\xe2\xa3\xfd\xa0\x74\x3f\x12\xc9\xee\x05\xab\x06\x6e\x76\x3f\x4e\x87\x3e\x9c\xf1\x1c\xbe\x9c\x3d\xcf\x0b\x2d\xd5\x95\x5c\xb5\x45\xf9\xc2\xa4\x7e\x5a\xe8\x8f\x05\x02\xd9\x50\xc5\xee\x0f\x8f\xd2\x15\x02\xfe\x71\x48\x22\x6d\x3b\x31\x31\xcf\x12\x83\x09\x14\x22\x1c\x74\xa9\xdb\x36\x75\x51\x58\x90\xb6\xb6\x0c\xd2\xe0\x70\x60\xee\x0d\x35\x81\x7a\x29\x1b\xd5\x38\xe8\xbf\xc8\x1d\x9a\x1b\x7c\x93\x87\x76\x40\x09\xc5\x75\xa1\x40\xeb\xb6\xb6\x5a\x22\x7e\x3f\x4d\xf6\x94\xdc\x3f\x39\x64\x44\x36\xc3\x96\x06\x07\x0d\x68\x1a\x53\xc6\xf6\x5f\xff\xe0\x00\xac\xe5\x02\x85\x9c\x7a\x97\x39\xd7\x64\xe1\x35\x36\xb4\x5c\xf2\x56\xc4\xef\x7d\x36\xdd\x3b\x7f\xe1\x50\xbb\x95\x7c\x81\xfe\x9a\x66\xe2\xf5\x78\x79\x75\x79\xf9\x9f\xf3\xf3\x6e\x14\x06\xb5\xd6\x72\x57\xd9\xfb\x8a\xad\x1f\x55\x1f\xee\x43\x7f\x77\x7c\xf2\x0c\xee\x87\xf0\x79\x01\x3d\xf6\x8f\x3b\x6f\xbe\x72\x3b\x3e\x7c\xcd\xd8\x78\xfa\x1d\x6b\xe7\x67\x8b\x5d\x5b\x40\xa7\xef\x35\x98\x4b\xfd\x26\x5a\x24\xac\x60\xc2\x76\xa1\xb5\xd7\xd6\x70\xea\xf1\x34\xda\x2a\x63\x76\x08\xf6\x75\x01\x77\x09\xe8\x35\x9b\x26\x88\xc0\xd1\xb4\x7f\x25\x19\xfc\xa7\xc7\xf6\xff\x03\x00\x00\xff\xff\x85\x50\x84\x80\x76\x14\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 5238, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
