// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\xcb\x6e\xdc\xb8\xd2\x5e\x4b\x4f\x51\x7f\x23\x08\x24\x43\x23\xcf\xba\x01\x2f\x12\x27\xf1\xf8\x3f\xbe\x24\xb1\x93\x59\x04\x81\x41\x4b\xa5\xb6\x62\x35\x25\x93\x54\xdb\x86\xa2\x77\x3f\x28\x92\x92\x28\xf5\xc5\x9d\x04\x38\xb3\x99\x36\xc9\xba\xb1\xbe\xfa\xaa\xa8\x34\xcd\x5f\xf0\x4a\x94\xa5\x82\xf9\x11\xc4\xf0\x57\xdb\xfa\x7a\xe9\xa1\x46\xf1\x7c\xfd\x5c\xa1\x5e\xa7\x1f\x32\xfe\x44\x6b\xc3\x91\x65\xad\x98\xca\x4b\x3e\x39\x75\x6e\x97\xf5\xc1\x8a\x25\xf7\x6c\x81\xd0\x34\xf1\x47\xf3\xf3\x82\x2d\xb1\x6d\x7d\x3f\x5f\x56\xa5\x50\x10\x68\x5d\x82\xf1\x05\xc2\xab\x7c\x59\x45\xf0\x8a\x15\x39\x93\x5a\xe1\xa9\x3e\x23\xdb\xd6\xf7\x9a\xc6\xac\xb7\x2d\x34\x0d\x1d\x84\x9f\xf0\x50\x97\x0a\xad\x37\xc8\x53\x6d\x30\xf4\xfd\xa6\xc9\x33\x58\x28\x08\x0a\xe4\x10\xbf\xc3\x0a\x79\x8a\x3c\xc9\x51\x86\xf0\xb7\x3e\xe4\x29\x72\xd9\xdd\x01\xa9\x44\x9d\x28\x68\x7c\xcf\x73\x1c\x4a\xb1\xd2\x8e\xb8\x47\x49\x9e\x0e\xd1\x66\x4c\xd1\xc0\x4f\xa8\xab\x0a\xc5\x31\x93\xf8\x21\x17\x52\x69\x1f\xc9\xc4\x49\xa9\x55\xe8\x8b\x31\xb7\x6c\xee\x48\xab\x70\xbd\xf6\x6c\x10\x85\xc4\x6d\x0e\xe6\x5c\xa1\xc8\x58\x82\x4d\x1f\x30\x5d\xa3\x3e\x88\x4f\x98\xd4\x74\xe7\xc7\x25\x57\xf8\xa4\x9c\x68\x0e\x16\x82\x55\x77\x0f\x45\x7c\x59\xa1\x60\xce\x19\xdf\x3b\x30\x62\xec\xb6\xc0\xab\xe4\x0e\x97\xcc\x6f\x7d\x7f\xc5\x04\xc8\xb2\x16\x09\x4a\x38\x82\x6f\xdf\x0f\x98\x54\xf1\x95\x5e\x68\x7c\x8f\xae\x87\x42\x9e\xc3\x4c\x6a\x91\xd8\xaa\x97\xb3\xc8\xf7\xbc\x53\x5e\xd5\x6a\x4e\x09\xd2\xb1\x5e\xa5\x05\xfc\x04\xc1\x1e\x3f\x99\x44\xd1\x91\xb7\x75\x5e\xa8\x53\x3e\x87\x8c\x15\x12\x23\xdf\x6b\xa3\xce\x6c\xc5\x84\xc4\xd4\xb8\x02\x47\xb0\x78\x28\xf4\x8a\x88\xcf\x6b\xa9\xce\x4a\x66\xb7\x02\xeb\x5e\x1c\xc7\xe1\x28\xfe\x21\x10\x27\x7e\x0d\x06\x07\xcd\xfa\x76\x3d\x83\xe4\x83\xa6\x19\x76\xc6\xf8\x8c\x47\x5b\x16\xb3\x7d\xca\xcc\x6f\x52\x3c\xaa\x01\xa3\xbb\xc7\x3f\xa9\x77\xf7\xd7\x2d\x8c\x76\x37\x18\x69\x7d\x3f\xab\x79\x02\x17\xf8\xf8\x7e\x12\xa2\xa9\x9b\xb5\xd8\x1e\x7e\x27\x30\x07\x89\x51\xaf\x76\x1a\xd9\xf2\x8f\xc2\x1a\x95\x28\x74\x98\x9c\x06\x45\x09\x13\xa8\x6a\xc1\xe1\xf5\x34\xa7\xa6\x32\x37\x25\xd3\x64\x73\x0e\x7a\x3d\x1a\x2a\xcb\x56\xd9\x96\x34\xf5\x79\x9a\x43\xb7\x3b\x91\x1d\xee\x3f\x40\x58\x2b\x96\x10\x6c\x22\x42\x30\x35\x32\x8d\xc0\x85\xf3\x0b\x9a\x8e\xcb\x65\x55\xe0\x53\xae\x9e\x03\xc2\x33\x5d\x59\x04\x59\x8e\x45\x4a\x48\xce\xf9\x22\x82\xe4\x2e\x2f\xd2\xe1\x1c\xd1\x41\x44\xa5\xf5\x46\x2c\x24\x2c\x59\xf5\xcd\x1c\xfc\xee\xd0\x44\x08\x81\x3e\x75\x5b\x96\x45\xe8\x38\xf6\x77\x64\x8a\xef\x05\xa7\x28\x39\x41\xa2\x9e\x20\x31\x84\x11\x5b\xe2\x18\xd2\xf7\x19\x65\x55\x72\x89\xff\x30\x9e\x16\x28\xb4\x89\x84\xf8\xb2\x3b\x70\x82\x6a\x4a\x3b\xa4\x31\xf4\x3d\xd4\xe7\xa6\xbc\xd5\x88\x24\x02\x6c\x7d\xdf\x93\x8f\xb9\x4a\xee\x40\x24\x03\x6f\x0d\xbf\xc8\x50\xc2\x24\x02\xdd\xbb\x49\xbe\xef\x75\xd1\x51\x44\x9b\xdd\x3e\x98\xfa\xad\xd9\xde\x4b\x99\x62\xda\x99\x24\xbe\xd1\xca\x48\x3a\x1a\x9b\xbe\xc2\x02\x13\xfa\x75\x85\x2a\x02\x34\x46\x43\x92\x26\xe2\xba\xad\x33\xb8\x7d\x56\x28\xe3\xb7\x75\x96\xa1\xe8\xb4\xc6\xe7\x4c\xc8\x3b\x56\x9c\x7c\x3a\x0b\x5e\xdf\xd6\x59\xe8\xd3\x4e\x07\xf0\xa9\x37\xda\x19\xef\x1d\x53\x6c\x4e\x1a\xe3\xb7\xa4\x31\x08\x09\x94\x1e\x01\x96\xae\x25\xc5\x8c\xd5\x85\x72\xc2\xed\xe9\x9d\xe3\xd5\x5d\xa9\x82\xbe\xb4\x84\x28\x45\xa7\xda\x44\x34\xab\xb9\xac\x2b\xea\xa8\x98\xc2\x09\x9d\xfb\x74\x06\x65\x17\xe3\x2c\x0c\x2d\xe4\x9b\xc6\x76\x3f\x35\x6a\xec\x1d\x37\xe5\x19\xe0\x83\xd9\x8c\xff\x93\xf3\x14\x66\x97\x6f\xff\xff\xfd\xf1\xf5\xcc\x16\x16\xdd\x48\xd3\x98\x7d\xdb\x1e\x8b\xf2\x71\xd4\x1e\x4f\x09\xc6\x4b\xe4\xaa\x14\xa6\xcb\x18\xf0\x36\x53\x39\xdb\xe0\x81\xd4\x5a\xa4\x26\x1d\x54\x07\xd4\x84\x70\xe3\xca\xb5\xed\xa6\xf4\x47\x20\xb1\xd0\x80\x19\xe7\xb2\xbc\xfd\xa1\x19\x4d\x6d\x64\x32\x47\xe9\x00\x7b\x9b\x55\x03\x78\xcf\xd3\x75\x2a\x5d\xd8\x1f\x97\x05\x99\xf8\xa0\x37\x02\x4c\xd6\x7a\xaf\x76\x26\xfa\x95\x5b\x32\xd0\xa1\xb8\x06\x33\xff\xe6\xea\x4e\xdb\x70\x4a\x2b\x1a\x70\xe5\x6e\x19\x6c\x5d\xde\xfe\xc0\xc4\xf4\xe7\x0d\xb7\x6c\x80\x66\x0c\x95\xb5\x72\x03\xba\xc0\x47\xad\xed\x0a\x55\x60\xc2\xd5\xd8\xcf\x4a\x01\x79\x47\x54\xf3\x23\x3b\x34\xd9\xfb\x30\x26\x6d\x1d\xeb\x35\x63\xcf\xac\xeb\xf2\x9d\xdd\xdc\x90\x1f\x9c\x2d\x71\x36\xd7\xcb\xda\x72\xfc\x95\x15\x35\xca\x6f\xf9\x77\x38\x02\xe4\x49\x99\xe6\x7c\xf1\x96\xc9\x3c\xe9\xae\xfe\x4a\xc3\x25\xd8\x1c\x87\x76\xcd\x1d\xe2\x7a\xff\xcc\x69\x93\x16\xd3\x03\x8c\x1f\x4d\xf3\xca\x71\x70\x9a\x88\x41\xb3\xf5\xb1\xeb\x90\x46\xe6\x54\x9e\xa3\xba\x2b\x53\xab\xd0\xe2\x81\xcc\xe9\x1f\x4e\x58\xc7\x25\x4f\x6a\x21\x90\xab\xe2\x39\xa0\x7b\x23\xa6\xda\x0a\x2b\x6f\xa0\x0a\x62\xa6\x31\x18\x6f\x46\x2e\x1b\xc4\xdb\x44\x68\x48\x87\x56\x83\xbd\x0c\x6f\x3c\x5c\x6e\xbe\xe8\xdf\x35\x32\x9a\x63\x37\xfc\xdd\x76\x04\xa6\x4d\xbe\xcb\x65\xc5\x54\x72\x17\x84\x0e\x17\x96\xb5\xb2\x04\xe7\xf5\xe4\xb3\x23\x6b\xbf\x40\x05\x9b\x62\x58\xa7\x06\x63\x6b\x52\xbe\x98\x7e\xe8\x43\xfd\x43\x8a\xf0\x32\xdd\xee\x76\x94\x66\x5f\x9b\xb0\xab\x3a\x3d\x4f\x4b\xd2\x29\x9b\x07\xb3\x4a\x43\x80\x5e\x04\x9e\x17\x76\xad\xc3\xe5\x1c\x94\xa8\x31\x1a\x52\xb1\x17\x8b\x64\x89\x21\x02\xaf\x69\x1c\xac\xff\xc3\xa4\x9e\x37\x3a\x10\x75\xf3\x47\x07\xf6\xf8\x8d\x58\xd4\xc4\x58\xe7\xac\x22\xde\xfb\xca\x44\x4e\x23\x85\xb4\x50\x61\x62\x21\x23\x40\x21\xba\x7e\xab\xa5\x5e\x48\xd9\x0d\x49\xd9\x9e\x6c\xec\x59\x6d\xd4\x88\x84\x80\xff\x3b\xa2\xa8\xfb\xa2\xc1\xc4\xf4\x3e\x23\x81\x42\x74\xb5\x30\x69\x98\x17\x75\x51\x98\x9d\x11\x6c\xdb\xd6\xc4\x2d\x50\x5e\xd3\x6b\x74\x70\xf6\x33\xca\xb2\x58\xa1\x38\xcf\xd3\xb4\xc0\x47\x26\x6c\x5b\xd5\x65\x2c\x36\x4e\x1c\x81\x33\x8d\x69\x55\xa5\x08\x3b\x47\x4d\x16\xb4\xdc\xe1\x21\xd4\x12\x3b\x71\xc8\x44\xb9\x84\x65\x6f\x05\xa4\x62\xc9\x3d\xe4\xdc\xcc\x80\x02\xb9\xef\xc6\x53\xde\xfe\x88\x27\x37\x66\x66\xde\x29\x3d\x41\x60\x2f\xc2\xa1\xc6\x8a\x09\xb6\xd4\x45\x66\x4e\x7f\xa4\xbf\x65\xcf\x11\x66\x7a\xa6\x6e\xaf\x0f\x1a\x48\xce\x28\x1f\x33\x87\x49\x6c\x5e\x07\x19\xcb\x35\x1b\x44\x13\xf5\x34\x96\xa4\x1b\x5c\x13\x74\x0f\x60\x12\xa7\x79\xdc\x34\x39\x4f\xf1\xc9\xbe\xa1\xdd\x77\x31\xe9\x3d\x67\xd5\xc8\xcc\xfa\x7b\x7c\x6c\xc3\x21\xa7\xf1\x63\xc1\xf3\xbc\xb0\x69\xf4\x5f\x96\xe4\x79\xa9\x1c\xf0\x6b\x60\xe9\x67\x12\x41\x6e\x2c\x69\x3b\xe7\x66\x54\x6e\x03\xe5\x36\x4c\xb6\xbd\x2e\x83\x43\x38\x1a\xa9\x7b\x41\x4c\xa0\x2e\x49\x23\x1a\x07\xc3\xb7\x08\x13\xc8\xfa\xd7\x88\xd0\x92\x14\x61\xbc\x2e\x14\x68\xd9\x4e\x57\xd7\x82\x7a\x90\x69\xf9\x9f\x40\x4a\x7b\x9e\x33\x20\x5b\xeb\x13\xc3\xb0\x25\x23\xd2\x19\xf6\xbd\x60\x17\xaf\xec\xe4\xf7\x5f\xa2\x8c\x75\xaa\x7f\xf1\xc9\xd4\x34\xe6\xe3\xc1\xf5\xe8\xce\xb4\xcc\xe8\xce\xa6\xf5\xcc\x2c\x11\xee\x2b\xdf\x58\xc0\xd1\x10\x75\x8f\xcf\x11\xac\x58\x31\x0c\x51\x9d\x9b\x1d\xab\xd9\x39\xea\x1e\x9f\x87\xe9\xc0\xa9\x63\x26\x16\x4e\x15\x93\xa4\x5b\x63\x76\xc6\x61\x62\xb1\xe7\x84\x43\xff\xad\x5c\xee\xb3\xd2\x4e\xe6\xbf\xf0\xe5\xf6\xdc\xaf\x58\x11\x0e\x9a\x36\xf3\xb4\x03\xae\xbe\x2d\x0c\x5b\x83\xf7\xfa\x62\x63\xc7\xfd\xb6\x85\x23\x58\x4d\x0a\xba\x0f\xb7\x75\x39\x7d\x6c\x80\xe7\xc5\xd0\x05\xc7\xdf\x08\x7a\x4a\xb0\xd5\xef\x77\xff\xf7\x0f\x0f\xc1\x82\xbc\x40\x21\x37\xbc\x8d\x9c\x5d\x52\xb0\x0b\xbb\x16\xb4\x2f\xd5\xce\xbe\x4f\x97\x95\xf3\x95\x51\xad\xd7\xf4\x96\x61\xc4\x14\xde\xe4\x05\x77\x71\x79\x71\xf1\xe5\xec\xac\xe7\xe6\x51\xd5\xeb\x73\x97\xd9\x7e\x65\xaf\x1f\x36\xaf\x57\xa1\xbf\xce\xe7\x79\x06\xab\x31\x91\x6d\xe1\x31\x87\x20\x76\xbe\x34\x77\x0c\xc8\x8e\x33\xda\x97\xb5\xae\xe4\x28\x3d\x3b\xbd\x72\x54\x32\x03\xfa\x83\x55\x67\x80\xfe\x5a\xb2\x7b\xec\x9f\xd6\x6f\x84\x60\xcf\x11\x14\xc8\x03\x26\x44\x68\x90\x4e\xaf\xde\xc7\x05\xc8\x67\x9e\xc4\xff\xb2\x5c\x9d\x88\xb2\xae\xf4\xce\xe3\x22\x7e\x93\xa6\xc1\xf8\xb8\x7e\x3a\x0d\xe5\x4e\x46\x6d\x61\xbc\x3c\x2a\x7a\xa7\xd4\x0b\xe7\x00\xaf\xf3\xae\xaf\x19\xde\x9e\xc3\x6b\x26\xc4\xb7\xfc\x7b\x34\x2a\x02\x82\xd4\x7c\x9f\x81\x4f\x9f\x5e\x94\x66\xa2\xc9\x21\xe7\xaa\x67\x37\x2f\xc5\x0c\x29\xc2\xf8\x5d\xc9\x31\x70\x66\xaa\xfe\xf5\xf0\x5b\x48\x31\xfe\x5a\x75\x6d\x90\x87\xce\x9c\xfa\xb8\xd0\x37\x69\x8d\xd9\x54\x0b\x54\x2f\xa4\xf3\xfd\xc5\x97\xf3\x21\x9d\x96\x38\x0f\x56\x36\x12\xfd\x2f\x17\x59\x57\xbd\xa6\x62\x3e\xd4\x45\x61\x9a\xa2\x72\xbe\x0f\xba\xfc\x6a\xb9\xd9\x08\xc6\xef\x79\xbd\x34\x4f\xa7\x7e\x12\xee\xdf\x91\x1b\x1f\x09\x5a\x81\xe1\xde\x81\x63\x3b\xec\xee\x7e\xe0\xf6\x82\x1b\xde\xb7\xdd\xa7\xe8\xfe\xc6\x2a\xc6\xf3\x24\x98\x21\xaf\x97\xc4\xc1\x35\xea\xf9\x25\x2b\x6b\x9e\xce\xd6\xaa\x20\x97\xda\xe4\x55\xc2\x0a\x26\x26\xa1\xef\xf2\x6d\xf2\x3e\x99\x8e\x5a\xc1\xc1\xa4\xe0\xf6\xd1\x69\x9c\x08\x1c\xc9\x2e\x34\xf7\x8f\x31\x2d\xf7\x1d\x68\x0b\x31\x8f\xf6\x7f\x8d\x9a\x77\x34\xb7\x75\x72\x5e\xc1\x74\x80\xd8\x4e\xca\xa3\xa1\x81\x28\x23\xc5\xec\x2b\x2b\x76\x12\xf9\xbe\x9c\xbd\x62\xc5\xa4\x65\xaf\x97\xe3\xee\xae\x1d\xfa\x5b\xba\xb5\x4d\x9d\x71\xb6\xef\xd4\x3d\xa9\xb3\x62\x23\xad\x77\xc7\x6d\xdf\x75\x1b\xcb\xc1\x6a\xd8\xd8\xbb\x4d\x6c\xd2\xb7\xf1\x66\x4e\x2f\x3e\x7e\xb9\x9e\xb6\x8a\xc3\x43\xb8\xbe\x7c\x77\x49\xef\x25\x4c\x94\x1e\x09\xc0\x28\x76\x6d\xd0\xfb\xb9\x33\xb0\x77\xcb\xe8\x54\x17\xb9\xfc\x53\xc5\x63\xf2\x22\x84\xac\x5c\x78\x04\x1d\x4a\x79\xc9\xa9\x5b\xbe\xb9\x2d\x90\xd2\xfb\x19\xb3\x70\x0d\x35\x3d\xf9\xad\xe2\xc0\x8c\xba\xe1\xff\x86\x04\xd7\x39\xab\xe3\x3c\x0d\x95\x3d\x79\x72\x13\xcd\x39\xdf\xbf\x07\xba\xcb\xf9\x8a\x15\x79\x0a\x03\xed\xcd\xdc\x36\xd2\x7d\x6f\x77\x20\xb7\x37\x0f\x8e\x6a\x6a\x44\x5c\x7d\x25\xbd\x44\x87\xab\x70\xdd\x0b\x5b\x40\x6b\x14\x69\x2d\x19\xa0\x0f\x26\x4e\x3e\x9d\x4d\xd4\x4c\x2a\x71\x0f\xc6\xfc\x6f\x00\x00\x00\xff\xff\x21\xd4\xf5\xab\xe8\x1f\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 8168, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\x5b\x6b\xc2\x30\x14\x7e\xf7\x57\x7c\x94\x3c\x58\xd0\xb2\x67\x61\x0f\x4e\x14\x76\x73\x63\xd3\xbd\x87\xf5\xb4\x04\x62\xd4\x26\x75\xc8\x31\xff\x7d\x34\xad\xbd\x88\x2f\x6d\xc8\xf9\xae\xed\x61\x9e\xa2\x90\x26\x27\x08\x87\xd9\x23\x92\xcd\xf9\x40\x16\x53\xef\x47\xd5\x48\x65\xa0\x23\x84\x4b\x5e\x95\x49\x11\x7d\x2f\xe6\x6f\xf3\xaf\x28\x8c\xed\xaf\xd4\xb2\x00\xb3\x70\xc9\x5a\xee\xa8\x61\x90\x49\x3b\xee\xbe\xc0\xb8\xcf\x5f\xae\xb7\xef\x51\x1c\xe8\x64\xca\x5d\x9f\x0c\x1e\x01\xbd\x34\xa7\x2a\x8d\x70\xc9\xd2\x94\xbb\x1f\xa9\x4b\xb2\xde\x07\x84\x38\x5d\xed\x6a\x7c\x6d\xd8\x98\x6b\x4b\xf7\x7c\x3f\x9e\x5e\x96\x8b\x4d\x14\x0f\x6f\x9f\xd7\x9f\xdb\x4d\x3b\xaa\x2b\xdf\x14\x6e\xa6\xde\xbb\xf3\x81\x98\x2b\x7d\xef\x95\x39\x94\x8e\x39\x18\xdf\x54\xe8\x15\xc8\x9a\x02\x2b\x45\x3a\x6d\xc3\x67\x01\x8b\x0b\xf4\xfe\x8f\x8a\x85\xb4\xb4\x52\x85\x75\x6d\x1b\x95\x21\x77\x18\x6b\x32\x10\x59\x32\x2f\x72\x1b\xe3\x21\x64\x03\x80\x71\x78\x0e\xbe\x93\x9a\x40\xc8\x60\x55\xc3\x1b\xe4\x15\xa5\x32\x08\xe5\x3d\x73\x34\x41\x54\xbd\xc9\xa4\xad\xdc\x15\x24\xe4\xfd\x54\xf0\x7e\x56\x85\x96\x61\x2b\x70\x41\x7e\xd4\xe1\xd4\x09\x30\xa3\xaf\x18\x77\x3f\xa5\xb9\x9b\xd5\xad\x87\x02\x83\x5d\xe9\x9f\x47\x5d\xc0\xff\x00\x00\x00\xff\xff\x0d\x86\x94\x36\x9a\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 666, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
