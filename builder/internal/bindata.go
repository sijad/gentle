// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/code.tmpl
// template/sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCodeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4d\x6f\xdb\x38\x13\x3e\x53\xbf\x62\x60\x14\x85\x14\xa8\x6a\xcf\x06\x72\x78\x93\xb4\x79\xb3\xdb\x34\xcd\xba\xd8\x1e\x8a\x22\xa0\xa9\x91\xad\xae\x2c\x2a\x24\xb5\x49\xc0\xe8\xbf\x2f\x86\xa4\x3e\xac\x38\xe9\x16\x7b\x93\x87\x33\xf3\xcc\xc7\x33\x43\xda\xda\x37\xf0\x4a\x49\x69\x60\x79\x0c\x19\xbc\xe9\xba\xa8\xe1\xe2\x2f\xbe\x41\xb0\x36\xfb\xec\x3f\x3f\xf1\x1d\x76\x5d\x14\x95\xbb\x46\x2a\x03\x71\x44\x56\x8a\xd7\x1b\x84\x57\xe5\xae\x71\xa6\x17\xee\x4c\x77\x5d\xc4\xac\x75\xd2\x47\xb8\x6d\xa5\x21\x43\x6b\xb1\xce\x9d\xef\x24\x8a\xac\x2d\x0b\xd8\x18\x88\x2b\xac\x21\x3b\xc3\x06\xeb\x1c\x6b\x51\xa2\x4e\xe0\x9d\x53\x62\xe6\xa1\x41\x98\x9e\x80\x36\xaa\x15\x06\x6c\xc4\xd8\x04\x3b\x47\x8f\x3d\x55\x25\x7b\x52\xa2\xc3\x8c\x02\x87\x47\x68\x9b\x06\xd5\x29\xd7\xf8\xa1\x54\xda\x74\x1d\x58\x4b\x10\xe7\xd2\xb9\xc8\xbe\x10\x9c\x2b\x82\xfb\xf4\x2e\x08\xa6\x8f\x9a\x75\x2e\x63\xac\x34\x3e\x17\x60\x59\x1b\x54\x05\x17\x68\x83\x6e\x9d\x53\xc5\x9c\x22\xde\xa3\x68\x4d\x29\xeb\x53\x59\x1b\xbc\x37\x93\x6c\x8e\x36\x8a\x37\xdb\xdb\x2a\xbb\x6a\x50\xf1\x89\x4e\xc4\x8e\xbc\x19\x5f\x57\xb8\x12\x5b\xdc\xf1\xa8\x8b\xa2\xbf\xb9\x02\x2d\x5b\x25\x50\xc3\x31\x7c\xfb\x7e\xc4\xb5\xc9\x56\x4e\x60\x23\xf6\x7a\xef\x17\xa3\xec\x97\xb0\xd0\xce\x3a\x0b\x48\x7a\x91\x46\x8c\x5d\xd4\x4d\x6b\x96\x60\xad\x4f\x7b\x95\x57\xf0\x08\x8a\xdf\x5d\xfb\x8e\x91\xca\x49\x5b\x56\xe6\xa2\x5e\x42\xc1\x2b\x8d\x69\xc4\xba\xb4\x8f\xa0\xe1\x4a\x63\xee\xa3\x82\x63\xd8\xdc\x56\x4e\xa2\xb2\xcb\x56\x9b\x8f\x92\x87\xa3\x38\x44\x9a\x65\x59\xb2\x57\x8a\x31\xa7\x49\x29\x6e\x5b\x54\x0f\x70\xb4\xc5\xaa\x92\x5f\xa5\xaa\xf2\xec\x9a\x24\x84\x59\xb4\xb5\x80\x4f\x78\xf7\x7e\x66\x1d\x3f\x63\x93\x40\x5f\xd6\xb9\x05\x01\x29\x34\xad\xaa\xe1\xf5\x3c\x16\x2a\x99\x73\x48\xb9\x0e\xb0\x31\xc2\x93\x4e\x24\x10\xf0\x13\xf0\x0d\x98\xfb\x9e\x16\xe8\x27\x9e\x4e\xe5\xae\xa9\xf0\xbe\x34\x0f\x31\x55\x88\x7a\x96\x42\x51\x62\x95\x53\x6d\xca\x7a\x93\x82\xd8\x96\x55\x3e\xea\x11\xd7\x52\x6a\xd6\xff\xd4\x46\xc3\x8e\x37\xdf\xbc\xe2\xf7\x09\x07\x13\x88\x9d\xd6\x5a\xca\x2a\x99\x04\xf6\x2e\xf5\xed\xfc\x49\x50\x54\xb6\x58\x98\x7b\x10\x9e\x8d\x59\x60\xe5\x58\xd8\x3f\x50\x37\xb2\xd6\xf8\x7f\x5e\xe7\x15\x2a\x07\x21\x68\x18\x7b\x85\x73\x34\x73\x4e\x93\xc7\x24\x62\xe8\xf4\xe6\x43\x61\x95\x48\x01\xbb\x28\x62\xfa\xae\x34\x62\x0b\x4a\x8c\x43\x31\x7e\x11\x90\xe0\x1a\x81\xea\xee\x9a\xbd\x8c\x58\x9f\x1d\x65\x74\x38\xec\xa3\x79\xdc\x6e\x95\xb0\x9c\x1b\xee\x82\x11\xd9\x8d\x73\x46\xd6\xe9\x3e\xf4\x0a\x2b\x14\xf4\xb5\x42\x93\x02\x06\x86\x91\x35\x8d\xc2\xba\x2d\x60\xfd\x60\x50\x67\x27\x6d\x51\xa0\xea\xbd\x66\x97\x5c\xe9\x2d\xaf\xce\xaf\x3f\xc6\xaf\xd7\x6d\x91\x44\x74\xd2\x53\x6f\x1e\x8d\x0b\x86\x9d\x71\xc3\x97\xe4\x31\x3b\x21\x8f\x71\x42\x63\xc8\x68\x19\x51\x59\x72\x2c\x78\x5b\x99\x49\xba\xc3\xee\xa8\x71\xb5\x95\x26\x1e\x48\xaf\x94\x54\xbd\x6b\x9f\xd1\xa2\xad\x75\xdb\xd0\x86\xc6\x1c\xce\x49\xef\xfa\x23\xc8\x3e\xc7\x45\x92\x04\xca\x5b\x1b\x56\xab\x9b\x56\xda\xad\xc3\x46\xa4\xad\x56\x16\x80\xb7\xfe\x30\xfb\xbd\xac\x73\x58\x5c\x9d\xfc\xf6\xfe\xf4\xcb\xc2\xaf\x45\x57\x11\x6b\xfd\x79\xd8\xbd\x95\xbc\xdb\xdb\xbd\x17\x44\xe3\x1d\xd6\x46\x2a\xbf\xc2\x3c\x79\xed\xdc\x2e\xdc\x1d\x40\x6e\x03\x53\x45\x4f\xd5\x91\x35\x09\xdc\x4c\xed\xba\xee\x50\xfb\x53\xd0\x58\x39\xc2\xec\xf7\x52\xae\x7f\xc0\x51\x6f\xbe\x77\xd5\x65\xfb\x4e\x47\xda\x87\xae\x7a\xc2\x33\xe6\xe6\x54\x4f\x69\x7f\x2a\x2b\x82\xf8\xe0\x0e\x62\x14\x4f\x16\xbb\x0b\x26\xfd\x95\x2a\x79\xea\x50\x5e\x23\xcc\xd7\xd2\x6c\x1d\xc6\x64\xb4\xd2\x91\x57\xd3\x23\xcf\xad\xab\xf5\x0f\x14\x7e\xe3\x1f\xa8\xb2\x27\x9a\x07\x92\xad\x99\x26\xf4\x09\xef\x9c\xb7\x15\x9a\xd8\xa7\xeb\xb8\x5f\x48\x05\x65\xbf\xa8\x96\xc7\xe1\x46\x0e\xf5\xf0\x90\x61\x8e\x9d\xcc\xe3\x79\xf9\xe4\x02\x1f\xcc\x7d\x50\xbe\x6a\xfe\x06\xf7\x53\x6e\xed\xab\x89\xfd\xbc\x4e\x63\x02\x4b\x67\xd2\x73\x34\xd8\x5c\xe8\x4b\x34\x5b\x99\x07\x87\xa1\x5d\x04\xe7\x3e\x82\x50\xb6\x8e\x28\xa2\x55\x0a\x6b\x53\x3d\xc4\x94\x16\x2d\x92\x67\xbb\xce\xc6\x49\xa6\xc5\xb1\xcf\x95\x9b\xbd\x90\x3d\x21\x43\x9d\x1c\xe3\x92\xe0\x21\x54\x9b\x62\xa6\x77\xc5\x10\x23\x85\xf3\x27\xaf\x5a\xd4\xdf\xca\xef\x70\x3c\x56\xc0\xbd\x52\x1e\x81\xa0\x86\x78\x7c\x7e\x01\x48\xae\x7f\x64\x33\xf0\x64\x2c\xcb\xf0\x96\x39\xf0\xbb\xeb\xf7\x8c\x43\x3f\x2b\x75\xc3\x8d\xd8\xc6\xc9\x64\x65\xc9\xd6\x44\x5e\x67\x58\x11\x2f\x34\xef\x17\x06\xf6\x50\xbd\x9e\x0e\xb0\xc7\x9a\x0d\x19\xe6\x1f\x86\xb2\xfe\xc7\x41\x66\x85\xbb\x94\x5e\x18\xa0\x61\x82\xe0\xa5\x19\x62\xcc\x59\x92\x56\xe8\xb9\x97\xd2\x55\xed\x84\x50\x97\x55\x90\xf5\xf4\x5c\x82\x51\x2d\xa6\x63\x27\xd8\xcd\xbf\x19\xf6\x42\xf8\xee\xbe\x7d\x0b\x5f\xae\xce\xae\x80\xab\x8d\x8e\x3c\x35\xdd\x46\x3a\x40\x87\x78\xa4\x43\xe8\x61\xc3\x15\xdf\xb9\x1e\x7a\xbd\xcf\xf4\x5b\x0f\x64\x74\x6f\x75\xda\xf8\x4e\xcf\x27\xbc\x20\xa0\xc5\xc0\x1d\xc6\x18\x09\xd2\xc1\x62\xfa\x4e\x7e\xc1\x8b\x30\xf7\x7b\x4e\x5c\xd2\xe9\x68\xf2\xd4\x0d\x43\x91\xe5\x65\x66\x6d\x59\xe7\x78\x1f\x1e\xec\xd3\x47\x38\x39\xbe\xe4\xcd\x1e\xce\xd3\xc7\xff\x3e\xc6\x64\x0a\x0e\x48\xc6\x97\x3c\xfd\x4a\xa2\xc9\xe4\xcf\x88\xb4\x72\xb7\x58\xac\xd0\xaf\xc7\x27\xff\x20\xdc\x5f\xa0\xfe\xaf\x50\xd7\x45\xff\x04\x00\x00\xff\xff\xf8\x94\x0f\x2f\x78\x0d\x00\x00")

func templateCodeTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCodeTmpl,
		"template/code.tmpl",
	)
}

func templateCodeTmpl() (*asset, error) {
	bytes, err := templateCodeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/code.tmpl", size: 3448, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xcb\x6a\xc3\x30\x10\xbc\xfb\x2b\x06\xa3\x43\x02\x89\xe9\x39\xd0\x43\x1a\x1a\xe8\x83\xb4\xb4\xe9\x07\x88\x7a\x6d\x04\xaa\x92\x48\x2a\x25\x6c\xf6\xdf\x8b\x65\x25\x76\x4a\x2f\xb6\xd8\x99\x9d\x07\xcb\x3c\x87\xd7\xae\x25\xa8\x88\xc5\x2d\xaa\xed\x71\x4f\x01\x73\x91\xa2\x83\x4c\x03\x3a\x40\xc5\xea\xc9\xb8\x1a\xe5\xfb\x6a\xf9\xbc\x7c\x2b\x13\x1c\x3e\xb5\xd5\x1e\xcc\x2a\x56\x1b\xfd\x45\x79\x83\x5c\x3d\xec\xee\x3c\x26\xe3\xfd\x97\xbb\xc7\xfb\xd5\xb6\x9c\x5e\x4f\x1f\x36\xaf\x1f\xdb\x0b\xd4\x5b\xff\x31\xce\xa8\x48\x3c\xee\x89\x99\x6c\x20\x11\xe3\xf6\xdf\x91\x39\x39\x8e\x73\x80\x8b\x51\xad\xa6\xab\xa5\x62\xb5\x36\x64\xeb\x20\x52\xa0\xe3\x36\x89\x8b\x13\xec\xee\x87\xfc\x4a\x07\x5a\x1b\x1f\x62\x86\x53\xf8\x36\x62\x62\xc9\x41\x35\xd5\xd2\xb7\x61\x8a\x9b\x94\x0d\x00\x26\xe9\xdb\x33\xb3\x8d\x99\x41\xe9\x64\xd5\xd3\x33\xf3\xcc\x32\x0d\x94\x11\x61\x2e\x67\x28\xbb\x3f\xb9\xfa\x22\x77\x26\x29\xfd\x7f\x2a\x88\x2c\xba\xd0\x3a\x5d\x07\x27\xb4\x07\x9b\x5e\x83\x00\x33\xc6\x8a\xd3\x5c\x63\x98\x2d\xfa\xd6\xd7\x02\x57\x37\x1b\xbf\x8b\x21\xe0\x6f\x00\x00\x00\xff\xff\x80\xcf\xba\x21\x22\x02\x00\x00")

func templateSdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSdlTmpl,
		"template/sdl.tmpl",
	)
}

func templateSdlTmpl() (*asset, error) {
	bytes, err := templateSdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/sdl.tmpl", size: 546, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/code.tmpl": templateCodeTmpl,
	"template/sdl.tmpl":  templateSdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"code.tmpl": &bintree{templateCodeTmpl, map[string]*bintree{}},
		"sdl.tmpl":  &bintree{templateSdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
